{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/today.js\",\n  _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TodayDashboard = () => {\n  _s();\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  // pagenumber to pass to backend to pass the next batch of data\n  // \n  const [pageNumber, setPageNumber] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(false);\n  const [error, setError] = useState(false);\n  const observer = useRef();\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.bserve(node);\n  }, [loading, hasMore]);\n  useEffect(() => {\n    dispatch(postActions.fetchPosts(pageNumber));\n  }, []);\n  const posts = useSelector(state => state.posts);\n\n  //will trigger a dispatch for more data when\n  // pagenumber changes\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    dispatch(postActions.fetchPosts(pageNumber)).then(res => {\n      setLoading(false);\n    });\n  }, [pageNumber]);\n  const postsToShow = Object.values(posts);\n  if (sessionUser) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 29\n  }, this);\n  //all Today dashboard will be in here\n  //select posts that were reblogged by \n  //todayonmumblr\n  // in seeding, need to have posts reblogged by todayonmumblr\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: postsToShow.map(post => {\n      return /*#__PURE__*/_jsxDEV(ShowPost, {\n        post: post,\n        profile: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(TodayDashboard, \"TizNdfu5ojbXrjKGVtjH/SrVwck=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n_c = TodayDashboard;\nexport default TodayDashboard;\nvar _c;\n$RefreshReg$(_c, \"TodayDashboard\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useRef","useCallback","useDispatch","useSelector","Redirect","postActions","jsxDEV","_jsxDEV","Fragment","_Fragment","TodayDashboard","_s","sessionUser","state","session","user","dispatch","pageNumber","setPageNumber","loading","setLoading","hasMore","setHasMore","error","setError","observer","lastPostElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","bserve","fetchPosts","posts","then","res","postsToShow","Object","values","to","fileName","_jsxFileName","lineNumber","columnNumber","children","map","post","profile","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/today.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst TodayDashboard = () =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    // pagenumber to pass to backend to pass the next batch of data\n    // \n    const [pageNumber,setPageNumber]=useState(1);\n    const [loading,setLoading] = useState(true);\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState(false);\n    const observer = useRef();\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return \n        if(observer.current) observer.current.disconnect();\n        \n        observer.current = new IntersectionObserver(entries =>{\n            if (entries[0].isIntersecting && hasMore) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.bserve(node)\n    },[loading,hasMore]);\n    useEffect(()=>{\n        dispatch(postActions.fetchPosts(pageNumber))\n    },[])\n    const posts = useSelector(state=>state.posts);\n\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setLoading(true);\n        setError(false);\n        dispatch(postActions.fetchPosts(pageNumber))\n            .then(res=>{\n                setLoading(false);\n            })\n\n    },[pageNumber]);\n    const postsToShow=Object.values(posts);\n    \n    \n    if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    return (\n        <>\n        {postsToShow.map ((post)=>{\n        return <ShowPost post={post} profile={false}/>})\n        }\n        </>\n    );\n\n\n\n\n}\n\nexport default TodayDashboard;"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,mBAAmB;AACxC,SAASC,SAAS,EAACC,QAAQ,EAACC,MAAM,EAACC,WAAW,QAAQ,OAAO;AAC7D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACjD,MAAMC,cAAc,GAAGA,CAAA,KAAK;EAAAC,EAAA;EACxB,MAAMC,WAAW,GAAGT,WAAW,CAACU,KAAK,IAAEA,KAAK,CAACC,OAAO,CAACC,IAAI,CAAC;EAC1D,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B;EACA;EACA,MAAM,CAACe,UAAU,EAACC,aAAa,CAAC,GAACnB,QAAQ,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACoB,OAAO,EAACC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC3C,MAAM,CAACsB,OAAO,EAACC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC5C,MAAM,CAACwB,KAAK,EAACC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACxC,MAAM0B,QAAQ,GAAGzB,MAAM,CAAC,CAAC;EACzB,MAAM0B,kBAAkB,GAAGzB,WAAW,CAAC0B,IAAI,IAAE;IACzC,IAAGR,OAAO,EAAE;IACZ,IAAGM,QAAQ,CAACG,OAAO,EAAEH,QAAQ,CAACG,OAAO,CAACC,UAAU,CAAC,CAAC;IAElDJ,QAAQ,CAACG,OAAO,GAAG,IAAIE,oBAAoB,CAACC,OAAO,IAAG;MAClD,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACC,cAAc,IAAIX,OAAO,EAAE;QACtCH,aAAa,CAACe,cAAc,IAAGA,cAAc,GAAE,CAAE,CAAC;MACtD;IACJ,CAAC,CAAC;IACF,IAAIN,IAAI,EAAEF,QAAQ,CAACG,OAAO,CAACM,MAAM,CAACP,IAAI,CAAC;EAC3C,CAAC,EAAC,CAACR,OAAO,EAACE,OAAO,CAAC,CAAC;EACpBvB,SAAS,CAAC,MAAI;IACVkB,QAAQ,CAACX,WAAW,CAAC8B,UAAU,CAAClB,UAAU,CAAC,CAAC;EAChD,CAAC,EAAC,EAAE,CAAC;EACL,MAAMmB,KAAK,GAAGjC,WAAW,CAACU,KAAK,IAAEA,KAAK,CAACuB,KAAK,CAAC;;EAE7C;EACA;EACAtC,SAAS,CAAC,MAAI;IACVsB,UAAU,CAAC,IAAI,CAAC;IAChBI,QAAQ,CAAC,KAAK,CAAC;IACfR,QAAQ,CAACX,WAAW,CAAC8B,UAAU,CAAClB,UAAU,CAAC,CAAC,CACvCoB,IAAI,CAACC,GAAG,IAAE;MACPlB,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EAEV,CAAC,EAAC,CAACH,UAAU,CAAC,CAAC;EACf,MAAMsB,WAAW,GAACC,MAAM,CAACC,MAAM,CAACL,KAAK,CAAC;EAGtC,IAAIxB,WAAW,EAAE,oBAAOL,OAAA,CAACH,QAAQ;IAACsC,EAAE,EAAC;EAAG;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAC3C;EACA;EACA;EACA;EACA,oBACIvC,OAAA,CAAAE,SAAA;IAAAsC,QAAA,EACCR,WAAW,CAACS,GAAG,CAAGC,IAAI,IAAG;MAC1B,oBAAO1C,OAAA,CAACV,QAAQ;QAACoD,IAAI,EAAEA,IAAK;QAACC,OAAO,EAAE;MAAM;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA,CAAC;EAAC,gBAE9C,CAAC;AAMX,CAAC;AAAAnC,EAAA,CAxDKD,cAAc;EAAA,QACIP,WAAW,EACdD,WAAW,EAsBdC,WAAW;AAAA;AAAAgD,EAAA,GAxBvBzC,cAAc;AA0DpB,eAAeA,cAAc;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}