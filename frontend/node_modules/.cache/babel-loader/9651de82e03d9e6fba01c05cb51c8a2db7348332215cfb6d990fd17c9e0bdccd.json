{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserDashBoard.js\",\n  _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useParams, Link } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\n//instead of using fetchPosts, will use User posts with Params\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserDashboard = _ref => {\n  _s();\n  let {\n    pgnumber,\n    type\n  } = _ref;\n  const {\n    userid\n  } = useParams();\n  //params will contain id\n\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  const [postsMap, setPostsMap] = useState([]);\n  const [pageNumber, setPageNumber] = useState(pgnumber);\n  const [loading, setLoading] = useState(true);\n  const [initalLoad, setInitialLoad] = useState(false);\n  const [hasMore, setHasMore] = useState(false);\n  const [error, setError] = useState(false);\n  const [morePosts, setMorePosts] = useState(true);\n  const observer = useRef();\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    if (!morePosts) return;\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && morePosts) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, morePosts]);\n  useEffect(() => {\n    setPostsMap([]);\n    setPageNumber(1);\n    dispatch(postActions.clearPosts());\n    dispatch(postActions.fetchPosts(pageNumber, type, userid)).then(res => {\n      setPostsMap([]);\n      setMorePosts(res.postsleft.postsLeft);\n      // updatePostsMap(Object.values(res.posts))\n    });\n  }, [type]);\n  const posts = useSelector(state => state.posts);\n\n  //will trigger a dispatch for more data when\n  // pagenumber changes\n  useEffect(() => {\n    setError(false);\n    // dispatch(postActions.clearPosts());\n    console.log(pageNumber);\n    dispatch(postActions.fetchPosts(pageNumber, type, userid)).then(res => {\n      setMorePosts(res.postsleft.postsLeft);\n      console.log(res.posts);\n      // updatePostsMap(Object.values(res.posts))\n    });\n  }, [pageNumber]);\n  useEffect(() => {\n    // console.log('triggered');\n    setLoading(true);\n    setPostsMap(state => {\n      const stateCopy = [...state];\n      Object.values(posts).forEach(post => {\n        //update info for each post \n        const postIndex = stateCopy.findIndex(origPost => origPost.id === post.id);\n        if (postIndex !== -1) {\n          stateCopy[postIndex] = {\n            ...post\n          };\n        }\n      });\n      const existingPostIds = state.map(post => post.id);\n      const newPosts = Object.values(posts).filter(post => !existingPostIds.includes(post.id));\n      const newState = [];\n      [...stateCopy, ...newPosts].forEach(post => {\n        newState.push(post);\n      });\n      return newState;\n    });\n    // console.log(postsMap);\n    setLoading(false);\n  }, [posts]);\n  const updatePostsMap = newPosts => {\n    setLoading(true);\n    setPostsMap(prevPostsMap => {\n      const updatedPostsMap = [...prevPostsMap];\n\n      // Update existing posts with new data\n      newPosts.forEach(post => {\n        const postIndex = updatedPostsMap.findIndex(origPost => origPost.id === post.id);\n        if (postIndex !== -1) {\n          updatedPostsMap[postIndex] = {\n            ...post\n          };\n        }\n      });\n\n      // Add new posts to the end of the list\n      const existingPostIds = updatedPostsMap.map(post => post.id);\n      const filteredNewPosts = newPosts.filter(post => !existingPostIds.includes(post.id));\n      updatedPostsMap.push(...filteredNewPosts);\n      return updatedPostsMap;\n    });\n    setLoading(false);\n  };\n  const postsToShow = Object.values(posts);\n\n  // if (sessionUser) return <Redirect to=\"/\" />;\n  //all Today dashboard will be in here\n  //select posts that were reblogged by \n  //todayonmumblr\n  // in seeding, need to have posts reblogged by todayonmumblr\n  if (!posts) {\n    console.log('loading');\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [type === 'likes' && loading && postsMap.length == 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"noposts-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Empty :(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Follow some Users to populate For You page!!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa-solid fa-otter fa-bounce\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), type === 'userposts' && loading && postsMap.length == 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nouserposts-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Empty :(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"A Blog Post will fix that!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-post-button\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/new\",\n          className: \"empty-post-link\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-sharp fa-solid fa-pencil animation-pencil\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), postsMap.map((post, index) => {\n      if (postsMap.length === index + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: lastPostElementRef,\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 21\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this);\n      }\n    }), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-load-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-load-body\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-spinner fa-spin userload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(UserDashboard, \"awE10TmIhot57SEkh9YmkuySJDs=\", false, function () {\n  return [useParams, useSelector, useDispatch, useSelector];\n});\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useRef","useCallback","useDispatch","useSelector","Redirect","useParams","Link","postActions","jsxDEV","_jsxDEV","Fragment","_Fragment","UserDashboard","_ref","_s","pgnumber","type","userid","sessionUser","state","session","user","dispatch","postsMap","setPostsMap","pageNumber","setPageNumber","loading","setLoading","initalLoad","setInitialLoad","hasMore","setHasMore","error","setError","morePosts","setMorePosts","observer","lastPostElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","clearPosts","fetchPosts","then","res","postsleft","postsLeft","posts","console","log","stateCopy","Object","values","forEach","post","postIndex","findIndex","origPost","id","existingPostIds","map","newPosts","filter","includes","newState","push","updatePostsMap","prevPostsMap","updatedPostsMap","filteredNewPosts","postsToShow","children","length","className","fileName","_jsxFileName","lineNumber","columnNumber","to","index","ref","profile","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserDashBoard.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect,useParams,Link} from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\n//instead of using fetchPosts, will use User posts with Params\n\nconst UserDashboard = ({pgnumber, type}) =>{\n    const {userid} = useParams();\n    //params will contain id\n    \n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    const [postsMap,setPostsMap] = useState([]);\n    const [pageNumber,setPageNumber]=useState(pgnumber);\n    const [loading,setLoading] = useState(true);\n    const [initalLoad,setInitialLoad]=useState(false)\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState(false);\n    const [morePosts,setMorePosts]=useState(true);\n    const observer = useRef();\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return ;\n        if(observer.current) observer.current.disconnect();\n        if(!morePosts) return;\n        \n        observer.current = new IntersectionObserver(entries =>{\n            if (entries[0].isIntersecting && morePosts) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.observe(node);\n    },[loading,morePosts]);\n    useEffect(()=>{\n        setPostsMap([]);\n        setPageNumber(1);\n        dispatch(postActions.clearPosts())\n        dispatch(postActions.fetchPosts(pageNumber,type,userid))\n            .then(res=>{\n                setPostsMap([]);\n\n                setMorePosts(res.postsleft.postsLeft);\n                // updatePostsMap(Object.values(res.posts))\n\n            })\n    },[type])\n   \n    const posts = useSelector(state=>state.posts);\n\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setError(false);\n        // dispatch(postActions.clearPosts());\n        console.log(pageNumber)\n        dispatch(postActions.fetchPosts(pageNumber,type,userid))\n            .then((res) =>{\n                setMorePosts(res.postsleft.postsLeft);\n                console.log(res.posts);\n                // updatePostsMap(Object.values(res.posts))\n            })\n    },[pageNumber]);\n    useEffect(()=>{\n        // console.log('triggered');\n        setLoading(true);\n        setPostsMap(state=>{\n            const stateCopy=[...state];\n            Object.values(posts).forEach ((post)=>{\n                //update info for each post \n                const postIndex = stateCopy.findIndex((origPost)=>origPost.id===post.id)\n                if (postIndex!==-1){\n                    stateCopy[postIndex]={...post};\n                }\n            })\n            const existingPostIds = state.map((post)=>post.id);\n            const newPosts = Object.values(posts).filter(\n                (post)=> !existingPostIds.includes(post.id)\n            )\n            const newState=[];\n            [...stateCopy,...newPosts].forEach((post)=>{\n                newState.push(post);\n            })\n            return newState;\n        })\n        // console.log(postsMap);\n        setLoading(false);\n    },[posts])\n\n    const updatePostsMap = (newPosts) =>{\n        setLoading(true);\n        setPostsMap((prevPostsMap) => {\n            const updatedPostsMap = [...prevPostsMap];\n      \n            // Update existing posts with new data\n            newPosts.forEach((post) => {\n              const postIndex = updatedPostsMap.findIndex((origPost) => origPost.id === post.id);\n              if (postIndex !== -1) {\n                updatedPostsMap[postIndex] = { ...post };\n              }\n            });\n      \n            // Add new posts to the end of the list\n            const existingPostIds = updatedPostsMap.map((post) => post.id);\n            const filteredNewPosts = newPosts.filter((post) => !existingPostIds.includes(post.id));\n            updatedPostsMap.push(...filteredNewPosts);\n      \n            return updatedPostsMap;\n          });\n      \n          setLoading(false);\n        \n    }\n    const postsToShow=Object.values(posts);\n    \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    if (!posts){\n        console.log('loading')\n    }\n    return (\n        <>\n        {type==='likes' && loading && postsMap.length==0 &&\n            <div className='noposts-message'>\n                <h2>Empty :(</h2>\n                <h2>Follow some Users to populate For You page!!!</h2>\n                <i className=\"fa-solid fa-otter fa-bounce\"></i>\n            </div>\n        }\n        {type==='userposts' && loading && postsMap.length==0 &&\n            <div className='nouserposts-message'>\n                <h2>Empty :(</h2>\n                <h2>A Blog Post will fix that!</h2>\n                <div className='empty-post-button'>\n                    <Link to='/new' className='empty-post-link'>\n                        <i className=\"fa-sharp fa-solid fa-pencil animation-pencil\" ></i>\n                    </Link>\n                </div>\n            </div>\n        }\n\n        {postsMap.map ((post,index)=>{\n            if (postsMap.length === index +1 ) {\n                return (\n                    <div ref={lastPostElementRef} key={post.id} className='postMain'>\n                    <ShowPost  post={post} profile={true}/>\n                    </div>)\n            } else {\n                return( \n                    <div className='postMain' key={post.id}>\n                        <ShowPost  post={post} profile={true}/>\n                    </div>\n                )\n            }\n        })}\n        {loading &&  \n            <div className='post-load-container'>\n                <div className='post-load-body'>\n                    <i className=\"fa-solid fa-spinner fa-spin userload\"></i>\n                </div>\n            </div>}\n        </>\n    );\n\n\n\n\n}\n\nexport default UserDashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}