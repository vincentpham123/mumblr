{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js\",\n  _s = $RefreshSig$();\n//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\nimport './newpostinputs.css';\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewPostInput = _ref => {\n  _s();\n  let {\n    handleKeyDown,\n    index\n  } = _ref;\n  const [type, setType] = useState('text');\n  const [showInputMenu,, setInputMenu] = useState(false);\n  const [photoIndex, setPhotoIndex] = useState(0);\n  const [textIcon, setTextIcon] = useState('');\n  const [photoIcon, setPhotoIcon] = useState('');\n  const [videoIcon, setVideoIcon] = useState('');\n\n  // need to pass in 4 onchange functions for each \n  const pRef = useRef(null);\n  //this is for setting the menu to true, if the p tag is focused and not empty \n  const handleFocus = () => {\n    setInputMenu(true);\n  };\n  const PhotoButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"photo-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"photo-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  };\n  // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n  //should i use a useRef that will track the innerText\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputBody\",\n        children: [type === 'text' && /*#__PURE__*/_jsxDEV(\"p\", {\n          ref: pRef,\n          \"data-type\": index,\n          onKeyDown: event => handleKeyDown(event),\n          id: `paragraph-${index}`,\n          className: \"contentEdit text-paragraph\",\n          contentEditable: \"true\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 41\n        }, this), type === 'photo' && /*#__PURE__*/_jsxDEV(PhotoButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputmenucontainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputmenubody\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inputmenucontent\",\n            children: [type !== 'text' && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('text'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fa-solid fa-a fa-lg inputicons`,\n                style: {\n                  backgroundColor: 'transparent',\n                  color: 'RGB(var(--blue))'\n                },\n                onMouseEnter: () => set\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 49\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('photo'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fa-solid fa-image fa-lg inputicons`,\n                style: {\n                  backgroundColor: 'transparent',\n                  color: 'RGB(var(--red))'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('link'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fa-solid fa-link fa-lg inputicons`,\n                style: {\n                  backgroundColor: 'transparent',\n                  color: 'RGB(var(--green))'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('link'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fa-solid fa-video fa-lg inputicons`,\n                style: {\n                  backgroundColor: 'transparent',\n                  color: 'RGB(var(--purple))'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(NewPostInput, \"6jf4AQvNkeCBdEsQsLo/Oxg5Df8=\");\n_c = NewPostInput;\nexport default NewPostInput;\nvar _c;\n$RefreshReg$(_c, \"NewPostInput\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","NewPostInput","_ref","_s","handleKeyDown","index","type","setType","showInputMenu","setInputMenu","photoIndex","setPhotoIndex","textIcon","setTextIcon","photoIcon","setPhotoIcon","videoIcon","setVideoIcon","pRef","handleFocus","PhotoButton","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onKeyDown","event","id","contentEditable","onClick","style","backgroundColor","color","onMouseEnter","set","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js"],"sourcesContent":["//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\nimport './newpostinputs.css';\nimport { useState, useRef } from \"react\";\nconst NewPostInput = ({ handleKeyDown, index }) => {\n    const [type, setType] = useState('text');\n    const [showInputMenu, , setInputMenu] = useState(false);\n    const [photoIndex,setPhotoIndex] = useState(0);\n    const [textIcon,setTextIcon] = useState('');\n    const [photoIcon,setPhotoIcon] = useState('');\n    const [videoIcon,setVideoIcon] = useState('');\n\n    // need to pass in 4 onchange functions for each \n    const pRef = useRef(null);\n    //this is for setting the menu to true, if the p tag is focused and not empty \n    const handleFocus = () => {\n        setInputMenu(true);\n    }\n    \n    const PhotoButton = () => {\n        return (\n\n            <div className='photo-input-container'>\n                <input type='file' className='photo-input'></input>\n            </div>\n\n        )\n    }\n    // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n    //should i use a useRef that will track the innerText\n    return (\n        <>\n            <div className='input-container'>\n                <div className='inputBody'>\n                    {type === 'text' && <p ref={pRef} key={index} data-type={index} onKeyDown={(event) => handleKeyDown(event)} id={`paragraph-${index}`} className='contentEdit text-paragraph' contentEditable='true'></p>}\n                    {type === 'photo' && <PhotoButton />}\n                </div>\n                <div className='inputmenucontainer'>\n                    <div className='inputmenubody'>\n                        <div className='inputmenucontent'>\n                            {type !== 'text' && <button className='inputbuttons' onClick={() => setType('text')}>\n                                <i className={`fa-solid fa-a fa-lg inputicons`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--blue))' }}\n                                onMouseEnter={()=>set}></i>\n                            </button>}\n                            <button className='inputbuttons' onClick={() => setType('photo')}>\n                                <i className={`fa-solid fa-image fa-lg inputicons`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--red))' }}></i>\n                            </button>\n                            <button className='inputbuttons' onClick={() => setType('link')}>\n                                <i className= {`fa-solid fa-link fa-lg inputicons`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--green))' }}></i>\n                            </button>\n                            <button className='inputbuttons' onClick={() => setType('link')}>\n                                <i className={`fa-solid fa-video fa-lg inputicons`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--purple))' }}></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n\n}\n\nexport default NewPostInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}