{"ast":null,"code":"// constants\nimport csrfFetch from \"./csrf\";\nimport { receivePosts } from \"./posts\";\nconst RECEIVE_LIKES = 'api/RECEIVELIKES';\nconst DELETE_LIKE = 'api/RECEIVELIKES';\nconst RECEIVE_LIKE = 'api/RECEIVELIKE';\n\n// actions \n\nexport const receiveLikes = likes => ({\n  // will be called when fetching posts\n  // will update likes to be contain the likes for the posts in the state\n\n  type: RECEIVE_LIKES,\n  likes\n});\nexport const receiveLike = like => ({\n  type: RECEIVE_LIKE,\n  like\n});\nexport const deleteLike = likeid => ({\n  // only remove the like if sessionUser id matches the like id\n  // can handle that in the frontend\n  // \n  type: DELETE_LIKE,\n  likeid\n});\n//getter\nexport const postLikes = postid => state => {\n  return state !== null && state !== void 0 && state.likes ? Object.values(state.likes).filter(like => like.postId === postid) : null;\n};\n//thunk actions \n//will need a createlike and deletelike thunk action\n// no need for thunk action to receive likes\n// can receive likes from post fetches since likes will be associated with the likes from that post \nexport const fetchUserLikes = () => async dispatch => {\n  let response = await fetch('/api/likes');\n\n  // will fetch all likes for a user, payload will include the posts as well\n  // wil need to call dispatch(receivePosts(payload.posts))\n\n  if (response.ok) {\n    let data = response.json();\n    dispatch(receivePosts(data.posts));\n    dispatch(receiveLikes(data.likes));\n    return data;\n  }\n};\nexport const removeLike = likeid => async dispatch => {\n  let response = await csrfFetch(`/api/likes/${likeid}`, {\n    method: 'DELETE'\n  });\n  if (response.ok) {\n    //return likes with deleted user like\n    dispatch(deleteLike(likeid));\n    return response;\n  }\n};\nexport const createLike = like => async dispatch => {\n  let response = await csrfFetch('/api/likes', {\n    body: JSON.stringify(like),\n    method: \"POST\"\n  });\n  if (response.ok) {\n    let data = await response.json();\n    dispatch(receiveLike(data));\n    return data.id;\n  }\n\n  //fetch like creation\n\n  // if response is ok, \n  //update the state to include the new like \n};\n\nconst likesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...state\n  };\n  switch (action.type) {\n    case RECEIVE_LIKES:\n      //will receive likes for posts currently in state\n      return {\n        ...newState,\n        ...action.likes\n      };\n    case DELETE_LIKE:\n      delete newState[action.likeid];\n      return newState;\n    case RECEIVE_LIKE:\n      newState[action.like.id] = action.like;\n      return newState;\n    default:\n      return newState;\n  }\n};\nexport default likesReducer;","map":{"version":3,"names":["csrfFetch","receivePosts","RECEIVE_LIKES","DELETE_LIKE","RECEIVE_LIKE","receiveLikes","likes","type","receiveLike","like","deleteLike","likeid","postLikes","postid","state","Object","values","filter","postId","fetchUserLikes","dispatch","response","fetch","ok","data","json","posts","removeLike","method","createLike","body","JSON","stringify","id","likesReducer","arguments","length","undefined","action","newState"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/store/likes.js"],"sourcesContent":["// constants\nimport csrfFetch from \"./csrf\"\nimport { receivePosts } from \"./posts\"\nconst RECEIVE_LIKES = 'api/RECEIVELIKES'\nconst DELETE_LIKE = 'api/RECEIVELIKES'\nconst RECEIVE_LIKE = 'api/RECEIVELIKE'\n\n// actions \n\nexport const receiveLikes = (likes) =>({\n    // will be called when fetching posts\n    // will update likes to be contain the likes for the posts in the state\n\n    type: RECEIVE_LIKES,\n    likes\n})\nexport const receiveLike = (like) => ({\n    type: RECEIVE_LIKE,\n    like\n})\nexport const deleteLike = (likeid) => ({\n    // only remove the like if sessionUser id matches the like id\n    // can handle that in the frontend\n    // \n    type: DELETE_LIKE,\n    likeid\n})\n//getter\nexport const postLikes = (postid) => (state) => {\n    return state?.likes ? Object.values(state.likes).filter((like)=>like.postId ===postid) : null;\n    \n}\n//thunk actions \n//will need a createlike and deletelike thunk action\n// no need for thunk action to receive likes\n// can receive likes from post fetches since likes will be associated with the likes from that post \nexport const fetchUserLikes = () => async dispatch => {\n    let response = await fetch('/api/likes')\n    \n    // will fetch all likes for a user, payload will include the posts as well\n    // wil need to call dispatch(receivePosts(payload.posts))\n\n    if (response.ok){\n        let data = response.json();\n        dispatch(receivePosts(data.posts))\n        dispatch(receiveLikes(data.likes))\n        return data\n    }\n}\nexport const removeLike = (likeid) => async dispatch => {\n    let response = await csrfFetch(`/api/likes/${likeid}`,\n    {method:'DELETE'})\n    if (response.ok){\n        //return likes with deleted user like\n        dispatch(deleteLike(likeid))\n        return response;\n    }\n}\nexport const createLike = (like) => async dispatch => {\n    let response = await csrfFetch('/api/likes',{\n    body: JSON.stringify(like),\n    method: \"POST\"\n        });\n    if (response.ok){\n        let data = await response.json();\n        dispatch(receiveLike(data));\n        return data.id\n    }\n\n    //fetch like creation\n\n    // if response is ok, \n    //update the state to include the new like \n\n}\n\nconst likesReducer = (state={},action) =>{\n    const newState = {...state};\n\n    switch (action.type) {\n        case RECEIVE_LIKES:\n            //will receive likes for posts currently in state\n            return {...newState,...action.likes}\n            \n        case DELETE_LIKE:\n            delete newState[action.likeid]\n            return newState;\n        case RECEIVE_LIKE:\n            newState[action.like.id] = action.like;\n            return newState\n        default:\n            return newState;\n    }\n}\n\nexport default likesReducer;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}