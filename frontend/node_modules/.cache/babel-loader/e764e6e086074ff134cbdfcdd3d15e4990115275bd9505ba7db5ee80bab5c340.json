{"ast":null,"code":"import csrfFetch, { storeCSRFToken } from \"./csrf\";\n\n// consts \n\nconst RECEIVE_POST = \"api/RECEIVE_POST\";\nconst RECEIVE_POSTS = \"api/RECEIVE_POSTS\";\nconst REMOVE_POST = 'api/UPDATE_POST';\n\n// action types\n\nconst receivePost = post => ({\n  type: RECEIVE_POST,\n  post\n});\nconst receivePosts = posts => ({\n  type: RECEIVE_POSTS,\n  posts\n});\nconst deletePost = postId => ({\n  type: REMOVE_POST,\n  postId\n});\n\n// thunk actions\n\nconst fetchPosts = () => async dispatch => {\n  let response = await fetch('/api/posts');\n  const posts = await response.json();\n  dispatch(receivePosts(posts));\n  return posts;\n};\nexport const fetchPost = postId => async dispatch => {\n  let response = await fetch(`/api/posts/${postId}`);\n  const post = await post.json();\n  dispatch(receivePost(post));\n  return post;\n};\nexport const createPost = post => async dispatch => {\n  const {\n    title,\n    body,\n    author_id\n  } = post;\n  const newPost = await csrfFetch('/api/posts', {\n    method: 'POST',\n    body: JSON.stringify({\n      title,\n      body,\n      author_id\n    })\n  });\n  const data = await newPost.json();\n  dispatch(receivePost(data));\n  return data;\n};\nexport const updatePost = post => async dispatch => {\n  const {\n    title,\n    body,\n    author_id\n  } = post;\n  const newPost = await csrfFetch('/api/posts', {\n    method: 'PATCH',\n    body: JSON.stringify({\n      title,\n      body,\n      author_id\n    })\n  });\n  const data = await newPost.json();\n  dispatch(receivePost(data));\n  return data;\n};\nexport const removePost = postId => async dispatch => {\n  const post = await csrfFetch(`/api/posts/${postId}`);\n  dispatch(removePost(postId));\n};\n\n// posts reducer\n\nconst postsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...state\n  };\n  switch (action.type) {\n    case RECEIVE_POST:\n      newState[action.post.id];\n      break;\n    default:\n      break;\n  }\n};","map":{"version":3,"names":["csrfFetch","storeCSRFToken","RECEIVE_POST","RECEIVE_POSTS","REMOVE_POST","receivePost","post","type","receivePosts","posts","deletePost","postId","fetchPosts","dispatch","response","fetch","json","fetchPost","createPost","title","body","author_id","newPost","method","JSON","stringify","data","updatePost","removePost","postsReducer","state","arguments","length","undefined","action","newState","id"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/store/posts.js"],"sourcesContent":["import csrfFetch, { storeCSRFToken } from \"./csrf\";\n\n// consts \n\nconst RECEIVE_POST = \"api/RECEIVE_POST\";\nconst RECEIVE_POSTS = \"api/RECEIVE_POSTS\";\nconst REMOVE_POST = 'api/UPDATE_POST';\n\n// action types\n\n\nconst receivePost = (post) => ({\n    type: RECEIVE_POST,\n    post \n})\n\nconst receivePosts = (posts) => ({\n    type: RECEIVE_POSTS,\n    posts\n})\n\nconst deletePost = (postId) =>({\n    type: REMOVE_POST,\n    postId\n})\n\n\n// thunk actions\n\nconst fetchPosts = () => async(dispatch) =>{\n    let response = await fetch('/api/posts');\n\n    const posts = await response.json();\n    dispatch(receivePosts(posts));\n    return posts\n}\n\nexport const fetchPost = (postId) => async(dispatch)=>{\n    let response = await fetch(`/api/posts/${postId}`);\n\n    const post = await post.json();\n    dispatch(receivePost(post));\n    return post;\n} \n\nexport const createPost = (post) => async(dispatch) =>{\n    const{title,body,author_id} = post;\n    const newPost = await csrfFetch('/api/posts',{\n        method:'POST',\n        body: JSON.stringify({title,body,author_id})\n    });\n\n    const data = await newPost.json();\n    dispatch(receivePost(data));\n    return data;\n}\n\nexport const updatePost = post=> async(dispatch) => {\n    const{title,body,author_id} = post;\n    const newPost = await csrfFetch('/api/posts',{\n        method:'PATCH',\n        body: JSON.stringify({title,body,author_id})\n    });\n\n    const data = await newPost.json();\n    dispatch(receivePost(data));\n    return data;\n}\n\nexport const removePost = postId => async dispatch =>{\n    const post = await csrfFetch(`/api/posts/${postId}`);\n    dispatch(removePost(postId))\n};\n\n// posts reducer\n\nconst postsReducer = (state={},action)=>{\n    const newState={...state};\n    switch (action.type) {\n        case RECEIVE_POST:\n            newState[action.post.id]\n            \n            break;\n    \n        default:\n            break;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}