{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/today.js\",\n  _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TodayDashboard = () => {\n  _s();\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  // pagenumber to pass to backend to pass the next batch of data\n  // \n  const [pageNumber, setPageNumber] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(false);\n  const [error, setError] = useState(false);\n  const [morePosts, setMorePosts] = useState(true);\n  const observer = useRef();\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      console.log(entries);\n      if (entries[0].isIntersecting) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading]);\n  useEffect(() => {\n    dispatch(postActions.clearPosts());\n    dispatch(postActions.fetchPosts(pageNumber)).then(res => {\n      setMorePosts(res.posts_left);\n    });\n  }, [dispatch]);\n  const posts = useSelector(state => state.posts);\n\n  //will trigger a dispatch for more data when\n  // pagenumber changes\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    dispatch(postActions.fetchPosts(pageNumber)).then(() => {\n      setLoading(false);\n    });\n  }, [pageNumber]);\n  useEffect(() => {\n    console.log(pageNumber);\n  }, [pageNumber]);\n  const postsToShow = Object.values(posts);\n\n  // if (sessionUser) return <Redirect to=\"/\" />;\n  //all Today dashboard will be in here\n  //select posts that were reblogged by \n  //todayonmumblr\n  // in seeding, need to have posts reblogged by todayonmumblr\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: postsToShow.map((post, index) => {\n      if (postsToShow.length === index + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: lastPostElementRef,\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this);\n      }\n    })\n  }, void 0, false);\n};\n_s(TodayDashboard, \"AL75FqTz35DP3H1glLmPDsQ/MP0=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n_c = TodayDashboard;\nexport default TodayDashboard;\nvar _c;\n$RefreshReg$(_c, \"TodayDashboard\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useRef","useCallback","useDispatch","useSelector","Redirect","postActions","jsxDEV","_jsxDEV","Fragment","_Fragment","TodayDashboard","_s","sessionUser","state","session","user","dispatch","pageNumber","setPageNumber","loading","setLoading","hasMore","setHasMore","error","setError","morePosts","setMorePosts","observer","lastPostElementRef","node","current","disconnect","IntersectionObserver","entries","console","log","isIntersecting","prevPageNumber","observe","clearPosts","fetchPosts","then","res","posts_left","posts","postsToShow","Object","values","children","map","post","index","length","ref","className","profile","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/today.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst TodayDashboard = () =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    // pagenumber to pass to backend to pass the next batch of data\n    // \n    const [pageNumber,setPageNumber]=useState(1);\n    const [loading,setLoading] = useState(true);\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState(false);\n    const [morePosts,setMorePosts]=useState(true);\n    const observer = useRef();\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return \n        if(observer.current) observer.current.disconnect();\n        \n        observer.current = new IntersectionObserver(entries =>{\n            console.log(entries);\n            if (entries[0].isIntersecting) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.observe(node);\n    },[loading]);\n    useEffect(()=>{\n        dispatch(postActions.clearPosts());\n        dispatch(postActions.fetchPosts(pageNumber))\n            .then(res=>{\n                setMorePosts(res.posts_left);\n            })\n    },[dispatch])\n    const posts = useSelector(state=>state.posts);\n\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setLoading(true);\n        setError(false);\n        dispatch(postActions.fetchPosts(pageNumber))\n            .then( () =>{\n                setLoading(false);\n            })\n\n    },[pageNumber]);\n    useEffect(()=>{\n        console.log(pageNumber)\n    },[pageNumber]);\n    const postsToShow=Object.values(posts);\n    \n    \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    return (\n        <>\n        {postsToShow.map ((post,index)=>{\n            if (postsToShow.length === index +1) {\n                return (\n                    <div ref={lastPostElementRef} key={post.id} className='postMain'>\n                    <ShowPost  post={post} profile={false}/>\n                    </div>)\n            } else {\n                return( \n                    <div className='postMain' key={post.id}>\n                        <ShowPost  post={post} profile={false}/>\n                    </div>\n                )\n            }\n        })}\n        </>\n    );\n\n\n\n\n}\n\nexport default TodayDashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}