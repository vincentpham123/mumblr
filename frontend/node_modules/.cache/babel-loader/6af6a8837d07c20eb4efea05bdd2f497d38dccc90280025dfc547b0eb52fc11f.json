{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js\",\n  _s = $RefreshSig$();\n//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\nimport './newpostinputs.css';\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewPostInput = _ref => {\n  _s();\n  let {\n    handleKeyDown,\n    index\n  } = _ref;\n  const [type, setType] = useState('text');\n  const [showInputMenu,, setInputMenu] = useState(false);\n  const pRef = useRef(null);\n  //this is for setting the menu to true, if the p tag is focused and not empty \n  const handleFocus = () => {\n    setInputMenu(true);\n  };\n  const photoButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"photo-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"photo-input\",\n        children: \"Uplo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 21\n    }, this);\n  };\n  // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n  //should i use a useRef that will track the innerText\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputBody\",\n        children: [type === 'text' && /*#__PURE__*/_jsxDEV(\"p\", {\n          ref: pRef,\n          \"data-type\": index,\n          onKeyDown: event => handleKeyDown(event),\n          id: `paragraph-${index}`,\n          className: \"contentEdit text-paragraph\",\n          contentEditable: \"true\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 35\n        }, this), type === 'photo' && photoButton()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputmenucontainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputmenubody\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inputmenucontent\",\n            children: [type !== 'text' && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('text'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa-solid fa-a\",\n                style: {\n                  color: 'RGB(var(--blue))'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 43\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('photo'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa-solid fa-image\",\n                style: {\n                  color: 'RGB(var(--red))'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('link'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa-solid fa-link\",\n                style: {\n                  color: 'RGB(var(--green))'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('link'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa-solid fa-video\",\n                style: {\n                  color: 'RGB(var(--purple))'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(NewPostInput, \"VR8BUSofLvdoa5pVjPlPSwF4DnY=\");\n_c = NewPostInput;\nexport default NewPostInput;\nvar _c;\n$RefreshReg$(_c, \"NewPostInput\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","NewPostInput","_ref","_s","handleKeyDown","index","type","setType","showInputMenu","setInputMenu","pRef","handleFocus","photoButton","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onKeyDown","event","id","contentEditable","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js"],"sourcesContent":["//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\nimport './newpostinputs.css';\nimport { useState, useRef } from \"react\";\nconst NewPostInput = ({handleKeyDown,index}) => {\n    const [type,setType] = useState('text');\n    const [showInputMenu,,setInputMenu] = useState(false);\n    const pRef = useRef(null);\n    //this is for setting the menu to true, if the p tag is focused and not empty \n    const handleFocus =()=>{\n        setInputMenu(true);\n    }\n\n    const photoButton = () => {\n        return(\n            \n                    <div className='photo-input-container'>\n                        <input type='file' className='photo-input'>Uplo</input>\n                    </div>\n            \n        )\n    }\n    // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n    //should i use a useRef that will track the innerText\n    return (\n        <>\n        <div className='input-container'>\n            <div className='inputBody'>\n                {type==='text' && <p  ref={pRef} key={index} data-type={index} onKeyDown={(event)=>handleKeyDown(event)} id={`paragraph-${index}`}  className='contentEdit text-paragraph' contentEditable='true'></p>}\n                {type==='photo' && photoButton()} \n            </div>\n            <div className='inputmenucontainer'>\n                <div className='inputmenubody'>\n                    <div className='inputmenucontent'>\n                        {type!=='text' && <button className='inputbuttons' onClick={()=>setType('text')}>\n                            <i className='fa-solid fa-a' style={{color:'RGB(var(--blue))'}}></i>\n                        </button>}\n                        <button className='inputbuttons' onClick={()=>setType('photo')}>\n                            <i className='fa-solid fa-image' style={{color:'RGB(var(--red))'}}></i>\n                        </button>\n                        <button className='inputbuttons' onClick={()=>setType('link')}>\n                            <i className='fa-solid fa-link' style={{color:'RGB(var(--green))'}}></i>\n                        </button>\n                        <button className='inputbuttons' onClick={()=>setType('link')}>\n                            <i className='fa-solid fa-video' style={{color:'RGB(var(--purple))'}}></i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        </>\n        )\n\n}\n\nexport default NewPostInput;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,qBAAqB;AAC5B,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACzC,MAAMC,YAAY,GAAGC,IAAA,IAA2B;EAAAC,EAAA;EAAA,IAA1B;IAACC,aAAa;IAACC;EAAK,CAAC,GAAAH,IAAA;EACvC,MAAM,CAACI,IAAI,EAACC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,MAAM,CAAC;EACvC,MAAM,CAACa,aAAa,GAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMe,IAAI,GAAGd,MAAM,CAAC,IAAI,CAAC;EACzB;EACA,MAAMe,WAAW,GAAEA,CAAA,KAAI;IACnBF,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACtB,oBAEYd,OAAA;MAAKe,SAAS,EAAC,uBAAuB;MAAAC,QAAA,eAClChB,OAAA;QAAOQ,IAAI,EAAC,MAAM;QAACO,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC;EAGtB,CAAC;EACD;EACA;EACA,oBACIpB,OAAA,CAAAE,SAAA;IAAAc,QAAA,eACAhB,OAAA;MAAKe,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5BhB,OAAA;QAAKe,SAAS,EAAC,WAAW;QAAAC,QAAA,GACrBR,IAAI,KAAG,MAAM,iBAAIR,OAAA;UAAIqB,GAAG,EAAET,IAAK;UAAa,aAAWL,KAAM;UAACe,SAAS,EAAGC,KAAK,IAAGjB,aAAa,CAACiB,KAAK,CAAE;UAACC,EAAE,EAAG,aAAYjB,KAAM,EAAE;UAAEQ,SAAS,EAAC,4BAA4B;UAACU,eAAe,EAAC;QAAM,GAA3JlB,KAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA0J,CAAC,EACrMZ,IAAI,KAAG,OAAO,IAAIM,WAAW,CAAC,CAAC;MAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,eACNpB,OAAA;QAAKe,SAAS,EAAC,oBAAoB;QAAAC,QAAA,eAC/BhB,OAAA;UAAKe,SAAS,EAAC,eAAe;UAAAC,QAAA,eAC1BhB,OAAA;YAAKe,SAAS,EAAC,kBAAkB;YAAAC,QAAA,GAC5BR,IAAI,KAAG,MAAM,iBAAIR,OAAA;cAAQe,SAAS,EAAC,cAAc;cAACW,OAAO,EAAEA,CAAA,KAAIjB,OAAO,CAAC,MAAM,CAAE;cAAAO,QAAA,eAC5EhB,OAAA;gBAAGe,SAAS,EAAC,eAAe;gBAACY,KAAK,EAAE;kBAACC,KAAK,EAAC;gBAAkB;cAAE;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChE,CAAC,eACTpB,OAAA;cAAQe,SAAS,EAAC,cAAc;cAACW,OAAO,EAAEA,CAAA,KAAIjB,OAAO,CAAC,OAAO,CAAE;cAAAO,QAAA,eAC3DhB,OAAA;gBAAGe,SAAS,EAAC,mBAAmB;gBAACY,KAAK,EAAE;kBAACC,KAAK,EAAC;gBAAiB;cAAE;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnE,CAAC,eACTpB,OAAA;cAAQe,SAAS,EAAC,cAAc;cAACW,OAAO,EAAEA,CAAA,KAAIjB,OAAO,CAAC,MAAM,CAAE;cAAAO,QAAA,eAC1DhB,OAAA;gBAAGe,SAAS,EAAC,kBAAkB;gBAACY,KAAK,EAAE;kBAACC,KAAK,EAAC;gBAAmB;cAAE;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpE,CAAC,eACTpB,OAAA;cAAQe,SAAS,EAAC,cAAc;cAACW,OAAO,EAAEA,CAAA,KAAIjB,OAAO,CAAC,MAAM,CAAE;cAAAO,QAAA,eAC1DhB,OAAA;gBAAGe,SAAS,EAAC,mBAAmB;gBAACY,KAAK,EAAE;kBAACC,KAAK,EAAC;gBAAoB;cAAE;gBAAAX,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,gBACJ,CAAC;AAGX,CAAC;AAAAf,EAAA,CAjDKF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAmDlB,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}