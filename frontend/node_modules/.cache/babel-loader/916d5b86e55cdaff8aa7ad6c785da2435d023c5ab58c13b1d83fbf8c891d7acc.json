{"ast":null,"code":"// const csrfFetch = async(url, options={}) => {\n//     options.method = options.method || 'GET';\n//     options.headers = options.headers || {};\n\n//     if (options.method.toUpperCase()!=='GET'){\n//        if (!options.headers['Content-Type'] && !(options.body instanceof FormData)){ \n//         options.headers['Content-Type'] || 'application/json';\n//        }\n//         options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n//     }\n\n//     // initial fetch \n//     const res = await fetch(url, options);\n\n//     if (res.status>=400) throw res; \n//     // returns promise for the action\n\n//     return res;\n// }\nexport const storeCSRFToken = response => {\n  const csrfToken = response.headers.get('X-CSRF-Token');\n  if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\", csrfToken);\n};\nexport const restoreCSRF = async () => {\n  const res = await csrfFetch('/api/session');\n  storeCSRFToken(res);\n  return res;\n};\nexport default csrfFetch;","map":{"version":3,"names":["storeCSRFToken","response","csrfToken","headers","get","sessionStorage","setItem","restoreCSRF","res","csrfFetch"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/store/csrf.js"],"sourcesContent":["\n// const csrfFetch = async(url, options={}) => {\n//     options.method = options.method || 'GET';\n//     options.headers = options.headers || {};\n\n//     if (options.method.toUpperCase()!=='GET'){\n//        if (!options.headers['Content-Type'] && !(options.body instanceof FormData)){ \n//         options.headers['Content-Type'] || 'application/json';\n//        }\n//         options.headers['X-CSRF-Token'] = sessionStorage.getItem('X-CSRF-Token');\n//     }\n\n//     // initial fetch \n//     const res = await fetch(url, options);\n\n//     if (res.status>=400) throw res; \n//     // returns promise for the action\n\n//     return res;\n// }\nexport const storeCSRFToken = (response) => {\n    const csrfToken = response.headers.get('X-CSRF-Token');\n    if (csrfToken) sessionStorage.setItem(\"X-CSRF-Token\",csrfToken);\n}\nexport const restoreCSRF = async()=>{\n    const res = await csrfFetch('/api/session')\n    storeCSRFToken(res);\n    return res;\n}\n\nexport default csrfFetch;\n"],"mappings":"AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO,MAAMA,cAAc,GAAIC,QAAQ,IAAK;EACxC,MAAMC,SAAS,GAAGD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EACtD,IAAIF,SAAS,EAAEG,cAAc,CAACC,OAAO,CAAC,cAAc,EAACJ,SAAS,CAAC;AACnE,CAAC;AACD,OAAO,MAAMK,WAAW,GAAG,MAAAA,CAAA,KAAS;EAChC,MAAMC,GAAG,GAAG,MAAMC,SAAS,CAAC,cAAc,CAAC;EAC3CT,cAAc,CAACQ,GAAG,CAAC;EACnB,OAAOA,GAAG;AACd,CAAC;AAED,eAAeC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}