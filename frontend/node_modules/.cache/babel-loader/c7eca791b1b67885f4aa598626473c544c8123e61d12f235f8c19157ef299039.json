{"ast":null,"code":"var _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst DashboardPartial = _ref => {\n  _s();\n  let {\n    type\n  } = _ref;\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  const [postsMap, setPostsMap] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [loading, setLoading] = useState('test');\n  const [hasMore, setHasMore] = useState(false);\n  const [error, setError] = useState(false);\n  const [morePosts, setMorePosts] = useState(true);\n  const observer = useRef();\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    if (!morePosts) return;\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && morePosts) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, morePosts]);\n  useEffect(() => {\n    setPostsMap([]);\n    dispatch(postActions.clearPosts());\n    dispatch(postActions.fetchPosts(pageNumber, type)).then(res => {\n      setPostsMap([]);\n      setMorePosts(res.postsleft.postsLeft);\n    });\n  }, [type]);\n  const posts = useSelector(state => state.posts);\n\n  //will trigger a dispatch for more data when\n  // pagenumber changes\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    // dispatch(postActions.clearPosts());\n    dispatch(postActions.fetchPosts(pageNumber, type)).then(res => {\n      setLoading(false);\n      setMorePosts(res.postsleft.postsLeft);\n    });\n  }, [pageNumber]);\n  useEffect(() => {\n    setLoading(true);\n    setPostsMap(state => {\n      const existingPostIds = state.map(post => post.id);\n      const newPosts = Object.values(posts).filter(post => !existingPostIds.includes(post.id));\n      const newState = [];\n      [...state, ...newPosts].forEach(post => {\n        newState.push(post);\n      });\n      return newState;\n    });\n  }, [posts]);\n  const postsToShow = Object.values(posts);\n\n  // if (sessionUser) return <Redirect to=\"/\" />;\n  //all Today dashboard will be in here\n  //select posts that were reblogged by \n  //todayonmumblr\n  // in seeding, need to have posts reblogged by todayonmumblr\n  if (!posts) {\n    console.log('loading');\n  }\n\n  // return (\n  //     <>\n  //     {posts==='test' && <div><h1>Loading</h1></div> }\n  //     {postsMap.map ((post,index)=>{\n  //         if (postsMap.length === index +1 ) {\n  //             return (\n  //                 <div ref={lastPostElementRef} key={post.id} className='postMain'>\n  //                 <ShowPost  post={post} profile={false}/>\n  //                 </div>)\n  //         } else {\n  //             return( \n  //                 <div className='postMain' key={post.id}>\n  //                     <ShowPost  post={post} profile={false}/>\n  //                 </div>\n  //             )\n  //         }\n  //     })}\n  //     {loading && \n  //         <div className='post-load-container'>\n  //             <div className='post-load-body'>\n  //                 <i className=\"fa-solid fa-spinner fa-spin\"></i>\n  //             </div>\n  //         </div>}\n  //     </>\n  // );\n};\n_s(DashboardPartial, \"1PWWNEkgXxeaVd1h2NXnalAPGOY=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n_c = DashboardPartial;\nexport default DashboardPartial;\nvar _c;\n$RefreshReg$(_c, \"DashboardPartial\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useRef","useCallback","useDispatch","useSelector","Redirect","useParams","postActions","DashboardPartial","_ref","_s","type","sessionUser","state","session","user","dispatch","postsMap","setPostsMap","pageNumber","setPageNumber","loading","setLoading","hasMore","setHasMore","error","setError","morePosts","setMorePosts","observer","lastPostElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","clearPosts","fetchPosts","then","res","postsleft","postsLeft","posts","existingPostIds","map","post","id","newPosts","Object","values","filter","includes","newState","forEach","push","postsToShow","console","log","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/DashBoardPartial.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect,useParams} from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst DashboardPartial = ({type}) =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    const [postsMap,setPostsMap] = useState([]);\n    const [pageNumber,setPageNumber]=useState(1);\n    const [loading,setLoading] = useState('test');\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState(false);\n    const [morePosts,setMorePosts]=useState(true);\n    const observer = useRef();\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return ;\n        if(observer.current) observer.current.disconnect();\n        if(!morePosts) return;\n        \n        observer.current = new IntersectionObserver(entries =>{\n            if (entries[0].isIntersecting && morePosts) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.observe(node);\n    },[loading,morePosts]);\n    useEffect(()=>{\n        setPostsMap([]);\n        dispatch(postActions.clearPosts())\n        dispatch(postActions.fetchPosts(pageNumber,type))\n            .then(res=>{\n                setPostsMap([]);\n                setMorePosts(res.postsleft.postsLeft);\n            })\n    },[type])\n   \n    const posts = useSelector(state=>state.posts);\n\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setLoading(true);\n        setError(false);\n        // dispatch(postActions.clearPosts());\n        dispatch(postActions.fetchPosts(pageNumber,type))\n            .then( (res) =>{\n                setLoading(false);\n                setMorePosts(res.postsleft.postsLeft);\n            })\n    },[pageNumber]);\n    useEffect(()=>{\n        setLoading(true);\n        setPostsMap(state=>{\n            const existingPostIds = state.map((post)=>post.id);\n            const newPosts = Object.values(posts).filter(\n                (post)=> !existingPostIds.includes(post.id)\n            )\n            const newState=[];\n            [...state,...newPosts].forEach((post)=>{\n                newState.push(post);\n            })\n            return newState;\n        })\n    },[posts])\n\n\n    const postsToShow=Object.values(posts);\n    \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    if (!posts){\n        console.log('loading')\n    }\n    \n    // return (\n    //     <>\n    //     {posts==='test' && <div><h1>Loading</h1></div> }\n    //     {postsMap.map ((post,index)=>{\n    //         if (postsMap.length === index +1 ) {\n    //             return (\n    //                 <div ref={lastPostElementRef} key={post.id} className='postMain'>\n    //                 <ShowPost  post={post} profile={false}/>\n    //                 </div>)\n    //         } else {\n    //             return( \n    //                 <div className='postMain' key={post.id}>\n    //                     <ShowPost  post={post} profile={false}/>\n    //                 </div>\n    //             )\n    //         }\n    //     })}\n    //     {loading && \n    //         <div className='post-load-container'>\n    //             <div className='post-load-body'>\n    //                 <i className=\"fa-solid fa-spinner fa-spin\"></i>\n    //             </div>\n    //         </div>}\n    //     </>\n    // );\n\n\n\n\n}\n\nexport default DashboardPartial;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}