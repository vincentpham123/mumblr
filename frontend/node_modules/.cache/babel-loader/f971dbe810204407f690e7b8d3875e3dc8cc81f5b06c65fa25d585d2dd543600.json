{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/ForYou.js\",\n  _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ForYou = () => {\n  _s();\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  const params = useParams();\n  // pagenumber to pass to backend to pass the next batch of data\n  // \n  const [postsMap, setPostsMap] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(false);\n  const [error, setError] = useState(false);\n  const [morePosts, setMorePosts] = useState(true);\n  const observer = useRef();\n  useEffect(() => {\n    dispatch(postActions.clearPosts());\n    dispatch(postActions.fetchPosts(pageNumber, 'foryou')).then(res => {\n      setMorePosts(res.postsleft.postsLeft);\n    });\n  }, []);\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    if (!morePosts) return;\n    observer.current = new IntersectionObserver(entries => {\n      console.log(morePosts);\n      if (entries[0].isIntersecting && morePosts) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, morePosts]);\n  const posts = useSelector(state => state.posts);\n\n  //will trigger a dispatch for more data when\n  // pagenumber changes\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    // dispatch(postActions.clearPosts());\n    dispatch(postActions.fetchPosts(pageNumber, 'foryou')).then(res => {\n      setLoading(false);\n      setMorePosts(res.postsleft.postsLeft);\n    });\n  }, [pageNumber]);\n  useEffect(() => {\n    setPostsMap(state => {\n      const existingPostIds = state.map(post => post.id);\n      const newPosts = Object.values(posts).filter(post => !existingPostIds.includes(post.id));\n      const newState = [];\n      [...state, ...newPosts].forEach(post => {\n        newState.push(post);\n      });\n      return newState;\n    });\n  }, [posts]);\n  const postsToShow = Object.values(posts);\n\n  // if (sessionUser) return <Redirect to=\"/\" />;\n  //all Today dashboard will be in here\n  //select posts that were reblogged by \n  //todayonmumblr\n  // in seeding, need to have posts reblogged by todayonmumblr\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: postsMap.map((post, index) => {\n      if (postsMap.length === index + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: lastPostElementRef,\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this);\n      }\n    })\n  }, void 0, false);\n};\n_s(ForYou, \"qXSdfsyGYsL1m03qqiYygdHyFsw=\", false, function () {\n  return [useSelector, useDispatch, useParams, useSelector];\n});\n_c = ForYou;\nexport default ForYou;\nvar _c;\n$RefreshReg$(_c, \"ForYou\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useRef","useCallback","useDispatch","useSelector","Redirect","useParams","postActions","jsxDEV","_jsxDEV","Fragment","_Fragment","ForYou","_s","sessionUser","state","session","user","dispatch","params","postsMap","setPostsMap","pageNumber","setPageNumber","loading","setLoading","hasMore","setHasMore","error","setError","morePosts","setMorePosts","observer","clearPosts","fetchPosts","then","res","postsleft","postsLeft","lastPostElementRef","node","current","disconnect","IntersectionObserver","entries","console","log","isIntersecting","prevPageNumber","observe","posts","existingPostIds","map","post","id","newPosts","Object","values","filter","includes","newState","forEach","push","postsToShow","children","index","length","ref","className","profile","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/ForYou.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect,useParams} from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst ForYou = () =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    const params = useParams();\n    // pagenumber to pass to backend to pass the next batch of data\n    // \n    const [postsMap,setPostsMap] = useState([]);\n    const [pageNumber,setPageNumber]=useState(1);\n    const [loading,setLoading] = useState(true);\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState(false);\n    const [morePosts,setMorePosts]=useState(true);\n    const observer = useRef();\n    useEffect(()=>{\n        dispatch(postActions.clearPosts());\n        dispatch(postActions.fetchPosts(pageNumber,'foryou'))\n            .then(res=>{\n                setMorePosts(res.postsleft.postsLeft);\n            })\n    },[])\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return ;\n        if(observer.current) observer.current.disconnect();\n        if(!morePosts) return;\n        \n        observer.current = new IntersectionObserver(entries =>{\n            console.log(morePosts);\n            if (entries[0].isIntersecting && morePosts) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.observe(node);\n    },[loading,morePosts]);\n    const posts = useSelector(state=>state.posts);\n\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setLoading(true);\n        setError(false);\n        // dispatch(postActions.clearPosts());\n        dispatch(postActions.fetchPosts(pageNumber,'foryou'))\n            .then( (res) =>{\n                setLoading(false);\n                setMorePosts(res.postsleft.postsLeft);\n            })\n\n    },[pageNumber]);\n    useEffect(()=>{\n        setPostsMap(state=>{\n            const existingPostIds = state.map((post)=>post.id);\n            const newPosts = Object.values(posts).filter(\n                (post)=> !existingPostIds.includes(post.id)\n            )\n            const newState=[];\n            [...state,...newPosts].forEach((post)=>{\n                newState.push(post);\n            })\n            return newState;\n        })\n    },[posts])\n    const postsToShow=Object.values(posts);\n    \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    return (\n        <>\n        {postsMap.map ((post,index)=>{\n            if (postsMap.length === index +1 ) {\n                return (\n                    <div ref={lastPostElementRef} key={post.id} className='postMain'>\n                    <ShowPost  post={post} profile={false}/>\n                    </div>)\n            } else {\n                return( \n                    <div className='postMain' key={post.id}>\n                        <ShowPost  post={post} profile={false}/>\n                    </div>\n                )\n            }\n        })}\n        </>\n    );\n\n\n\n\n}\n\nexport default ForYou;"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,mBAAmB;AACxC,SAASC,SAAS,EAACC,QAAQ,EAACC,MAAM,EAACC,WAAW,QAAQ,OAAO;AAC7D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,EAACC,SAAS,QAAO,kBAAkB;AACpD,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACjD,MAAMC,MAAM,GAAGA,CAAA,KAAK;EAAAC,EAAA;EAChB,MAAMC,WAAW,GAAGV,WAAW,CAACW,KAAK,IAAEA,KAAK,CAACC,OAAO,CAACC,IAAI,CAAC;EAC1D,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAMgB,MAAM,GAAGb,SAAS,CAAC,CAAC;EAC1B;EACA;EACA,MAAM,CAACc,QAAQ,EAACC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACsB,UAAU,EAACC,aAAa,CAAC,GAACvB,QAAQ,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACwB,OAAO,EAACC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAC3C,MAAM,CAAC0B,OAAO,EAACC,UAAU,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC5C,MAAM,CAAC4B,KAAK,EAACC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACxC,MAAM,CAAC8B,SAAS,EAACC,YAAY,CAAC,GAAC/B,QAAQ,CAAC,IAAI,CAAC;EAC7C,MAAMgC,QAAQ,GAAG/B,MAAM,CAAC,CAAC;EACzBF,SAAS,CAAC,MAAI;IACVmB,QAAQ,CAACX,WAAW,CAAC0B,UAAU,CAAC,CAAC,CAAC;IAClCf,QAAQ,CAACX,WAAW,CAAC2B,UAAU,CAACZ,UAAU,EAAC,QAAQ,CAAC,CAAC,CAChDa,IAAI,CAACC,GAAG,IAAE;MACPL,YAAY,CAACK,GAAG,CAACC,SAAS,CAACC,SAAS,CAAC;IACzC,CAAC,CAAC;EACV,CAAC,EAAC,EAAE,CAAC;EACL,MAAMC,kBAAkB,GAAGrC,WAAW,CAACsC,IAAI,IAAE;IACzC,IAAGhB,OAAO,EAAE;IACZ,IAAGQ,QAAQ,CAACS,OAAO,EAAET,QAAQ,CAACS,OAAO,CAACC,UAAU,CAAC,CAAC;IAClD,IAAG,CAACZ,SAAS,EAAE;IAEfE,QAAQ,CAACS,OAAO,GAAG,IAAIE,oBAAoB,CAACC,OAAO,IAAG;MAClDC,OAAO,CAACC,GAAG,CAAChB,SAAS,CAAC;MACtB,IAAIc,OAAO,CAAC,CAAC,CAAC,CAACG,cAAc,IAAIjB,SAAS,EAAE;QACxCP,aAAa,CAACyB,cAAc,IAAGA,cAAc,GAAE,CAAE,CAAC;MACtD;IACJ,CAAC,CAAC;IACF,IAAIR,IAAI,EAAER,QAAQ,CAACS,OAAO,CAACQ,OAAO,CAACT,IAAI,CAAC;EAC5C,CAAC,EAAC,CAAChB,OAAO,EAACM,SAAS,CAAC,CAAC;EACtB,MAAMoB,KAAK,GAAG9C,WAAW,CAACW,KAAK,IAAEA,KAAK,CAACmC,KAAK,CAAC;;EAE7C;EACA;EACAnD,SAAS,CAAC,MAAI;IACV0B,UAAU,CAAC,IAAI,CAAC;IAChBI,QAAQ,CAAC,KAAK,CAAC;IACf;IACAX,QAAQ,CAACX,WAAW,CAAC2B,UAAU,CAACZ,UAAU,EAAC,QAAQ,CAAC,CAAC,CAChDa,IAAI,CAAGC,GAAG,IAAI;MACXX,UAAU,CAAC,KAAK,CAAC;MACjBM,YAAY,CAACK,GAAG,CAACC,SAAS,CAACC,SAAS,CAAC;IACzC,CAAC,CAAC;EAEV,CAAC,EAAC,CAAChB,UAAU,CAAC,CAAC;EACfvB,SAAS,CAAC,MAAI;IACVsB,WAAW,CAACN,KAAK,IAAE;MACf,MAAMoC,eAAe,GAAGpC,KAAK,CAACqC,GAAG,CAAEC,IAAI,IAAGA,IAAI,CAACC,EAAE,CAAC;MAClD,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACP,KAAK,CAAC,CAACQ,MAAM,CACvCL,IAAI,IAAI,CAACF,eAAe,CAACQ,QAAQ,CAACN,IAAI,CAACC,EAAE,CAC9C,CAAC;MACD,MAAMM,QAAQ,GAAC,EAAE;MACjB,CAAC,GAAG7C,KAAK,EAAC,GAAGwC,QAAQ,CAAC,CAACM,OAAO,CAAER,IAAI,IAAG;QACnCO,QAAQ,CAACE,IAAI,CAACT,IAAI,CAAC;MACvB,CAAC,CAAC;MACF,OAAOO,QAAQ;IACnB,CAAC,CAAC;EACN,CAAC,EAAC,CAACV,KAAK,CAAC,CAAC;EACV,MAAMa,WAAW,GAACP,MAAM,CAACC,MAAM,CAACP,KAAK,CAAC;;EAEtC;EACA;EACA;EACA;EACA;EACA,oBACIzC,OAAA,CAAAE,SAAA;IAAAqD,QAAA,EACC5C,QAAQ,CAACgC,GAAG,CAAE,CAACC,IAAI,EAACY,KAAK,KAAG;MACzB,IAAI7C,QAAQ,CAAC8C,MAAM,KAAKD,KAAK,GAAE,CAAC,EAAG;QAC/B,oBACIxD,OAAA;UAAK0D,GAAG,EAAE5B,kBAAmB;UAAe6B,SAAS,EAAC,UAAU;UAAAJ,QAAA,eAChEvD,OAAA,CAACX,QAAQ;YAAEuD,IAAI,EAAEA,IAAK;YAACgB,OAAO,EAAE;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAC,GADLpB,IAAI,CAACC,EAAE;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAErC,CAAC;MACd,CAAC,MAAM;QACH,oBACIhE,OAAA;UAAK2D,SAAS,EAAC,UAAU;UAAAJ,QAAA,eACrBvD,OAAA,CAACX,QAAQ;YAAEuD,IAAI,EAAEA,IAAK;YAACgB,OAAO,EAAE;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAC,GADbpB,IAAI,CAACC,EAAE;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEjC,CAAC;MAEd;IACJ,CAAC;EAAC,gBACA,CAAC;AAMX,CAAC;AAAA5D,EAAA,CA1FKD,MAAM;EAAA,QACYR,WAAW,EACdD,WAAW,EACbG,SAAS,EA8BVF,WAAW;AAAA;AAAAsE,EAAA,GAjCvB9D,MAAM;AA4FZ,eAAeA,MAAM;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}