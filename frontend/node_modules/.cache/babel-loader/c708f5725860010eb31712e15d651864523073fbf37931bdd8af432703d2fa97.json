{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js\",\n  _s = $RefreshSig$();\n//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\n\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewPostInput = _ref => {\n  _s();\n  let {\n    handleKeyDown,\n    index\n  } = _ref;\n  const [type, setType] = useState('text');\n  const [showInputMenu,, setInputMenu] = useState(false);\n  const pRef = useRef(null);\n  //this is for setting the menu to true, if the p tag is focused and not empty \n  const handleFocus = () => {\n    setInputMenu(true);\n  };\n  // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n  //should i use a useRef that will track the innerText\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputContainer\",\n        children: type === 'text' && /*#__PURE__*/_jsxDEV(\"p\", {\n          ref: pRef,\n          \"data-type\": index,\n          onKeyDown: event => handleKeyDown(event),\n          id: `paragraph-${index}`,\n          className: \"contentEdit text-paragraph\",\n          contentEditable: \"true\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"HIHI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputMenuContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputMenuBody\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inputMenuContent\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputButtons\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa-solid fa-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"HI\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(NewPostInput, \"VR8BUSofLvdoa5pVjPlPSwF4DnY=\");\n_c = NewPostInput;\nexport default NewPostInput;\nvar _c;\n$RefreshReg$(_c, \"NewPostInput\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","NewPostInput","_ref","_s","handleKeyDown","index","type","setType","showInputMenu","setInputMenu","pRef","handleFocus","children","className","ref","onKeyDown","event","id","contentEditable","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js"],"sourcesContent":["//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\n\nimport { useState, useRef } from \"react\";\nconst NewPostInput = ({handleKeyDown,index}) => {\n    const [type,setType] = useState('text');\n    const [showInputMenu,,setInputMenu] = useState(false);\n    const pRef = useRef(null);\n    //this is for setting the menu to true, if the p tag is focused and not empty \n    const handleFocus =()=>{\n        setInputMenu(true);\n    }\n    // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n    //should i use a useRef that will track the innerText\n    return (\n        <>\n        <div className=''>\n            <div className='inputContainer'>\n                {type==='text' && <p  ref={pRef} key={index} data-type={index} onKeyDown={(event)=>handleKeyDown(event)} id={`paragraph-${index}`}  className='contentEdit text-paragraph' contentEditable='true'></p>}\n            </div>\n            <h1>HIHI</h1>\n            <div className='inputMenuContainer'>\n                <div className='inputMenuBody'>\n                    <div className='inputMenuContent'>\n                        <button className='inputButtons'>\n                            <i className='fa-solid fa-image'></i>\n                        </button>\n                        <h1>HI</h1>\n                    </div>\n                </div>\n            </div>\n        </div>\n        </>\n        )\n\n}\n\nexport default NewPostInput;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACzC,MAAMC,YAAY,GAAGC,IAAA,IAA2B;EAAAC,EAAA;EAAA,IAA1B;IAACC,aAAa;IAACC;EAAK,CAAC,GAAAH,IAAA;EACvC,MAAM,CAACI,IAAI,EAACC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,MAAM,CAAC;EACvC,MAAM,CAACa,aAAa,GAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMe,IAAI,GAAGd,MAAM,CAAC,IAAI,CAAC;EACzB;EACA,MAAMe,WAAW,GAAEA,CAAA,KAAI;IACnBF,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EACD;EACA;EACA,oBACIX,OAAA,CAAAE,SAAA;IAAAY,QAAA,eACAd,OAAA;MAAKe,SAAS,EAAC,EAAE;MAAAD,QAAA,gBACbd,OAAA;QAAKe,SAAS,EAAC,gBAAgB;QAAAD,QAAA,EAC1BN,IAAI,KAAG,MAAM,iBAAIR,OAAA;UAAIgB,GAAG,EAAEJ,IAAK;UAAa,aAAWL,KAAM;UAACU,SAAS,EAAGC,KAAK,IAAGZ,aAAa,CAACY,KAAK,CAAE;UAACC,EAAE,EAAG,aAAYZ,KAAM,EAAE;UAAEQ,SAAS,EAAC,4BAA4B;UAACK,eAAe,EAAC;QAAM,GAA3Jb,KAAK;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA0J;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrM,CAAC,eACNxB,OAAA;QAAAc,QAAA,EAAI;MAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACbxB,OAAA;QAAKe,SAAS,EAAC,oBAAoB;QAAAD,QAAA,eAC/Bd,OAAA;UAAKe,SAAS,EAAC,eAAe;UAAAD,QAAA,eAC1Bd,OAAA;YAAKe,SAAS,EAAC,kBAAkB;YAAAD,QAAA,gBAC7Bd,OAAA;cAAQe,SAAS,EAAC,cAAc;cAAAD,QAAA,eAC5Bd,OAAA;gBAAGe,SAAS,EAAC;cAAmB;gBAAAM,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjC,CAAC,eACTxB,OAAA;cAAAc,QAAA,EAAI;YAAE;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,gBACJ,CAAC;AAGX,CAAC;AAAAnB,EAAA,CA/BKF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAiClB,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}