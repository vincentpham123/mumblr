{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/today.js\",\n  _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TodayDashboard = () => {\n  _s();\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  const randomPost = Math.floor(Math.random() * 50) + 1;\n  console.log(randomPost);\n  const posts = useSelector(state => state.posts);\n  useEffect(() => {\n    dispatch(postActions.fetchPosts());\n  }, []);\n  const postsToShow = Object.values(posts);\n  console.log(postsToShow);\n  if (sessionUser) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 29\n  }, this);\n  if (posts)\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: postsToShow.map(post => {\n        return /*#__PURE__*/_jsxDEV(ShowPost, {\n          post: post,\n          profile: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 16\n        }, this);\n      })\n    }, void 0, false);\n};\n_s(TodayDashboard, \"TcPKI1oOhnKE7XxtlQpGTlpWhIA=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n_c = TodayDashboard;\nexport default TodayDashboard;\nvar _c;\n$RefreshReg$(_c, \"TodayDashboard\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useDispatch","useSelector","Redirect","postActions","jsxDEV","_jsxDEV","Fragment","_Fragment","TodayDashboard","_s","sessionUser","state","session","user","dispatch","randomPost","Math","floor","random","console","log","posts","fetchPosts","postsToShow","Object","values","to","fileName","_jsxFileName","lineNumber","columnNumber","children","map","post","profile","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/today.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst TodayDashboard = () =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    const randomPost = Math.floor(Math.random()*50)+1;\n    console.log(randomPost);\n    const posts = useSelector(state=>state.posts);\n    useEffect(()=>{\n        dispatch(postActions.fetchPosts());\n    },[]);\n    const postsToShow=Object.values(posts);\n    console.log(postsToShow);\n    if (sessionUser) return <Redirect to=\"/\" />;\n    if(posts)\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    return (\n        <>\n        {postsToShow.map ((post)=>{\n        return <ShowPost post={post} profile={false}/>})\n        }\n        </>\n    );\n\n\n\n\n}\n\nexport default TodayDashboard;"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,mBAAmB;AACxC,SAASC,SAAS,EAACC,QAAQ,QAAQ,OAAO;AAC1C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACjD,MAAMC,cAAc,GAAGA,CAAA,KAAK;EAAAC,EAAA;EACxB,MAAMC,WAAW,GAAGT,WAAW,CAACU,KAAK,IAAEA,KAAK,CAACC,OAAO,CAACC,IAAI,CAAC;EAC1D,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAMe,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAC,EAAE,CAAC,GAAC,CAAC;EACjDC,OAAO,CAACC,GAAG,CAACL,UAAU,CAAC;EACvB,MAAMM,KAAK,GAAGpB,WAAW,CAACU,KAAK,IAAEA,KAAK,CAACU,KAAK,CAAC;EAC7CvB,SAAS,CAAC,MAAI;IACVgB,QAAQ,CAACX,WAAW,CAACmB,UAAU,CAAC,CAAC,CAAC;EACtC,CAAC,EAAC,EAAE,CAAC;EACL,MAAMC,WAAW,GAACC,MAAM,CAACC,MAAM,CAACJ,KAAK,CAAC;EACtCF,OAAO,CAACC,GAAG,CAACG,WAAW,CAAC;EACxB,IAAIb,WAAW,EAAE,oBAAOL,OAAA,CAACH,QAAQ;IAACwB,EAAE,EAAC;EAAG;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAC3C,IAAGT,KAAK;IACR;IACA;IACA;IACA;IACA,oBACIhB,OAAA,CAAAE,SAAA;MAAAwB,QAAA,EACCR,WAAW,CAACS,GAAG,CAAGC,IAAI,IAAG;QAC1B,oBAAO5B,OAAA,CAACR,QAAQ;UAACoC,IAAI,EAAEA,IAAK;UAACC,OAAO,EAAE;QAAM;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA,CAAC;IAAC,gBAE9C,CAAC;AAMX,CAAC;AAAArB,EAAA,CA5BKD,cAAc;EAAA,QACIP,WAAW,EACdD,WAAW,EAGdC,WAAW;AAAA;AAAAkC,EAAA,GALvB3B,cAAc;AA8BpB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}