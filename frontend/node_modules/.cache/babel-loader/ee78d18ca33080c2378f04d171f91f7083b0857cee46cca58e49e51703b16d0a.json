{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/DashBoardPartial.js\",\n  _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DashboardPartial = _ref => {\n  _s();\n  let {\n    type\n  } = _ref;\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  // pagenumber to pass to backend to pass the next batch of data\n  // \n  const [postsMap, setPostsMap] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(false);\n  const [error, setError] = useState(false);\n  const [morePosts, setMorePosts] = useState(true);\n  const observer = useRef();\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    if (!morePosts) return;\n    observer.current = new IntersectionObserver(entries => {\n      console.log(morePosts);\n      if (entries[0].isIntersecting && morePosts) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, morePosts]);\n  useEffect(() => {\n    dispatch(postActions.clearPosts());\n    dispatch(postActions.fetchPosts(pageNumber, type)).then(res => {\n      setMorePosts(res.postsleft.postsLeft);\n    });\n  }, []);\n  const posts = useSelector(state => state.posts);\n\n  //will trigger a dispatch for more data when\n  // pagenumber changes\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    // dispatch(postActions.clearPosts());\n    dispatch(postActions.fetchPosts(pageNumber, type)).then(res => {\n      setLoading(false);\n      setMorePosts(res.postsleft.postsLeft);\n    });\n  }, [pageNumber]);\n  useEffect(() => {}, [dispatch]);\n  const postsToShow = Object.values(posts);\n\n  // if (sessionUser) return <Redirect to=\"/\" />;\n  //all Today dashboard will be in here\n  //select posts that were reblogged by \n  //todayonmumblr\n  // in seeding, need to have posts reblogged by todayonmumblr\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: postsToShow.map((post, index) => {\n      if (postsToShow.length === index + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: lastPostElementRef,\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this);\n      }\n    })\n  }, void 0, false);\n};\n_s(DashboardPartial, \"zTstkLk5p0hiN51hMb+aMC1CPls=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n_c = DashboardPartial;\nexport default DashboardPartial;\nvar _c;\n$RefreshReg$(_c, \"DashboardPartial\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useRef","useCallback","useDispatch","useSelector","Redirect","postActions","jsxDEV","_jsxDEV","Fragment","_Fragment","DashboardPartial","_ref","_s","type","sessionUser","state","session","user","dispatch","postsMap","setPostsMap","pageNumber","setPageNumber","loading","setLoading","hasMore","setHasMore","error","setError","morePosts","setMorePosts","observer","lastPostElementRef","node","current","disconnect","IntersectionObserver","entries","console","log","isIntersecting","prevPageNumber","observe","clearPosts","fetchPosts","then","res","postsleft","postsLeft","posts","postsToShow","Object","values","children","map","post","index","length","ref","className","profile","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/DashBoardPartial.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst DashboardPartial = ({type}) =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    // pagenumber to pass to backend to pass the next batch of data\n    // \n    const [postsMap,setPostsMap] = useState([]);\n    const [pageNumber,setPageNumber]=useState(1);\n    const [loading,setLoading] = useState(true);\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState(false);\n    const [morePosts,setMorePosts]=useState(true);\n    const observer = useRef();\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return ;\n        if(observer.current) observer.current.disconnect();\n        if(!morePosts) return;\n        \n        observer.current = new IntersectionObserver(entries =>{\n            console.log(morePosts);\n            if (entries[0].isIntersecting && morePosts) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.observe(node);\n    },[loading,morePosts]);\n    useEffect(()=>{\n        dispatch(postActions.clearPosts());\n        dispatch(postActions.fetchPosts(pageNumber,type))\n            .then(res=>{\n                setMorePosts(res.postsleft.postsLeft);\n            })\n    },[])\n    const posts = useSelector(state=>state.posts);\n\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setLoading(true);\n        setError(false);\n        // dispatch(postActions.clearPosts());\n        dispatch(postActions.fetchPosts(pageNumber,type))\n            .then( (res) =>{\n                setLoading(false);\n                setMorePosts(res.postsleft.postsLeft);\n            })\n\n    },[pageNumber]);\n    useEffect(()=>{\n\n    },[dispatch])\n    const postsToShow=Object.values(posts);\n    \n    \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    return (\n        <>\n        {postsToShow.map ((post,index)=>{\n            if (postsToShow.length === index +1 ) {\n                return (\n                    <div ref={lastPostElementRef} key={post.id} className='postMain'>\n                    <ShowPost  post={post} profile={false}/>\n                    </div>)\n            } else {\n                return( \n                    <div className='postMain' key={post.id}>\n                        <ShowPost  post={post} profile={false}/>\n                    </div>\n                )\n            }\n        })}\n        </>\n    );\n\n\n\n\n}\n\nexport default DashboardPartial;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}