{"ast":null,"code":"import csrfFetch, { storeCSRFToken } from \"./csrf\";\n\n// consts \n\nconst RECEIVE_POST = \"api/RECEIVE_POST\";\nconst RECEIVE_POSTS = \"api/RECEIVE_POSTS\";\nconst REMOVE_POST = 'api/UPDATE_POST';\nconst RECEIVE_USER_POST = \"api/USERNAME/RECEIVE_POSTS\";\n\n// action types\n\nconst receiveUserPost = (posts, userId) => ({\n  type: RECEIVE_USER_POST,\n  posts\n});\nconst receivePost = post => ({\n  type: RECEIVE_POST,\n  post\n});\nconst receivePosts = posts => ({\n  type: RECEIVE_POSTS,\n  posts\n});\nconst deletePost = postId => ({\n  type: REMOVE_POST,\n  postId\n});\n\n// thunk actions\n\nexport const fetchPosts = () => async dispatch => {\n  let response = await fetch('/api/posts');\n  if (response.ok) {\n    const posts = await response.json();\n    dispatch(receivePosts(posts));\n    return posts;\n  }\n};\nexport const fetchPost = postId => async dispatch => {\n  let response = await fetch(`/api/posts/${postId}`);\n  if (response.ok) {\n    const post = await response.json();\n    dispatch(receivePost(post));\n    return post;\n  }\n};\nexport const createPost = post => async dispatch => {\n  console.log(post);\n  const newPost = await csrfFetch('/api/posts', {\n    method: 'POST',\n    body: post\n  });\n  if (newPost.ok) {\n    const data = await newPost.json();\n    dispatch(receivePost(data));\n    return data;\n  }\n};\nexport const updatePost = post => async dispatch => {\n  const {\n    title,\n    body,\n    author_id\n  } = post;\n  const post = await csrfFetch('/api/posts', {\n    method: 'PATCH',\n    body: JSON.stringify({\n      title,\n      body,\n      author_id\n    })\n  });\n  if (post.ok) {\n    const data = await post.json();\n    dispatch(receivePost(data));\n    return data;\n  }\n};\nexport const removePost = postId => async dispatch => {\n  const post = await csrfFetch(`/api/posts/${postId}`, {\n    method: 'DELETE'\n  });\n  if (post.ok) {\n    dispatch(deletePost(postId));\n  }\n};\n\n// posts reducer\n\nconst postsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...state\n  };\n  switch (action.type) {\n    case RECEIVE_POST:\n      newState[action.post.id] = action.post;\n      return newState;\n    case RECEIVE_POSTS:\n      return {\n        ...action.posts\n      };\n    case REMOVE_POST:\n      delete newState[action.postId];\n      return newState;\n    default:\n      return newState;\n  }\n};\nexport default postsReducer;","map":{"version":3,"names":["csrfFetch","storeCSRFToken","RECEIVE_POST","RECEIVE_POSTS","REMOVE_POST","RECEIVE_USER_POST","receiveUserPost","posts","userId","type","receivePost","post","receivePosts","deletePost","postId","fetchPosts","dispatch","response","fetch","ok","json","fetchPost","createPost","console","log","newPost","method","body","data","updatePost","title","author_id","JSON","stringify","removePost","postsReducer","state","arguments","length","undefined","action","newState","id"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/store/posts.js"],"sourcesContent":["import csrfFetch, { storeCSRFToken } from \"./csrf\";\n\n// consts \n\nconst RECEIVE_POST = \"api/RECEIVE_POST\";\nconst RECEIVE_POSTS = \"api/RECEIVE_POSTS\";\nconst REMOVE_POST = 'api/UPDATE_POST';\nconst RECEIVE_USER_POST = \"api/USERNAME/RECEIVE_POSTS\";\n\n// action types\n\nconst receiveUserPost = (posts,userId) => ({\n    type: RECEIVE_USER_POST,\n    posts\n})\nconst receivePost = (post) => ({\n    type: RECEIVE_POST,\n    post \n})\n\nconst receivePosts = (posts) => ({\n    type: RECEIVE_POSTS,\n    posts\n})\n\nconst deletePost = (postId) =>({\n    type: REMOVE_POST,\n    postId\n})\n\n\n// thunk actions\n\nexport const fetchPosts = () => async(dispatch) =>{\n    let response = await fetch('/api/posts');\n    if (response.ok){\n    const posts = await response.json();\n    dispatch(receivePosts(posts));\n    return posts\n    }\n}\n\nexport const fetchPost = (postId) => async(dispatch)=>{\n    let response = await fetch(`/api/posts/${postId}`);\n\n    if (response.ok){\n    const post = await response.json();\n    dispatch(receivePost(post));\n    return post;\n    }\n} \n\nexport const createPost = (post) => async(dispatch) =>{\n    console.log(post);\n    const newPost = await csrfFetch('/api/posts',{\n        method:'POST',\n        body: post\n    });\n    if (newPost.ok){\n    const data = await newPost.json();\n    dispatch(receivePost(data));\n    return data;\n    }\n}\n\nexport const updatePost = post=> async(dispatch) => {\n    const{title,body,author_id} = post;\n    const post = await csrfFetch('/api/posts',{\n        method:'PATCH',\n        body: JSON.stringify({title,body,author_id})\n    });\n    if (post.ok){\n    const data = await post.json();\n    dispatch(receivePost(data));\n    return data;\n    }\n}\n\nexport const removePost = postId => async dispatch =>{\n    const post = await csrfFetch(`/api/posts/${postId}`, {\n        method: 'DELETE'\n    });\n    if (post.ok){\n        dispatch(deletePost(postId))\n    }\n};\n\n// posts reducer\n\nconst postsReducer = (state={},action)=>{\n    const newState={...state};\n    switch (action.type) {\n        case RECEIVE_POST:\n            newState[action.post.id] = action.post;\n            return newState;\n        case RECEIVE_POSTS:\n            return {...action.posts};\n        case REMOVE_POST:\n            delete newState[action.postId];\n            return newState;\n        default:\n            return newState;\n    }\n}\nexport default postsReducer;\n\n    \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}