{"ast":null,"code":"// example of slice of state for a user\n// {\n//     user: {\n//       id,\n//       email,\n//       username,\n//       createdAt,\n//       updatedAt\n//     }\n//   }\nimport csrfFetch, { storeCSRFToken } from \"./csrf\";\nconst SET_CURRENT_USER = 'session/setCurrentUser';\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\nexport const createSession = user => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: user\n  };\n};\nconst storeCurrentUser = user => {\n  if (user) sessionStorage.setItem(\"currentUser\", JSON.stringify(user));else sessionStorage.removeItem('currentUser');\n};\nexport const removeSession = () => {\n  return {\n    type: REMOVE_CURRENT_USER\n  };\n};\nexport const restoreSession = () => async dispatch => {\n  const response = await csrfFetch('/api/session');\n  storeCSRFToken(response);\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(createSession(data.user));\n  return response;\n};\nexport const signup = user => async dispatch => {\n  const {\n    credential,\n    password\n  } = user;\n  const response = await csrfFetch('./api/users', {\n    method: \"POST\",\n    body: JSON.stringify({\n      credential,\n      password\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(createSession(data.user));\n  return response;\n};\nexport const login = user => async dispatch => {\n  const {\n    credential,\n    password\n  } = user;\n  const response = await csrfFetch('./api/session', {\n    method: \"POST\",\n    body: JSON.stringify({\n      credential,\n      password\n    })\n  });\n  const data = await response.json();\n  storeCurrentUser(data.user);\n  dispatch(createSession(data.user));\n  return response;\n};\nexport const logout = () => async dispatch => {\n  const response = await csrfFetch('/api/session', {\n    method: \"DELETE\"\n  });\n  dispatch(removeSession());\n  return response;\n};\nconst initialState = {\n  user: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n};\nconst sessionReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case REMOVE_CURRENT_USER:\n      return {\n        ...state,\n        user: null\n      };\n    default:\n      return state;\n  }\n};\nexport default sessionReducer;","map":{"version":3,"names":["csrfFetch","storeCSRFToken","SET_CURRENT_USER","REMOVE_CURRENT_USER","createSession","user","type","payload","storeCurrentUser","sessionStorage","setItem","JSON","stringify","removeItem","removeSession","restoreSession","dispatch","response","data","json","signup","credential","password","method","body","login","logout","initialState","parse","getItem","sessionReducer","state","arguments","length","undefined","action"],"sources":["/Users/vincentpham/Documents/GitHub/fullstack/frontend_react/frontend/src/store/session.js"],"sourcesContent":["// example of slice of state for a user\n// {\n//     user: {\n//       id,\n//       email,\n//       username,\n//       createdAt,\n//       updatedAt\n//     }\n//   }\nimport csrfFetch, { storeCSRFToken } from \"./csrf\";\nconst SET_CURRENT_USER = 'session/setCurrentUser';\nconst REMOVE_CURRENT_USER = 'session/removeCurrentUser';\n\n\nexport const createSession = (user) => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: user\n    }\n\n}\n\nconst storeCurrentUser = user => {\n    if (user) sessionStorage.setItem(\"currentUser\",JSON.stringify(user));\n    else sessionStorage.removeItem('currentUser');\n}\n\nexport const removeSession = ()=> {\n    return {\n        type: REMOVE_CURRENT_USER\n    }\n}\n\nexport const restoreSession = () => async dispatch => {\n    const response =await csrfFetch('/api/session');\n    storeCSRFToken(response);\n    const data = await response.json();\n    storeCurrentUser(data.user);\n    dispatch(createSession(data.user));\n    return response;\n    \n}\nexport const signup =(user)=> async(dispatch) => {\n    const {credential,password} = user;\n    const response = await csrfFetch('./api/users',{\n        method:\"POST\",\n        body: JSON.stringify({credential,password})\n    });\n    const data = await response.json();\n    storeCurrentUser(data.user);\n    dispatch(createSession(data.user));\n    return response;\n}\nexport const login =(user)=> async(dispatch) => {\n    const {credential,password} = user;\n    const response = await csrfFetch('./api/session',{\n        method:\"POST\",\n        body: JSON.stringify({credential,password})\n    });\n    const data = await response.json();\n    storeCurrentUser(data.user);\n    dispatch(createSession(data.user));\n    return response;\n}\nexport const logout = () => async (dispatch) => {\n    const response = await csrfFetch('/api/session', {\n      method: \"DELETE\"\n    });\n    dispatch(removeSession());\n    return response;\n  }\nconst initialState = {user: JSON.parse(sessionStorage.getItem(\"currentUser\"))};\n\nconst sessionReducer = (state=initialState,action)=> {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {...state,user: action.payload}\n        case REMOVE_CURRENT_USER:\n            return{...state,user: null};\n        default:\n            return state;\n    }\n}\n\nexport default sessionReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}