{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserDashBoard.js\",\n  _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useParams, Link } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\n//instead of using fetchPosts, will use User posts with Params\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserDashboard = _ref => {\n  _s();\n  let {\n    type\n  } = _ref;\n  const {\n    userid\n  } = useParams();\n  //params will contain id\n\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  const [postsMap, setPostsMap] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [initialLoad, setInitialLoad] = useState(false);\n  const [hasMore, setHasMore] = useState(false);\n  const [error, setError] = useState(false);\n  const [morePosts, setMorePosts] = useState(true);\n  const [noPosts, setNoPosts] = useState(false);\n  const observer = useRef();\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    if (!morePosts) return;\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && morePosts) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, morePosts]);\n  useEffect(() => {\n    setPostsMap([]);\n    setPageNumber(1);\n    dispatch(postActions.clearPosts());\n    setTimeout(() => {\n      dispatch(postActions.fetchPosts(pageNumber, type, userid)).then(res => {\n        setPostsMap([]);\n        setMorePosts(res.postsleft.postsLeft);\n        if (!res.posts) {\n          setNoPosts(true);\n        } else setNoPosts(false);\n      });\n    }, 500);\n  }, [type, userid]);\n  useEffect(() => {\n    if (postsMap.length === 0) {\n      setInitialLoad(true);\n    } else setInitialLoad(false);\n  }, [postsMap]);\n  const posts = useSelector(state => state.posts);\n  //will trigger a dispatch for more data when\n  // pagenumber changes\n  useEffect(() => {\n    setError(false);\n    setLoading(true);\n    if (pageNumber !== 1) {\n      dispatch(postActions.fetchPosts(pageNumber, type, userid)).then(res => {\n        setMorePosts(res.postsleft.postsLeft);\n        setLoading(false);\n      });\n    } else {\n      setLoading(false);\n    }\n  }, [pageNumber]);\n  useEffect(() => {\n    setPostsMap(state => {\n      const stateCopy = [...state];\n      Object.values(posts).forEach(post => {\n        //update info for each post \n        const postIndex = stateCopy.findIndex(origPost => origPost.id === post.id);\n        if (postIndex !== -1) {\n          stateCopy[postIndex] = {\n            ...post\n          };\n        }\n      });\n      const existingPostIds = state.map(post => post.id);\n      const newPosts = Object.values(posts).filter(post => !existingPostIds.includes(post.id));\n      const newState = [];\n      [...stateCopy, ...newPosts].forEach(post => {\n        newState.push(post);\n      });\n      newState.forEach((post, index) => {\n        const storeIndex = Object.values(posts).findIndex(storePost => storePost.id === post.id);\n        if (storeIndex === -1) {\n          newState.splice(index, 1);\n        }\n      });\n      newState.sort((post1, post2) => {\n        const timestamp1 = new Date(post1.dateCreated + ' ' + post1.timeCreated).getTime();\n        const timestamp2 = new Date(post2.dateCreated + ' ' + post2.timeCreated).getTime();\n        return timestamp1 < timestamp2 ? 1 : timestamp1 > timestamp2 ? -1 : 0;\n      });\n      newState.sort((post1, post2) => {\n        return post1.dateCreated < post2.dateCreated && post1.timeCreated < post2.timeCreated ? 1 : post1.dateCreated > post2.dateCreated && post1.timeCreated > post2.timeCreated ? -1 : 0;\n      });\n      // setLoading(false);\n      return newState;\n    });\n    return () => {\n      setPostsMap([]);\n    };\n  }, [posts]);\n  const postsToShow = Object.values(posts);\n\n  // if (sessionUser) return <Redirect to=\"/\" />;\n  //all Today dashboard will be in here\n  //select posts that were reblogged by \n  //todayonmumblr\n  // in seeding, need to have posts reblogged by todayonmumblr\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [type === 'likes' && noPosts && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"noposts-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Empty :(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Go out and like some posts! :)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa-solid fa-otter fa-bounce\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), type === 'userposts' && noPosts && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nouserposts-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Empty :(\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"A Blog Post will fix that!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-post-button\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/new\",\n          className: \"empty-post-link\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-sharp fa-solid fa-pencil animation-pencil\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), !initialLoad && postsMap.map((post, index) => {\n      if (postsMap.length === index + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: lastPostElementRef,\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: true\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 21\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: true\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this);\n      }\n    }), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-load-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-load-body\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-spinner fa-spin userload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(UserDashboard, \"f2+kt1cFnQ5nUM4IOMIuHn7m+b0=\", false, function () {\n  return [useParams, useSelector, useDispatch, useSelector];\n});\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useRef","useCallback","useDispatch","useSelector","Redirect","useParams","Link","postActions","jsxDEV","_jsxDEV","Fragment","_Fragment","UserDashboard","_ref","_s","type","userid","sessionUser","state","session","user","dispatch","postsMap","setPostsMap","pageNumber","setPageNumber","loading","setLoading","initialLoad","setInitialLoad","hasMore","setHasMore","error","setError","morePosts","setMorePosts","noPosts","setNoPosts","observer","lastPostElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","clearPosts","setTimeout","fetchPosts","then","res","postsleft","postsLeft","posts","length","stateCopy","Object","values","forEach","post","postIndex","findIndex","origPost","id","existingPostIds","map","newPosts","filter","includes","newState","push","index","storeIndex","storePost","splice","sort","post1","post2","timestamp1","Date","dateCreated","timeCreated","getTime","timestamp2","postsToShow","children","className","fileName","_jsxFileName","lineNumber","columnNumber","to","ref","profile","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserDashBoard.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect,useParams,Link} from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\n//instead of using fetchPosts, will use User posts with Params\n\nconst UserDashboard = ( {type}) =>{\n    const {userid} = useParams();\n    //params will contain id\n    \n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    const [postsMap,setPostsMap] = useState([]);\n    const [pageNumber,setPageNumber]=useState(1);\n    const [loading,setLoading] = useState(true);\n    const [initialLoad,setInitialLoad]=useState(false)\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState(false);\n    const [morePosts,setMorePosts]=useState(true);\n    const [noPosts,setNoPosts] = useState(false);\n    const observer = useRef();\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return ;\n        if(observer.current) observer.current.disconnect();\n        if(!morePosts) return;\n        \n        observer.current = new IntersectionObserver(entries =>{\n            if (entries[0].isIntersecting && morePosts) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.observe(node);\n    },[loading,morePosts]);\n    useEffect(()=>{\n        setPostsMap([]);\n        setPageNumber(1);\n        dispatch(postActions.clearPosts())\n        setTimeout(()=>{\n        dispatch(postActions.fetchPosts(pageNumber,type,userid))\n            .then(res=>{\n                setPostsMap([]);\n                setMorePosts(res.postsleft.postsLeft);\n                if(!res.posts){\n                    setNoPosts(true);\n                } else setNoPosts(false);\n\n            })\n        },500)\n    },[type,userid])\n    useEffect(()=>{\n        if (postsMap.length===0){\n            setInitialLoad(true);\n        } else setInitialLoad(false);\n    },[postsMap])\n    const posts = useSelector(state=>state.posts);\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setError(false);\n        setLoading(true);\n        if (pageNumber!==1){\n        dispatch(postActions.fetchPosts(pageNumber,type,userid))\n            .then((res) =>{\n                setMorePosts(res.postsleft.postsLeft);\n                setLoading(false);\n            })\n        } else{\n            setLoading(false);\n        }\n    },[pageNumber]);\n    useEffect(()=>{\n      \n        setPostsMap(state=>{\n            const stateCopy=[...state];\n            Object.values(posts).forEach ((post)=>{\n                //update info for each post \n                const postIndex = stateCopy.findIndex((origPost)=>origPost.id===post.id)\n                if (postIndex!==-1){\n                    stateCopy[postIndex]={...post};\n                }\n            })\n            const existingPostIds = state.map((post)=>post.id);\n            const newPosts = Object.values(posts).filter(\n                (post)=> !existingPostIds.includes(post.id)\n            )\n            const newState=[];\n            [...stateCopy,...newPosts].forEach((post)=>{\n                newState.push(post);\n            })\n            newState.forEach((post,index)=>{\n                const storeIndex=Object.values(posts).findIndex((storePost)=>storePost.id===post.id)\n                if (storeIndex===-1){\n                    newState.splice(index,1);\n                }\n            })\n            newState.sort((post1, post2) => {\n                const timestamp1 = new Date(post1.dateCreated + ' ' + post1.timeCreated).getTime();\n                const timestamp2 = new Date(post2.dateCreated + ' ' + post2.timeCreated).getTime();\n              \n                return timestamp1 < timestamp2 ? 1 : timestamp1 > timestamp2 ? -1 : 0;\n              });\n            newState.sort((post1,post2)=>{\n                return (post1.dateCreated<post2.dateCreated && post1.timeCreated<post2.timeCreated) ? 1 : (post1.dateCreated>post2.dateCreated && post1.timeCreated>post2.timeCreated) ? -1 : 0;\n            })\n            // setLoading(false);\n            return newState;\n        })\n        return ()=>{\n            setPostsMap([]);\n        }\n    },[posts])\n\n\n    const postsToShow=Object.values(posts);\n    \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    return (\n        <>\n        {type==='likes' && noPosts && \n            <div className='noposts-message'>\n                <h2>Empty :(</h2>\n                <h2>Go out and like some posts! :)</h2>\n                <i className=\"fa-solid fa-otter fa-bounce\"></i>\n            </div>\n        }\n        {type==='userposts' && noPosts && \n            <div className='nouserposts-message'>\n                <h2>Empty :(</h2>\n                <h2>A Blog Post will fix that!</h2>\n                <div className='empty-post-button'>\n                    <Link to='/new' className='empty-post-link'>\n                        <i className=\"fa-sharp fa-solid fa-pencil animation-pencil\" ></i>\n                    </Link>\n                </div>\n            </div>\n        }\n\n        {!initialLoad&&postsMap.map ((post,index)=>{\n            if (postsMap.length === index +1 ) {\n                return (\n                    <div ref={lastPostElementRef} key={post.id} className='postMain'>\n                    <ShowPost key={index} post={post} profile={true}/>\n                    </div>)\n            } else {\n                return( \n                    <div className='postMain' key={post.id}>\n                        <ShowPost  key={index} post={post} profile={true}/>\n                    </div>\n                )\n            }\n        })}\n        {loading &&  \n            <div className='post-load-container'>\n                <div className='post-load-body'>\n                    <i className=\"fa-solid fa-spinner fa-spin userload\"></i>\n                </div>\n            </div>}\n        </>\n    );\n\n\n\n\n}\n\nexport default UserDashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}