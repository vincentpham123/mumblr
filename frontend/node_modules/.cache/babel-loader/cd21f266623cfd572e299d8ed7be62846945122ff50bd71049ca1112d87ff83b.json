{"ast":null,"code":"// constants\nimport csrfFetch from \"./csrf\";\nimport { receivePosts, receivePost } from \"./posts\";\nimport { createSelector } from \"reselect\";\nconst RECEIVE_LIKES = 'api/RECEIVELIKES';\nconst DELETE_LIKE = 'api/DELETELIKE';\nconst RECEIVE_LIKE = 'api/RECEIVELIKE';\n\n// actions \n\nexport const receiveLikes = likes => ({\n  // will be called when fetching posts\n  // will update likes to be contain the likes for the posts in the state\n\n  type: RECEIVE_LIKES,\n  likes\n});\nexport const receiveLike = like => ({\n  type: RECEIVE_LIKE,\n  like\n});\nexport const deleteLike = likeid => ({\n  // only remove the like if sessionUser id matches the like id\n  // can handle that in the frontend\n  // \n  type: DELETE_LIKE,\n  likeid\n});\n//getter\nconst getLikesState = state => state.likes;\nexport const postLikes = postid => state => {\n  return state !== null && state !== void 0 && state.likes ? Object.values(state.likes).filter(like => like.postId === postid) : null;\n};\nexport const postLikesSelector = createSelector(getLikesState, (_, postId) => postId, postLikes);\nexport const userLike = function () {\n  let userId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let postId = arguments.length > 1 ? arguments[1] : undefined;\n  return state => {\n    return state !== null && state !== void 0 && state.likes ? Object.values(state.likes).filter(like => like.userId === userId && like.postId == postId) : null;\n  };\n};\nexport const userLikesSelector = createSelector();\n\n//thunk actions \n//will need a createlike and deletelike thunk action\n// no need for thunk action to receive likes\n// can receive likes from post fetches since likes will be associated with the likes from that post \nexport const fetchUserLikes = () => async dispatch => {\n  let response = await fetch('/api/likes');\n\n  // will fetch all likes for a user, payload will include the posts as well\n  // wil need to call dispatch(receivePosts(payload.posts))\n\n  if (response.ok) {\n    let data = await response.json();\n    dispatch(receivePosts(data.posts));\n    dispatch(receiveLikes(data.likes));\n    return data;\n  }\n};\nexport const removeLike = likeid => async dispatch => {\n  let response = await csrfFetch(`/api/likes/${likeid}`, {\n    method: 'DELETE'\n  });\n  if (response.ok) {\n    //return likes with deleted user like\n    let data = await response.json();\n    dispatch(deleteLike(likeid));\n    dispatch(receivePost(data.post));\n  }\n};\nexport const createLike = like => async dispatch => {\n  let response = await csrfFetch('/api/likes', {\n    body: JSON.stringify(like),\n    method: \"POST\"\n  });\n  if (response.ok) {\n    let data = await response.json();\n    dispatch(receiveLike(data.like));\n    dispatch(receivePost(data.post));\n  }\n\n  //fetch like creation\n\n  // if response is ok, \n  //update the state to include the new like \n};\n\nconst likesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = {\n    ...state\n  };\n  switch (action.type) {\n    case RECEIVE_LIKES:\n      //will receive likes for posts currently in state\n      return {\n        ...newState,\n        ...action.likes\n      };\n    case DELETE_LIKE:\n      delete newState[action.likeid];\n      return newState;\n    case RECEIVE_LIKE:\n      newState[action.like.id] = action.like;\n      return newState;\n    default:\n      return newState;\n  }\n};\nexport default likesReducer;","map":{"version":3,"names":["csrfFetch","receivePosts","receivePost","createSelector","RECEIVE_LIKES","DELETE_LIKE","RECEIVE_LIKE","receiveLikes","likes","type","receiveLike","like","deleteLike","likeid","getLikesState","state","postLikes","postid","Object","values","filter","postId","postLikesSelector","_","userLike","userId","arguments","length","undefined","userLikesSelector","fetchUserLikes","dispatch","response","fetch","ok","data","json","posts","removeLike","method","post","createLike","body","JSON","stringify","likesReducer","action","newState","id"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/store/likes.js"],"sourcesContent":["// constants\nimport csrfFetch from \"./csrf\";\n\nimport { receivePosts, receivePost } from \"./posts\";\nimport { createSelector} from \"reselect\";\n\nconst RECEIVE_LIKES = 'api/RECEIVELIKES';\nconst DELETE_LIKE = 'api/DELETELIKE';\nconst RECEIVE_LIKE = 'api/RECEIVELIKE';\n\n// actions \n\nexport const receiveLikes = (likes) =>({\n    // will be called when fetching posts\n    // will update likes to be contain the likes for the posts in the state\n\n    type: RECEIVE_LIKES,\n    likes\n})\nexport const receiveLike = (like) => ({\n    type: RECEIVE_LIKE,\n    like\n})\nexport const deleteLike = (likeid) => ({\n    // only remove the like if sessionUser id matches the like id\n    // can handle that in the frontend\n    // \n    type: DELETE_LIKE,\n    likeid\n})\n//getter\nconst getLikesState = (state) => state.likes;\nexport const postLikes = (postid) => (state) => {\n    return state?.likes ? Object.values(state.likes).filter((like)=>like.postId ===postid) : null;\n    \n}\nexport const postLikesSelector = createSelector(\n    getLikesState,\n    (_,postId) => postId,\n    postLikes\n\n);\nexport const userLike = (userId=0,postId) => state =>{\n    return state?.likes ? Object.values(state.likes).filter((like)=>like.userId===userId && like.postId ==postId) : null;\n}\nexport const userLikesSelector = createSelector(\n    \n)\n\n//thunk actions \n//will need a createlike and deletelike thunk action\n// no need for thunk action to receive likes\n// can receive likes from post fetches since likes will be associated with the likes from that post \nexport const fetchUserLikes = () => async dispatch => {\n    let response = await fetch('/api/likes')\n    \n    // will fetch all likes for a user, payload will include the posts as well\n    // wil need to call dispatch(receivePosts(payload.posts))\n\n    if (response.ok){\n        let data = await response.json();\n        dispatch(receivePosts(data.posts))\n        dispatch(receiveLikes(data.likes))\n        return data\n    }\n}\nexport const removeLike = (likeid) => async dispatch => {\n    let response = await csrfFetch(`/api/likes/${likeid}`,\n    {method:'DELETE'})\n    if (response.ok){\n        //return likes with deleted user like\n        let data = await response.json();\n       \n        dispatch(deleteLike(likeid));\n        dispatch(receivePost(data.post));\n        \n    }\n}\nexport const createLike = (like) => async dispatch => {\n    let response = await csrfFetch('/api/likes',{\n    body: JSON.stringify(like),\n    method: \"POST\"\n        });\n    if (response.ok){\n        let data = await response.json();\n        dispatch(receiveLike(data.like));\n        dispatch(receivePost(data.post));\n    }\n\n    //fetch like creation\n\n    // if response is ok, \n    //update the state to include the new like \n\n}\n\nconst likesReducer = (state={},action) =>{\n    const newState = {...state};\n\n    switch (action.type) {\n        case RECEIVE_LIKES:\n            //will receive likes for posts currently in state\n            return {...newState,...action.likes}\n            \n        case DELETE_LIKE:\n            delete newState[action.likeid];\n            return newState;\n        case RECEIVE_LIKE:\n            newState[action.like.id] = action.like;\n            return newState\n        default:\n            return newState;\n    }\n}\n\nexport default likesReducer;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}