{"ast":null,"code":"import csrfFetch from \"./csrf\";\nimport { createSelector } from \"reselect\";\nconst RECEIVE_COMMENT = 'api/RECEIVECOMMENT';\nconst DELETE_COMMENT = 'api/DELETECOMMENT';\nconst RECEIVE_COMMENTS = 'api/RECEIVECOMMENTS';\n\n//actions\nexport const receiveComments = comments => ({\n  type: RECEIVE_COMMENTS,\n  comments\n});\nexport const receiveComment = comment => ({\n  type: RECEIVE_COMMENT,\n  comment\n});\nexport const deleteComment = commentId => ({\n  type: DELETE_COMMENT,\n  commentId\n});\n\n//getter \n// export const postComments = (postid) => (state) => {\n//     return state?.posts ? Object.values(state.comments).filter((comment)=> comment.postId ===postid) : null;\n\n// }\nconst getCommentState = state => state.comments;\n// export const postComments = (postid) => (state) => {\n//     return state?.posts ? Object.values(state.comments).filter((comment)=> comment.postId ===postid) : null;\n\n// }\nconst postCommentsSelector = state => state !== null && state !== void 0 && state.posts ? Object.values(state.comments) : null;\nexport const makePostCommentsSelector = () => createSelector([postCommentsSelector, (_, postid) => postid],\n// Pass additional argument 'postid' to the selector\n(comments, postid) => {\n  return comments ? comments.filter(comment => comment.postId === postid) : null;\n});\nexport const postComments = postid => createSelector([getCommentState], comments => comments.filer(comment => comment.postId === postid)\n// return state?.posts ? Object.values(state.comments).filter((comment)=> comment.postId ===postid) : null;\n);\n// export const postCommentsSelector = createSelector(\n//     getCommentState,\n//     (_,postId) => postId,\n//     postComments\n// );\n//thunk actions\n\nexport const createComment = formData => async dispatch => {\n  let response = await csrfFetch('/api/comments', {\n    body: formData,\n    method: 'POST'\n  });\n  if (response.ok) {\n    let data = await response.json();\n    dispatch(receiveComment(data));\n  }\n};\nexport const removeComment = commentId => async dispatch => {\n  let response = await csrfFetch(`/api/comments/${commentId}`, {\n    method: 'DELETE'\n  });\n  if (response.ok) {\n    dispatch(deleteComment(commentId));\n  }\n};\nconst commentsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = {\n    ...state\n  };\n  switch (action.type) {\n    case RECEIVE_COMMENTS:\n      return {\n        ...newState,\n        ...action.comments\n      };\n    case RECEIVE_COMMENT:\n      newState[action.comment.id] = action.comment;\n      return newState;\n    case DELETE_COMMENT:\n      delete newState[action.commentId];\n      return newState;\n    default:\n      return newState;\n  }\n};\nexport default commentsReducer;","map":{"version":3,"names":["csrfFetch","createSelector","RECEIVE_COMMENT","DELETE_COMMENT","RECEIVE_COMMENTS","receiveComments","comments","type","receiveComment","comment","deleteComment","commentId","getCommentState","state","postCommentsSelector","posts","Object","values","makePostCommentsSelector","_","postid","filter","postId","postComments","filer","createComment","formData","dispatch","response","body","method","ok","data","json","removeComment","commentsReducer","arguments","length","undefined","action","newState","id"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/store/comments.js"],"sourcesContent":["import csrfFetch from \"./csrf\"\nimport { createSelector } from \"reselect\"\nconst RECEIVE_COMMENT = 'api/RECEIVECOMMENT'\nconst DELETE_COMMENT = 'api/DELETECOMMENT'\nconst RECEIVE_COMMENTS= 'api/RECEIVECOMMENTS'\n\n//actions\nexport const receiveComments = (comments)=>({\n    type: RECEIVE_COMMENTS,\n    comments\n})\nexport const receiveComment = (comment)=>({\n    type: RECEIVE_COMMENT,\n    comment\n})\n\nexport const deleteComment = (commentId) => ({\n    type: DELETE_COMMENT,\n    commentId\n})\n\n//getter \n// export const postComments = (postid) => (state) => {\n//     return state?.posts ? Object.values(state.comments).filter((comment)=> comment.postId ===postid) : null;\n    \n// }\nconst getCommentState = state=> state.comments;\n// export const postComments = (postid) => (state) => {\n//     return state?.posts ? Object.values(state.comments).filter((comment)=> comment.postId ===postid) : null;\n    \n// }\nconst postCommentsSelector = (state) => state?.posts ? Object.values(state.comments) : null;\n\nexport const makePostCommentsSelector = () =>\n  createSelector(\n    [postCommentsSelector, (_, postid) => postid], // Pass additional argument 'postid' to the selector\n    (comments, postid) => {\n      return comments ? comments.filter((comment) => comment.postId === postid) : null;\n    }\n  );\nexport const postComments = (postid) => createSelector(\n    [getCommentState],\n    (comments) => comments.filer((comment)=>comment.postId ===postid)\n    // return state?.posts ? Object.values(state.comments).filter((comment)=> comment.postId ===postid) : null;\n    \n)\n// export const postCommentsSelector = createSelector(\n//     getCommentState,\n//     (_,postId) => postId,\n//     postComments\n// );\n//thunk actions\n\nexport const createComment = (formData) =>async dispatch=> {\n    let response = await csrfFetch('/api/comments',{\n        body: formData,\n        method: 'POST'\n    })\n\n    if (response.ok){\n        let data = await response.json();\n        dispatch(receiveComment(data));\n    }\n}\n\n\nexport const removeComment = (commentId) => async dispatch =>{\n    let response = await csrfFetch(`/api/comments/${commentId}`,{\n    method:'DELETE'});\n\n    if (response.ok){\n        dispatch(deleteComment(commentId))\n    }\n\n}\n\nconst commentsReducer = (state={},action)=>{\n    let newState={...state};\n\n    switch (action.type) {\n        case RECEIVE_COMMENTS:\n            return {...newState,...action.comments};\n\n        case RECEIVE_COMMENT:\n            newState[action.comment.id]=action.comment;\n            return newState;\n        case DELETE_COMMENT:\n            delete newState[action.commentId];\n            return newState\n        default:\n            return newState;\n    }\n}\n\nexport default commentsReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}