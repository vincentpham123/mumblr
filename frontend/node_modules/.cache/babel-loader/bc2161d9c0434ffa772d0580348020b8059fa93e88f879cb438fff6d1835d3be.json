{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/DashBoardPartial.js\",\n  _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DashboardPartial = _ref => {\n  _s();\n  let {\n    type\n  } = _ref;\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  const [postsMap, setPostsMap] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(false);\n  const [error, setError] = useState(false);\n  const [morePosts, setMorePosts] = useState(true);\n  const [initialLoad, setInitialLoad] = useState(false);\n  const [noPosts, setNoPosts] = useState(false);\n  const observer = useRef();\n  if ((type === 'foryou' || type === 'trending') && !sessionUser) {\n    /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/explore/preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this);\n  }\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    if (!morePosts) return;\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && morePosts) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, morePosts]);\n  useEffect(() => {\n    setPostsMap([]);\n  }, []);\n  useEffect(() => {\n    setPostsMap([]);\n    setPageNumber(1);\n    dispatch(postActions.clearPosts());\n    setTimeout(() => {\n      dispatch(postActions.fetchPosts(pageNumber, type)).then(res => {\n        setPostsMap([]);\n        setMorePosts(res.postsleft.postsLeft);\n        if (!res.posts) {\n          setNoPosts(true);\n        } else setNoPosts(false);\n      });\n    }, 500);\n    return () => {\n      setPostsMap([]);\n    };\n  }, [type]);\n  const posts = useSelector(state => state.posts);\n\n  //will trigger a dispatch for more data when\n  // pagenumber changes\n  useEffect(() => {\n    setLoading(true);\n    setError(false);\n    if (pageNumber !== 1) {\n      dispatch(postActions.fetchPosts(pageNumber, type)).then(res => {\n        setMorePosts(res.postsleft.postsLeft);\n        setLoading(false);\n      });\n    } else {\n      setLoading(false);\n    }\n  }, [pageNumber]);\n  const updatePostsMap = (newPosts, type) => {\n    setPostsMap(state => {\n      const stateCopy = [...state];\n\n      // Update existing posts\n      Object.values(newPosts).forEach(post => {\n        const postIndex = stateCopy.findIndex(origPost => origPost.id === post.id);\n        if (postIndex !== -1) {\n          stateCopy[postIndex] = {\n            ...post\n          };\n        }\n      });\n\n      // Filter and sort new posts\n      const existingPostIds = state.map(post => post.id);\n      const filteredNewPosts = Object.values(newPosts).filter(post => !existingPostIds.includes(post.id));\n      if (type === 'trending') {\n        filteredNewPosts.sort((post1, post2) => {\n          return post1.commentcount + post1.comentcount < post2.comentcount + post2.comentcount ? 1 : post1.commentcount + post1.comentcount > post2.comentcount + post2.comentcount ? -1 : 0;\n        });\n      }\n\n      // Concatenate existing posts with new posts\n      const newState = [...stateCopy, ...filteredNewPosts];\n\n      // Remove duplicates\n      const uniqueState = newState.filter((post, index) => {\n        const storeIndex = Object.values(newPosts).findIndex(storePost => storePost.id === post.id);\n        return storeIndex === index;\n      });\n      return uniqueState;\n    });\n  };\n  useEffect(() => {\n    // setLoading(true);\n\n    setPostsMap(state => {\n      const stateCopy = [...state];\n      Object.values(posts).forEach(post => {\n        //update info for each post \n        const postIndex = stateCopy.findIndex(origPost => origPost.id === post.id);\n        if (postIndex !== -1) {\n          stateCopy[postIndex] = {\n            ...post\n          };\n        }\n      });\n      const existingPostIds = state.map(post => post.id);\n      const newPosts = Object.values(posts).filter(post => !existingPostIds.includes(post.id));\n      if (type === 'trending') {\n        newPosts.sort((post1, post2) => {\n          return post1.commentcount + post1.comentcount < post2.comentcount + post2.comentcount ? 1 : post1.commentcount + post1.comentcount > post2.comentcount + post2.comentcount ? -1 : 0;\n        });\n      }\n      const newState = [];\n      [...stateCopy, ...newPosts].forEach(post => {\n        newState.push(post);\n      });\n      newState.forEach((post, index) => {\n        const storeIndex = Object.values(posts).findIndex(storePost => storePost.id === post.id);\n        if (storeIndex === -1) {\n          newState.splice(index, 1);\n        }\n      });\n      return newState;\n    });\n    // setLoading(false);\n  }, [posts]);\n  useEffect(() => {\n    if (postsMap.length === 0 && initialLoad) {\n      setInitialLoad(true);\n    } else setInitialLoad(false);\n  }, [postsMap]);\n  const postsToShow = Object.values(posts);\n\n  // if (sessionUser) return <Redirect to=\"/\" />;\n  //all Today dashboard will be in here\n  //select posts that were reblogged by \n  //todayonmumblr\n  // in seeding, need to have posts reblogged by todayonmumblr\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!initialLoad && postsMap.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-load-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-load-body\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          style: {\n            color: 'white'\n          },\n          className: \"fa-solid fa-spinner fa-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), noPosts && postsMap.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"noposts-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No posts to show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Follow some Users to populate For You page!!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa-solid fa-hippo fa-bounce\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), !initialLoad && postsMap.map((post, index) => {\n      if (postsMap.length === index + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: lastPostElementRef,\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this);\n      }\n    }), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-load-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-load-body\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-spinner fa-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(DashboardPartial, \"FhMO6Dte4+Cgj586Be6c5W4Wfmo=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n_c = DashboardPartial;\nexport default DashboardPartial;\nvar _c;\n$RefreshReg$(_c, \"DashboardPartial\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useRef","useCallback","useDispatch","useSelector","Redirect","useParams","postActions","jsxDEV","_jsxDEV","Fragment","_Fragment","DashboardPartial","_ref","_s","type","sessionUser","state","session","user","dispatch","postsMap","setPostsMap","pageNumber","setPageNumber","loading","setLoading","hasMore","setHasMore","error","setError","morePosts","setMorePosts","initialLoad","setInitialLoad","noPosts","setNoPosts","observer","to","fileName","_jsxFileName","lineNumber","columnNumber","lastPostElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","clearPosts","setTimeout","fetchPosts","then","res","postsleft","postsLeft","posts","updatePostsMap","newPosts","stateCopy","Object","values","forEach","post","postIndex","findIndex","origPost","id","existingPostIds","map","filteredNewPosts","filter","includes","sort","post1","post2","commentcount","comentcount","newState","uniqueState","index","storeIndex","storePost","push","splice","length","postsToShow","children","className","style","color","ref","profile","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/DashBoardPartial.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect,useParams} from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst DashboardPartial = ({type}) =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    const [postsMap,setPostsMap] = useState([]);\n    const [pageNumber,setPageNumber]=useState(1);\n    const [loading,setLoading] = useState(true);\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState(false);\n    const [morePosts,setMorePosts]=useState(true);\n    const [initialLoad,setInitialLoad] = useState(false);\n    const [noPosts,setNoPosts] = useState(false);\n    const observer = useRef();\n    if ((type==='foryou'||type==='trending') && !sessionUser){\n        <Redirect to='/explore/preview'/>\n    }\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return ;\n        if(observer.current) observer.current.disconnect();\n        if(!morePosts) return;\n        \n        observer.current = new IntersectionObserver(entries =>{\n            if (entries[0].isIntersecting && morePosts) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.observe(node);\n    },[loading,morePosts]);\n\n    useEffect(()=>{\n        setPostsMap([]);\n    },[])\n    useEffect(()=>{\n        setPostsMap([]);\n        setPageNumber(1);\n\n        \n        dispatch(postActions.clearPosts());\n        setTimeout(()=>{\n        dispatch(postActions.fetchPosts(pageNumber,type))\n            .then(res=>{\n                setPostsMap([]);\n                setMorePosts(res.postsleft.postsLeft);\n                if (!res.posts){\n                    setNoPosts(true);\n                } else setNoPosts(false);\n            })\n         },500 )\n         return ()=>{\n            setPostsMap([]);\n         }\n    },[type])\n   \n    const posts = useSelector(state=>state.posts);\n\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setLoading(true);\n        setError(false);\n        if(pageNumber!==1){\n        dispatch(postActions.fetchPosts(pageNumber,type))\n            .then( (res) =>{\n                setMorePosts(res.postsleft.postsLeft);\n                setLoading(false);\n    \n            })\n        }else{\n            setLoading(false);\n        }\n    },[pageNumber]);\n    const updatePostsMap = (newPosts, type) => {\n        setPostsMap((state) => {\n          const stateCopy = [...state];\n    \n          // Update existing posts\n          Object.values(newPosts).forEach((post) => {\n            const postIndex = stateCopy.findIndex((origPost) => origPost.id === post.id);\n            if (postIndex !== -1) {\n              stateCopy[postIndex] = { ...post };\n            }\n          });\n    \n          // Filter and sort new posts\n          const existingPostIds = state.map((post) => post.id);\n          const filteredNewPosts = Object.values(newPosts).filter((post) => !existingPostIds.includes(post.id));\n    \n          if (type === 'trending') {\n            filteredNewPosts.sort((post1, post2) => {\n              return post1.commentcount + post1.comentcount < post2.comentcount + post2.comentcount ? 1 : post1.commentcount + post1.comentcount > post2.comentcount + post2.comentcount ? -1 : 0;\n            });\n          }\n    \n          // Concatenate existing posts with new posts\n          const newState = [...stateCopy, ...filteredNewPosts];\n    \n          // Remove duplicates\n          const uniqueState = newState.filter((post, index) => {\n            const storeIndex = Object.values(newPosts).findIndex((storePost) => storePost.id === post.id);\n            return storeIndex === index;\n          });\n    \n          return uniqueState;\n        });\n      };\n    useEffect(()=>{\n        // setLoading(true);\n        \n        setPostsMap(state=>{\n            const stateCopy=[...state];\n            Object.values(posts).forEach ((post)=>{\n                //update info for each post \n                const postIndex = stateCopy.findIndex((origPost)=>origPost.id===post.id)\n                if (postIndex!==-1){\n                    stateCopy[postIndex]={\n                        ...post\n                    };\n                }\n            })\n            const existingPostIds = state.map((post)=>post.id);\n            const newPosts = Object.values(posts).filter(\n                (post)=> !existingPostIds.includes(post.id)\n                )\n            if (type==='trending'){\n                newPosts.sort((post1,post2)=>{\n                   return (post1.commentcount+post1.comentcount)<(post2.comentcount+post2.comentcount) ? 1 : (post1.commentcount+post1.comentcount)>(post2.comentcount+post2.comentcount) ? -1 : 0;\n                })\n            }\n            const newState=[];\n            [...stateCopy,...newPosts].forEach((post)=>{\n                newState.push(post);\n            })\n            newState.forEach((post,index)=>{\n                const storeIndex=Object.values(posts).findIndex((storePost)=>storePost.id===post.id)\n                if (storeIndex===-1){\n                    newState.splice(index,1);\n                }\n            })\n            return newState;\n        })\n        // setLoading(false);\n    },[posts]);\n\n    useEffect(()=>{\n        if (postsMap.length===0 && initialLoad){\n            setInitialLoad(true);\n        } else setInitialLoad(false);\n    },[postsMap])\n    const postsToShow=Object.values(posts);\n    \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n\n    return (\n        <>\n         { !initialLoad && postsMap.length===0 &&\n            <div className='post-load-container'>\n                <div className='post-load-body'>\n                    <i style={{color:'white'}}className=\"fa-solid fa-spinner fa-spin\"></i>\n                </div>\n            </div>}\n        { noPosts && postsMap.length===0 &&\n            <div className='noposts-message'>\n                <h2>No posts to show</h2>\n                <h2>Follow some Users to populate For You page!!!</h2>\n                <i className=\"fa-solid fa-hippo fa-bounce\"></i>\n            </div>\n        }\n        {!initialLoad && postsMap.map ((post,index)=>{\n            if (postsMap.length === index +1 ) {\n                return (\n                    <div ref={lastPostElementRef} key={post.id} className='postMain'>\n                        <ShowPost  post={post} profile={false}/>\n                    </div>)\n            } else {\n                return( \n                    <div className='postMain' key={post.id}>\n                        <ShowPost  post={post} profile={false}/>\n                    </div>\n                )\n            }\n        })}\n        {loading && \n            <div className='post-load-container'>\n                <div className='post-load-body'>\n                    <i className=\"fa-solid fa-spinner fa-spin\"></i>\n                </div>\n            </div>}\n        </>\n    );\n\n\n\n\n}\n\nexport default DashboardPartial;"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,mBAAmB;AACxC,SAASC,SAAS,EAACC,QAAQ,EAACC,MAAM,EAACC,WAAW,QAAQ,OAAO;AAC7D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,EAACC,SAAS,QAAO,kBAAkB;AACpD,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACjD,MAAMC,gBAAgB,GAAGC,IAAA,IAAW;EAAAC,EAAA;EAAA,IAAV;IAACC;EAAI,CAAC,GAAAF,IAAA;EAC5B,MAAMG,WAAW,GAAGZ,WAAW,CAACa,KAAK,IAAEA,KAAK,CAACC,OAAO,CAACC,IAAI,CAAC;EAC1D,MAAMC,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACkB,QAAQ,EAACC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACuB,UAAU,EAACC,aAAa,CAAC,GAACxB,QAAQ,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACyB,OAAO,EAACC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAC3C,MAAM,CAAC2B,OAAO,EAACC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EAC5C,MAAM,CAAC6B,KAAK,EAACC,QAAQ,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EACxC,MAAM,CAAC+B,SAAS,EAACC,YAAY,CAAC,GAAChC,QAAQ,CAAC,IAAI,CAAC;EAC7C,MAAM,CAACiC,WAAW,EAACC,cAAc,CAAC,GAAGlC,QAAQ,CAAC,KAAK,CAAC;EACpD,MAAM,CAACmC,OAAO,EAACC,UAAU,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC;EAC5C,MAAMqC,QAAQ,GAAGpC,MAAM,CAAC,CAAC;EACzB,IAAI,CAACc,IAAI,KAAG,QAAQ,IAAEA,IAAI,KAAG,UAAU,KAAK,CAACC,WAAW,EAAC;IACrD,aAAAP,OAAA,CAACJ,QAAQ;MAACiC,EAAE,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EACrC;EACA,MAAMC,kBAAkB,GAAGzC,WAAW,CAAC0C,IAAI,IAAE;IACzC,IAAGnB,OAAO,EAAE;IACZ,IAAGY,QAAQ,CAACQ,OAAO,EAAER,QAAQ,CAACQ,OAAO,CAACC,UAAU,CAAC,CAAC;IAClD,IAAG,CAACf,SAAS,EAAE;IAEfM,QAAQ,CAACQ,OAAO,GAAG,IAAIE,oBAAoB,CAACC,OAAO,IAAG;MAClD,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACC,cAAc,IAAIlB,SAAS,EAAE;QACxCP,aAAa,CAAC0B,cAAc,IAAGA,cAAc,GAAE,CAAE,CAAC;MACtD;IACJ,CAAC,CAAC;IACF,IAAIN,IAAI,EAAEP,QAAQ,CAACQ,OAAO,CAACM,OAAO,CAACP,IAAI,CAAC;EAC5C,CAAC,EAAC,CAACnB,OAAO,EAACM,SAAS,CAAC,CAAC;EAEtBhC,SAAS,CAAC,MAAI;IACVuB,WAAW,CAAC,EAAE,CAAC;EACnB,CAAC,EAAC,EAAE,CAAC;EACLvB,SAAS,CAAC,MAAI;IACVuB,WAAW,CAAC,EAAE,CAAC;IACfE,aAAa,CAAC,CAAC,CAAC;IAGhBJ,QAAQ,CAACb,WAAW,CAAC6C,UAAU,CAAC,CAAC,CAAC;IAClCC,UAAU,CAAC,MAAI;MACfjC,QAAQ,CAACb,WAAW,CAAC+C,UAAU,CAAC/B,UAAU,EAACR,IAAI,CAAC,CAAC,CAC5CwC,IAAI,CAACC,GAAG,IAAE;QACPlC,WAAW,CAAC,EAAE,CAAC;QACfU,YAAY,CAACwB,GAAG,CAACC,SAAS,CAACC,SAAS,CAAC;QACrC,IAAI,CAACF,GAAG,CAACG,KAAK,EAAC;UACXvB,UAAU,CAAC,IAAI,CAAC;QACpB,CAAC,MAAMA,UAAU,CAAC,KAAK,CAAC;MAC5B,CAAC,CAAC;IACL,CAAC,EAAC,GAAI,CAAC;IACP,OAAO,MAAI;MACRd,WAAW,CAAC,EAAE,CAAC;IAClB,CAAC;EACN,CAAC,EAAC,CAACP,IAAI,CAAC,CAAC;EAET,MAAM4C,KAAK,GAAGvD,WAAW,CAACa,KAAK,IAAEA,KAAK,CAAC0C,KAAK,CAAC;;EAE7C;EACA;EACA5D,SAAS,CAAC,MAAI;IACV2B,UAAU,CAAC,IAAI,CAAC;IAChBI,QAAQ,CAAC,KAAK,CAAC;IACf,IAAGP,UAAU,KAAG,CAAC,EAAC;MAClBH,QAAQ,CAACb,WAAW,CAAC+C,UAAU,CAAC/B,UAAU,EAACR,IAAI,CAAC,CAAC,CAC5CwC,IAAI,CAAGC,GAAG,IAAI;QACXxB,YAAY,CAACwB,GAAG,CAACC,SAAS,CAACC,SAAS,CAAC;QACrChC,UAAU,CAAC,KAAK,CAAC;MAErB,CAAC,CAAC;IACN,CAAC,MAAI;MACDA,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAC,CAACH,UAAU,CAAC,CAAC;EACf,MAAMqC,cAAc,GAAGA,CAACC,QAAQ,EAAE9C,IAAI,KAAK;IACvCO,WAAW,CAAEL,KAAK,IAAK;MACrB,MAAM6C,SAAS,GAAG,CAAC,GAAG7C,KAAK,CAAC;;MAE5B;MACA8C,MAAM,CAACC,MAAM,CAACH,QAAQ,CAAC,CAACI,OAAO,CAAEC,IAAI,IAAK;QACxC,MAAMC,SAAS,GAAGL,SAAS,CAACM,SAAS,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,EAAE,KAAKJ,IAAI,CAACI,EAAE,CAAC;QAC5E,IAAIH,SAAS,KAAK,CAAC,CAAC,EAAE;UACpBL,SAAS,CAACK,SAAS,CAAC,GAAG;YAAE,GAAGD;UAAK,CAAC;QACpC;MACF,CAAC,CAAC;;MAEF;MACA,MAAMK,eAAe,GAAGtD,KAAK,CAACuD,GAAG,CAAEN,IAAI,IAAKA,IAAI,CAACI,EAAE,CAAC;MACpD,MAAMG,gBAAgB,GAAGV,MAAM,CAACC,MAAM,CAACH,QAAQ,CAAC,CAACa,MAAM,CAAER,IAAI,IAAK,CAACK,eAAe,CAACI,QAAQ,CAACT,IAAI,CAACI,EAAE,CAAC,CAAC;MAErG,IAAIvD,IAAI,KAAK,UAAU,EAAE;QACvB0D,gBAAgB,CAACG,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;UACtC,OAAOD,KAAK,CAACE,YAAY,GAAGF,KAAK,CAACG,WAAW,GAAGF,KAAK,CAACE,WAAW,GAAGF,KAAK,CAACE,WAAW,GAAG,CAAC,GAAGH,KAAK,CAACE,YAAY,GAAGF,KAAK,CAACG,WAAW,GAAGF,KAAK,CAACE,WAAW,GAAGF,KAAK,CAACE,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC;QACrL,CAAC,CAAC;MACJ;;MAEA;MACA,MAAMC,QAAQ,GAAG,CAAC,GAAGnB,SAAS,EAAE,GAAGW,gBAAgB,CAAC;;MAEpD;MACA,MAAMS,WAAW,GAAGD,QAAQ,CAACP,MAAM,CAAC,CAACR,IAAI,EAAEiB,KAAK,KAAK;QACnD,MAAMC,UAAU,GAAGrB,MAAM,CAACC,MAAM,CAACH,QAAQ,CAAC,CAACO,SAAS,CAAEiB,SAAS,IAAKA,SAAS,CAACf,EAAE,KAAKJ,IAAI,CAACI,EAAE,CAAC;QAC7F,OAAOc,UAAU,KAAKD,KAAK;MAC7B,CAAC,CAAC;MAEF,OAAOD,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC;EACHnF,SAAS,CAAC,MAAI;IACV;;IAEAuB,WAAW,CAACL,KAAK,IAAE;MACf,MAAM6C,SAAS,GAAC,CAAC,GAAG7C,KAAK,CAAC;MAC1B8C,MAAM,CAACC,MAAM,CAACL,KAAK,CAAC,CAACM,OAAO,CAAGC,IAAI,IAAG;QAClC;QACA,MAAMC,SAAS,GAAGL,SAAS,CAACM,SAAS,CAAEC,QAAQ,IAAGA,QAAQ,CAACC,EAAE,KAAGJ,IAAI,CAACI,EAAE,CAAC;QACxE,IAAIH,SAAS,KAAG,CAAC,CAAC,EAAC;UACfL,SAAS,CAACK,SAAS,CAAC,GAAC;YACjB,GAAGD;UACP,CAAC;QACL;MACJ,CAAC,CAAC;MACF,MAAMK,eAAe,GAAGtD,KAAK,CAACuD,GAAG,CAAEN,IAAI,IAAGA,IAAI,CAACI,EAAE,CAAC;MAClD,MAAMT,QAAQ,GAAGE,MAAM,CAACC,MAAM,CAACL,KAAK,CAAC,CAACe,MAAM,CACvCR,IAAI,IAAI,CAACK,eAAe,CAACI,QAAQ,CAACT,IAAI,CAACI,EAAE,CAC1C,CAAC;MACL,IAAIvD,IAAI,KAAG,UAAU,EAAC;QAClB8C,QAAQ,CAACe,IAAI,CAAC,CAACC,KAAK,EAACC,KAAK,KAAG;UAC1B,OAAQD,KAAK,CAACE,YAAY,GAACF,KAAK,CAACG,WAAW,GAAGF,KAAK,CAACE,WAAW,GAACF,KAAK,CAACE,WAAY,GAAG,CAAC,GAAIH,KAAK,CAACE,YAAY,GAACF,KAAK,CAACG,WAAW,GAAGF,KAAK,CAACE,WAAW,GAACF,KAAK,CAACE,WAAY,GAAG,CAAC,CAAC,GAAG,CAAC;QAClL,CAAC,CAAC;MACN;MACA,MAAMC,QAAQ,GAAC,EAAE;MACjB,CAAC,GAAGnB,SAAS,EAAC,GAAGD,QAAQ,CAAC,CAACI,OAAO,CAAEC,IAAI,IAAG;QACvCe,QAAQ,CAACK,IAAI,CAACpB,IAAI,CAAC;MACvB,CAAC,CAAC;MACFe,QAAQ,CAAChB,OAAO,CAAC,CAACC,IAAI,EAACiB,KAAK,KAAG;QAC3B,MAAMC,UAAU,GAACrB,MAAM,CAACC,MAAM,CAACL,KAAK,CAAC,CAACS,SAAS,CAAEiB,SAAS,IAAGA,SAAS,CAACf,EAAE,KAAGJ,IAAI,CAACI,EAAE,CAAC;QACpF,IAAIc,UAAU,KAAG,CAAC,CAAC,EAAC;UAChBH,QAAQ,CAACM,MAAM,CAACJ,KAAK,EAAC,CAAC,CAAC;QAC5B;MACJ,CAAC,CAAC;MACF,OAAOF,QAAQ;IACnB,CAAC,CAAC;IACF;EACJ,CAAC,EAAC,CAACtB,KAAK,CAAC,CAAC;EAEV5D,SAAS,CAAC,MAAI;IACV,IAAIsB,QAAQ,CAACmE,MAAM,KAAG,CAAC,IAAIvD,WAAW,EAAC;MACnCC,cAAc,CAAC,IAAI,CAAC;IACxB,CAAC,MAAMA,cAAc,CAAC,KAAK,CAAC;EAChC,CAAC,EAAC,CAACb,QAAQ,CAAC,CAAC;EACb,MAAMoE,WAAW,GAAC1B,MAAM,CAACC,MAAM,CAACL,KAAK,CAAC;;EAEtC;EACA;EACA;EACA;EACA;;EAEA,oBACIlD,OAAA,CAAAE,SAAA;IAAA+E,QAAA,GACG,CAACzD,WAAW,IAAIZ,QAAQ,CAACmE,MAAM,KAAG,CAAC,iBAClC/E,OAAA;MAAKkF,SAAS,EAAC,qBAAqB;MAAAD,QAAA,eAChCjF,OAAA;QAAKkF,SAAS,EAAC,gBAAgB;QAAAD,QAAA,eAC3BjF,OAAA;UAAGmF,KAAK,EAAE;YAACC,KAAK,EAAC;UAAO,CAAE;UAAAF,SAAS,EAAC;QAA6B;UAAApD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EACRP,OAAO,IAAId,QAAQ,CAACmE,MAAM,KAAG,CAAC,iBAC5B/E,OAAA;MAAKkF,SAAS,EAAC,iBAAiB;MAAAD,QAAA,gBAC5BjF,OAAA;QAAAiF,QAAA,EAAI;MAAgB;QAAAnD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBjC,OAAA;QAAAiF,QAAA,EAAI;MAA6C;QAAAnD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtDjC,OAAA;QAAGkF,SAAS,EAAC;MAA6B;QAAApD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EAET,CAACT,WAAW,IAAIZ,QAAQ,CAACmD,GAAG,CAAE,CAACN,IAAI,EAACiB,KAAK,KAAG;MACzC,IAAI9D,QAAQ,CAACmE,MAAM,KAAKL,KAAK,GAAE,CAAC,EAAG;QAC/B,oBACI1E,OAAA;UAAKqF,GAAG,EAAEnD,kBAAmB;UAAegD,SAAS,EAAC,UAAU;UAAAD,QAAA,eAC5DjF,OAAA,CAACX,QAAQ;YAAEoE,IAAI,EAAEA,IAAK;YAAC6B,OAAO,EAAE;UAAM;YAAAxD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAC,GADTwB,IAAI,CAACI,EAAE;UAAA/B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAErC,CAAC;MACd,CAAC,MAAM;QACH,oBACIjC,OAAA;UAAKkF,SAAS,EAAC,UAAU;UAAAD,QAAA,eACrBjF,OAAA,CAACX,QAAQ;YAAEoE,IAAI,EAAEA,IAAK;YAAC6B,OAAO,EAAE;UAAM;YAAAxD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC;QAAC,GADbwB,IAAI,CAACI,EAAE;UAAA/B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEjC,CAAC;MAEd;IACJ,CAAC,CAAC,EACDjB,OAAO,iBACJhB,OAAA;MAAKkF,SAAS,EAAC,qBAAqB;MAAAD,QAAA,eAChCjF,OAAA;QAAKkF,SAAS,EAAC,gBAAgB;QAAAD,QAAA,eAC3BjF,OAAA;UAAGkF,SAAS,EAAC;QAA6B;UAAApD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA,eACR,CAAC;AAMX,CAAC;AAAA5B,EAAA,CApMKF,gBAAgB;EAAA,QACER,WAAW,EACdD,WAAW,EAkDdC,WAAW;AAAA;AAAA4F,EAAA,GApDvBpF,gBAAgB;AAsMtB,eAAeA,gBAAgB;AAAC,IAAAoF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}