{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/Spotlight.js\",\n  _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nimport * as userActions from '../../store/user';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SpotLightDashboard = () => {\n  _s();\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts);\n  // can write a fetch that sorts by likes.count descending. limit 10\n  // select random ones\n\n  useEffect(() => {\n    dispatch(userActions.fetchUser(10));\n  }, []);\n  const postsToShow = Object.values(posts);\n  const trendingPosts = [];\n  console.log(postsToShow);\n  // if (sessionUser) return <Redirect to=\"/\" />;\n  //all Today dashboard will be in here\n  //select posts that were reblogged by \n  //todayonmumblr\n  // in seeding, need to have posts reblogged by todayonmumblr\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: postsToShow.map(post => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postMain\",\n        children: /*#__PURE__*/_jsxDEV(ShowPost, {\n          post: post,\n          profile: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(SpotLightDashboard, \"TcPKI1oOhnKE7XxtlQpGTlpWhIA=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n_c = SpotLightDashboard;\nexport default SpotLightDashboard;\nvar _c;\n$RefreshReg$(_c, \"SpotLightDashboard\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useDispatch","useSelector","Redirect","postActions","userActions","jsxDEV","_jsxDEV","Fragment","_Fragment","SpotLightDashboard","_s","sessionUser","state","session","user","dispatch","posts","fetchUser","postsToShow","Object","values","trendingPosts","console","log","children","map","post","className","profile","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/Spotlight.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nimport * as userActions from '../../store/user'\nconst SpotLightDashboard = () =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    const posts = useSelector(state=>state.posts);\n    // can write a fetch that sorts by likes.count descending. limit 10\n    // select random ones\n   \n    useEffect(()=>{\n        dispatch(userActions.fetchUser(10));\n    },[]);\n    const postsToShow=Object.values(posts);\n    const trendingPosts=[];\n    console.log(postsToShow);\n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    return (\n        <>\n        {postsToShow.map ((post)=>{\n        return (\n            <div className='postMain' key={post.id}>\n                <ShowPost post={post} profile={false}/>\n            </div>\n        )\n        }\n        )\n        }\n        </>\n    );\n\n\n\n\n}\n\nexport default SpotLightDashboard;"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,mBAAmB;AACxC,SAASC,SAAS,EAACC,QAAQ,QAAQ,OAAO;AAC1C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAChD,OAAO,KAAKC,WAAW,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC/C,MAAMC,kBAAkB,GAAGA,CAAA,KAAK;EAAAC,EAAA;EAC5B,MAAMC,WAAW,GAAGV,WAAW,CAACW,KAAK,IAAEA,KAAK,CAACC,OAAO,CAACC,IAAI,CAAC;EAC1D,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAMgB,KAAK,GAAGf,WAAW,CAACW,KAAK,IAAEA,KAAK,CAACI,KAAK,CAAC;EAC7C;EACA;;EAEAlB,SAAS,CAAC,MAAI;IACViB,QAAQ,CAACX,WAAW,CAACa,SAAS,CAAC,EAAE,CAAC,CAAC;EACvC,CAAC,EAAC,EAAE,CAAC;EACL,MAAMC,WAAW,GAACC,MAAM,CAACC,MAAM,CAACJ,KAAK,CAAC;EACtC,MAAMK,aAAa,GAAC,EAAE;EACtBC,OAAO,CAACC,GAAG,CAACL,WAAW,CAAC;EACxB;EACA;EACA;EACA;EACA;EACA,oBACIZ,OAAA,CAAAE,SAAA;IAAAgB,QAAA,EACCN,WAAW,CAACO,GAAG,CAAGC,IAAI,IAAG;MAC1B,oBACIpB,OAAA;QAAKqB,SAAS,EAAC,UAAU;QAAAH,QAAA,eACrBlB,OAAA,CAACT,QAAQ;UAAC6B,IAAI,EAAEA,IAAK;UAACE,OAAO,EAAE;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC,GADZN,IAAI,CAACO,EAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjC,CAAC;IAEV,CACA;EAAC,gBAEC,CAAC;AAMX,CAAC;AAAAtB,EAAA,CAnCKD,kBAAkB;EAAA,QACAR,WAAW,EACdD,WAAW,EACdC,WAAW;AAAA;AAAAiC,EAAA,GAHvBzB,kBAAkB;AAqCxB,eAAeA,kBAAkB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}