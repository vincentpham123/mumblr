{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js\",\n  _s = $RefreshSig$();\n//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\n\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewPostInput = _ref => {\n  _s();\n  let {\n    handleKeyDown,\n    index\n  } = _ref;\n  const [type, setType] = useState('bob');\n  const [showInputMenu] = useState(false);\n  const pRef = useRef(null);\n  //this is for setting the menu to true, if the p tag is focused and not empty \n  const handleFocus = () => {};\n  // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n  //should i use a useRef that will track the innerText\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputContainer\",\n      children: type === 'text' && /*#__PURE__*/_jsxDEV(\"p\", {\n        ref: pRef,\n        \"data-type\": index,\n        onKeyDown: event => handleKeyDown(event),\n        id: `paragraph-${index}`,\n        className: \"contentEdit text-paragraph\",\n        contentEditable: \"true\",\n        children: \"test my component\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(NewPostInput, \"bDjcsEJd/WKUdV59AnMbWIxni8Q=\");\n_c = NewPostInput;\nexport default NewPostInput;\nvar _c;\n$RefreshReg$(_c, \"NewPostInput\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","NewPostInput","_ref","_s","handleKeyDown","index","type","setType","showInputMenu","pRef","handleFocus","children","className","ref","onKeyDown","event","id","contentEditable","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js"],"sourcesContent":["//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\n\nimport { useState, useRef } from \"react\";\nconst NewPostInput = ({handleKeyDown,index}) => {\n    const [type,setType] = useState('bob');\n    const [showInputMenu] = useState(false);\n    const pRef = useRef(null);\n    //this is for setting the menu to true, if the p tag is focused and not empty \n    const handleFocus =()=>{\n        \n    }\n    // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n    //should i use a useRef that will track the innerText\n    return (\n        <>\n            <div className='inputContainer'>\n                {type==='text' && <p  ref={pRef} key={index} data-type={index} onKeyDown={(event)=>handleKeyDown(event)} id={`paragraph-${index}`}  className='contentEdit text-paragraph' contentEditable='true'>test my component</p>}\n            </div>\n        </>\n        )\n\n}\n\nexport default NewPostInput;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACzC,MAAMC,YAAY,GAAGC,IAAA,IAA2B;EAAAC,EAAA;EAAA,IAA1B;IAACC,aAAa;IAACC;EAAK,CAAC,GAAAH,IAAA;EACvC,MAAM,CAACI,IAAI,EAACC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACtC,MAAM,CAACa,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAMc,IAAI,GAAGb,MAAM,CAAC,IAAI,CAAC;EACzB;EACA,MAAMc,WAAW,GAAEA,CAAA,KAAI,CAEvB,CAAC;EACD;EACA;EACA,oBACIZ,OAAA,CAAAE,SAAA;IAAAW,QAAA,eACIb,OAAA;MAAKc,SAAS,EAAC,gBAAgB;MAAAD,QAAA,EAC1BL,IAAI,KAAG,MAAM,iBAAIR,OAAA;QAAIe,GAAG,EAAEJ,IAAK;QAAa,aAAWJ,KAAM;QAACS,SAAS,EAAGC,KAAK,IAAGX,aAAa,CAACW,KAAK,CAAE;QAACC,EAAE,EAAG,aAAYX,KAAM,EAAE;QAAEO,SAAS,EAAC,4BAA4B;QAACK,eAAe,EAAC,MAAM;QAAAN,QAAA,EAAC;MAAiB,GAA7KN,KAAK;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2K;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtN;EAAC,gBACR,CAAC;AAGX,CAAC;AAAAlB,EAAA,CAlBKF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAoBlB,eAAeA,YAAY;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}