{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js\",\n  _s = $RefreshSig$();\n//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\nimport './newpostinputs.css';\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewPostInput = _ref => {\n  _s();\n  let {\n    handleKeyDown,\n    index\n  } = _ref;\n  const [type, setType] = useState('text');\n  const [showInputMenu,, setInputMenu] = useState(false);\n  const [photoIndex, setPhotoIndex] = useState(0);\n  const [textIcon, setTextIcon] = useState('');\n  const [photoIcon, setPhotoIcon] = useState('');\n  const [videoIcon, setVideoIcon] = useState('');\n  const [linkIcon, setLinkIcon] = useState('');\n\n  // need to pass in 4 onchange functions for each \n  const pRef = useRef(null);\n  //this is for setting the menu to true, if the p tag is focused and not empty \n  const handleFocus = () => {\n    setInputMenu(true);\n  };\n  const ReturnToText = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  };\n  const PhotoButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"photo-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"photofilebutton\",\n        onClick: () => document.getElementById('photo-input').click(),\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-image fileicon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"filetext\",\n          children: \"Upload Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          id: \"photo-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  };\n  // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n  //should i use a useRef that will track the innerText\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputBody\",\n        children: [type === 'text' && /*#__PURE__*/_jsxDEV(\"p\", {\n          ref: pRef,\n          \"data-type\": index,\n          onKeyDown: event => handleKeyDown(event),\n          id: `paragraph-${index}`,\n          className: \"contentEdit text-paragraph\",\n          contentEditable: \"true\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 41\n        }, this), type === 'photo' && /*#__PURE__*/_jsxDEV(PhotoButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), type === 'text' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputmenucontainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputmenubody\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inputmenucontent\",\n            children: [type !== 'text' && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('text'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fa-solid fa-a fa-lg inputicons ${textIcon}`,\n                style: {\n                  backgroundColor: 'transparent',\n                  color: 'RGB(var(--blue))'\n                },\n                onMouseEnter: () => setTextIcon('fa-bounce'),\n                onMouseLeave: () => setTextIcon('')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 49\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('photo'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fa-solid fa-image fa-lg inputicons ${photoIcon}`,\n                style: {\n                  backgroundColor: 'transparent',\n                  color: 'RGB(var(--red))'\n                },\n                onMouseEnter: () => setPhotoIcon('fa-bounce'),\n                onMouseLeave: () => setPhotoIcon('')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('link'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fa-solid fa-link fa-lg inputicons ${linkIcon}`,\n                style: {\n                  backgroundColor: 'transparent',\n                  color: 'RGB(var(--green))'\n                },\n                onMouseEnter: () => setLinkIcon('fa-bounce'),\n                onMouseLeave: () => setLinkIcon('')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"inputbuttons\",\n              onClick: () => setType('link'),\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: `fa-solid fa-video fa-lg inputicons ${videoIcon}`,\n                style: {\n                  backgroundColor: 'transparent',\n                  color: 'RGB(var(--purple))'\n                },\n                onMouseEnter: () => setVideoIcon('fa-bounce'),\n                onMouseLeave: () => setVideoIcon('')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(NewPostInput, \"q1M7UWBHkW5+SqJFBQXhXiEDiig=\");\n_c = NewPostInput;\nexport default NewPostInput;\nvar _c;\n$RefreshReg$(_c, \"NewPostInput\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","NewPostInput","_ref","_s","handleKeyDown","index","type","setType","showInputMenu","setInputMenu","photoIndex","setPhotoIndex","textIcon","setTextIcon","photoIcon","setPhotoIcon","videoIcon","setVideoIcon","linkIcon","setLinkIcon","pRef","handleFocus","ReturnToText","fileName","_jsxFileName","lineNumber","columnNumber","PhotoButton","className","children","onClick","document","getElementById","click","id","ref","onKeyDown","event","contentEditable","style","backgroundColor","color","onMouseEnter","onMouseLeave","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js"],"sourcesContent":["//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\nimport './newpostinputs.css';\nimport { useState, useRef } from \"react\";\nconst NewPostInput = ({ handleKeyDown, index }) => {\n    const [type, setType] = useState('text');\n    const [showInputMenu, , setInputMenu] = useState(false);\n    const [photoIndex,setPhotoIndex] = useState(0);\n    const [textIcon,setTextIcon] = useState('');\n    const [photoIcon,setPhotoIcon] = useState('');\n    const [videoIcon,setVideoIcon] = useState('');\n    const [linkIcon,setLinkIcon] = useState('');\n\n    // need to pass in 4 onchange functions for each \n    const pRef = useRef(null);\n    //this is for setting the menu to true, if the p tag is focused and not empty \n    const handleFocus = () => {\n        setInputMenu(true);\n    }\n    \n    const ReturnToText =() =>{\n        return(\n            <button>\n                \n            </button>\n        )\n    }\n    const PhotoButton = () => {\n        return (\n\n            <div className='photo-input-container'>\n                <button className='photofilebutton' onClick={()=>document.getElementById('photo-input').click()}>\n                <i className=\"fa-solid fa-image fileicon\"></i>\n                <span className='filetext'>Upload Image</span>\n                <input type='file' id='photo-input' ></input>\n                </button>\n                \n\n            </div>\n\n        )\n    }\n    // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n    //should i use a useRef that will track the innerText\n    return (\n        <>\n            <div className='input-container'>\n                <div className='inputBody'>\n                    {type === 'text' && <p ref={pRef} key={index} data-type={index} onKeyDown={(event) => handleKeyDown(event)} id={`paragraph-${index}`} className='contentEdit text-paragraph' contentEditable='true'></p>}\n                    {type === 'photo' && <PhotoButton />}\n                </div>\n                {type ==='text' && \n                <div className='inputmenucontainer'>\n                    <div className='inputmenubody'>\n                        <div className='inputmenucontent'>\n                            {type !== 'text' && <button className='inputbuttons' onClick={() => setType('text')}>\n                                <i className={`fa-solid fa-a fa-lg inputicons ${textIcon}`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--blue))' }}\n                                onMouseEnter={()=>setTextIcon('fa-bounce')} onMouseLeave={()=>setTextIcon('')}></i>\n                            </button>}\n                            <button className='inputbuttons' onClick={() => setType('photo')}>\n                                <i className={`fa-solid fa-image fa-lg inputicons ${photoIcon}`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--red))' }}\n                                onMouseEnter={()=>setPhotoIcon('fa-bounce')} onMouseLeave={()=>setPhotoIcon('')}></i>\n                            </button>\n                            <button className='inputbuttons' onClick={() => setType('link')}>\n                                <i className= {`fa-solid fa-link fa-lg inputicons ${linkIcon}`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--green))' }}\n                                onMouseEnter={()=>setLinkIcon('fa-bounce')} onMouseLeave={()=>setLinkIcon('')}></i>\n                            </button>\n                            <button className='inputbuttons' onClick={() => setType('link')}>\n                                <i className={`fa-solid fa-video fa-lg inputicons ${videoIcon}`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--purple))' }}\n                                onMouseEnter={()=>setVideoIcon('fa-bounce')} onMouseLeave={()=>setVideoIcon('')}></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                }\n            </div>\n        </>\n    )\n\n}\n\nexport default NewPostInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}