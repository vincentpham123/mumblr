{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostText.js\";\nimport './posttext.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostText = _ref => {\n  let {\n    post\n  } = _ref;\n  // need to check if post has a title\n  // if post has a title, then that will be the first child of post-paragraph and have bigger font\n\n  const breakdown = (body, title) => {\n    const array = body.split('\\n');\n    if (!title) {\n      return array.map((sentence, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-paragraph\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"textStrings\",\n            children: sentence\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 13\n        }, this);\n      });\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-paragraph\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posttext-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"post-title\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), breakdown(post.body)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_c = PostText;\nexport default PostText;\nvar _c;\n$RefreshReg$(_c, \"PostText\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","Fragment","_Fragment","PostText","_ref","post","breakdown","body","title","array","split","map","sentence","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostText.js"],"sourcesContent":["import './posttext.css';\nconst PostText = ({post}) => {\n    // need to check if post has a title\n    // if post has a title, then that will be the first child of post-paragraph and have bigger font\n    \n    const breakdown = (body, title) => {\n        const array = body.split('\\n');\n        if (!title){\n        return array.map((sentence,index)=>{\n            return(\n            <div key={index} className='post-paragraph'>\n                <p className='textStrings'>{sentence}</p>\n                <p></p>\n            </div>\n            )\n        })} else {\n            return (\n                <div key={index} className='post-paragraph'>\n                    <h1></h1>\n                </div>\n            )\n        }\n    }\n\n    return (\n        <>\n            <div className='posttext-body'>\n                <p className='post-title'>\n                    <h1>{post.title}</h1>\n                </p>\n                {breakdown(post.body)}\n            </div>\n        </>\n    )\n\n}\n\nexport default PostText;"],"mappings":";AAAA,OAAO,gBAAgB;AAAC,SAAAA,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACxB,MAAMC,QAAQ,GAAGC,IAAA,IAAY;EAAA,IAAX;IAACC;EAAI,CAAC,GAAAD,IAAA;EACpB;EACA;;EAEA,MAAME,SAAS,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC/B,MAAMC,KAAK,GAAGF,IAAI,CAACG,KAAK,CAAC,IAAI,CAAC;IAC9B,IAAI,CAACF,KAAK,EAAC;MACX,OAAOC,KAAK,CAACE,GAAG,CAAC,CAACC,QAAQ,EAACC,KAAK,KAAG;QAC/B,oBACAb,OAAA;UAAiBc,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBACvCf,OAAA;YAAGc,SAAS,EAAC,aAAa;YAAAC,QAAA,EAAEH;UAAQ;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzCnB,OAAA;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA,GAFDN,KAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGV,CAAC;MAEV,CAAC,CAAC;IAAA,CAAC,MAAM;MACL,oBACInB,OAAA;QAAiBc,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eACvCf,OAAA;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC,GADHN,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CAAC;IAEd;EACJ,CAAC;EAED,oBACInB,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACIf,OAAA;MAAKc,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC1Bf,OAAA;QAAGc,SAAS,EAAC,YAAY;QAAAC,QAAA,eACrBf,OAAA;UAAAe,QAAA,EAAKV,IAAI,CAACG;QAAK;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CAAC,EACHb,SAAS,CAACD,IAAI,CAACE,IAAI,CAAC;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB;EAAC,gBACR,CAAC;AAGX,CAAC;AAAAC,EAAA,GAlCKjB,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}