{"ast":null,"code":"var _jsxFileName = \"/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserDashBoard.js\",\n  _s = $RefreshSig$();\nimport ShowPost from \"../posts/showPost\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\n//instead of using fetchPosts, will use User posts with Params\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UserDashboard = _ref => {\n  _s();\n  let {\n    type\n  } = _ref;\n  const {\n    userid\n  } = useParams();\n  //params will contain id\n\n  const sessionUser = useSelector(state => state.session.user);\n  const dispatch = useDispatch();\n  const [postsMap, setPostsMap] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [loading, setLoading] = useState('test');\n  const [hasMore, setHasMore] = useState(false);\n  const [error, setError] = useState(false);\n  const [morePosts, setMorePosts] = useState(true);\n  const observer = useRef();\n  const lastPostElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    if (!morePosts) return;\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && morePosts) {\n        setPageNumber(prevPageNumber => prevPageNumber + 1);\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, morePosts]);\n  useEffect(() => {\n    setPostsMap([]);\n    dispatch(postActions.clearPosts());\n    dispatch(postActions.fetchPosts(pageNumber, type, userid)).then(res => {\n      setPostsMap([]);\n      setMorePosts(res.postsleft.postsLeft);\n    });\n  }, [type]);\n  const posts = useSelector(state => state.posts);\n\n  //will trigger a dispatch for more data when\n  // pagenumber changes\n  useEffect(() => {\n    setError(false);\n    // dispatch(postActions.clearPosts());\n    dispatch(postActions.fetchPosts(pageNumber, type, userid)).then(res => {\n      setMorePosts(res.postsleft.postsLeft);\n    });\n  }, [pageNumber]);\n  useEffect(() => {\n    setLoading(true);\n    setPostsMap(state => {\n      const stateCopy = [...state];\n      Object.values(posts).forEach(post => {\n        //update info for each post \n        const postIndex = stateCopy.findIndex(origPost => origPost.id === post.id);\n        if (postIndex !== -1) {\n          stateCopy[postIndex] = {\n            ...post\n          };\n        }\n      });\n      const existingPostIds = state.map(post => post.id);\n      const newPosts = Object.values(posts).filter(post => !existingPostIds.includes(post.id));\n      const newState = [];\n      [...stateCopy, ...newPosts].forEach(post => {\n        newState.push(post);\n      });\n      return newState;\n    });\n    setLoading(false);\n  }, [posts]);\n  const postsToShow = Object.values(posts);\n\n  // if (sessionUser) return <Redirect to=\"/\" />;\n  //all Today dashboard will be in here\n  //select posts that were reblogged by \n  //todayonmumblr\n  // in seeding, need to have posts reblogged by todayonmumblr\n  if (!posts) {\n    console.log('loading');\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [posts === 'test' && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 28\n    }, this), type === 'likes' && postsMap.length == 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"noposts-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No posts to show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Follow some Users to populate For You page!!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa-solid fa-hippo fa-bounce\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), postsMap.map((post, index) => {\n      if (postsMap.length === index + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: lastPostElementRef,\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"postMain\",\n          children: /*#__PURE__*/_jsxDEV(ShowPost, {\n            post: post,\n            profile: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this);\n      }\n    }), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-load-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-load-body\",\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-spinner fa-spin userload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(UserDashboard, \"7gX50hXpL4D0hI73OjRR8Kk3PBY=\", false, function () {\n  return [useParams, useSelector, useDispatch, useSelector];\n});\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["ShowPost","useEffect","useState","useRef","useCallback","useDispatch","useSelector","Redirect","useParams","postActions","jsxDEV","_jsxDEV","Fragment","_Fragment","UserDashboard","_ref","_s","type","userid","sessionUser","state","session","user","dispatch","postsMap","setPostsMap","pageNumber","setPageNumber","loading","setLoading","hasMore","setHasMore","error","setError","morePosts","setMorePosts","observer","lastPostElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","clearPosts","fetchPosts","then","res","postsleft","postsLeft","posts","stateCopy","Object","values","forEach","post","postIndex","findIndex","origPost","id","existingPostIds","map","newPosts","filter","includes","newState","push","postsToShow","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","index","ref","profile","_c","$RefreshReg$"],"sources":["/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserDashBoard.js"],"sourcesContent":["import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect,useParams} from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\n//instead of using fetchPosts, will use User posts with Params\n\nconst UserDashboard = ({type}) =>{\n    const {userid} = useParams();\n    //params will contain id\n    \n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    const [postsMap,setPostsMap] = useState([]);\n    const [pageNumber,setPageNumber]=useState(1);\n    const [loading,setLoading] = useState('test');\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState(false);\n    const [morePosts,setMorePosts]=useState(true);\n    const observer = useRef();\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return ;\n        if(observer.current) observer.current.disconnect();\n        if(!morePosts) return;\n        \n        observer.current = new IntersectionObserver(entries =>{\n            if (entries[0].isIntersecting && morePosts) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.observe(node);\n    },[loading,morePosts]);\n    useEffect(()=>{\n        setPostsMap([]);\n        dispatch(postActions.clearPosts())\n        dispatch(postActions.fetchPosts(pageNumber,type,userid))\n            .then(res=>{\n                setPostsMap([]);\n                setMorePosts(res.postsleft.postsLeft);\n            })\n    },[type])\n   \n    const posts = useSelector(state=>state.posts);\n\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setError(false);\n        // dispatch(postActions.clearPosts());\n        dispatch(postActions.fetchPosts(pageNumber,type,userid))\n            .then( (res) =>{\n                setMorePosts(res.postsleft.postsLeft);\n            })\n    },[pageNumber]);\n    useEffect(()=>{\n        setLoading(true);\n        setPostsMap(state=>{\n            const stateCopy=[...state];\n            Object.values(posts).forEach ((post)=>{\n                //update info for each post \n                const postIndex = stateCopy.findIndex((origPost)=>origPost.id===post.id)\n                if (postIndex!==-1){\n                    stateCopy[postIndex]={...post};\n                }\n            })\n            const existingPostIds = state.map((post)=>post.id);\n            const newPosts = Object.values(posts).filter(\n                (post)=> !existingPostIds.includes(post.id)\n            )\n            const newState=[];\n            [...stateCopy,...newPosts].forEach((post)=>{\n                newState.push(post);\n            })\n            return newState;\n        })\n        setLoading(false);\n    },[posts])\n\n\n    const postsToShow=Object.values(posts);\n    \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    if (!posts){\n        console.log('loading')\n    }\n    return (\n        <>\n        {posts==='test' && <div><h1>Loading</h1></div> }\n        {type==='likes' && postsMap.length==0 &&\n        <div className='noposts-message'>\n                <h2>No posts to show</h2>\n                <h2>Follow some Users to populate For You page!!!</h2>\n                <i className=\"fa-solid fa-hippo fa-bounce\"></i>\n            </div>\n\n        }\n        {postsMap.map ((post,index)=>{\n            if (postsMap.length === index +1 ) {\n                return (\n                    <div ref={lastPostElementRef} key={post.id} className='postMain'>\n                    <ShowPost  post={post} profile={true}/>\n                    </div>)\n            } else {\n                return( \n                    <div className='postMain' key={post.id}>\n                        <ShowPost  post={post} profile={true}/>\n                    </div>\n                )\n            }\n        })}\n        {loading &&  \n            <div className='post-load-container'>\n                <div className='post-load-body'>\n                    <i className=\"fa-solid fa-spinner fa-spin userload\"></i>\n                </div>\n            </div>}\n        </>\n    );\n\n\n\n\n}\n\nexport default UserDashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}