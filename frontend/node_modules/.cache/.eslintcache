[{"/Users/vincentpham/Documents/mumblr/frontend/src/index.js":"1","/Users/vincentpham/Documents/mumblr/frontend/src/App.js":"2","/Users/vincentpham/Documents/mumblr/frontend/src/store/csrf.js":"3","/Users/vincentpham/Documents/mumblr/frontend/src/store/session.js":"4","/Users/vincentpham/Documents/mumblr/frontend/src/components/Context/Modal.js":"5","/Users/vincentpham/Documents/mumblr/frontend/src/store/index.js":"6","/Users/vincentpham/Documents/mumblr/frontend/src/components/LoginFormModal/LoginForm.js":"7","/Users/vincentpham/Documents/mumblr/frontend/src/components/Navigation/index.js":"8","/Users/vincentpham/Documents/mumblr/frontend/src/components/SignupFormPage/index.js":"9","/Users/vincentpham/Documents/mumblr/frontend/src/components/LoginFormModal/EmailCheck.js":"10","/Users/vincentpham/Documents/mumblr/frontend/src/components/LoginFormModal/passwordSignUp.js":"11","/Users/vincentpham/Documents/mumblr/frontend/src/components/LoginFormModal/passwordLogin.js":"12","/Users/vincentpham/Documents/mumblr/frontend/src/components/Navigation/ProfileButton.js":"13","/Users/vincentpham/Documents/mumblr/frontend/src/components/Navigation/PostButton.js":"14","/Users/vincentpham/Documents/mumblr/frontend/src/components/LoginFormModal/index.js":"15","/Users/vincentpham/Documents/mumblr/frontend/src/store/posts.js":"16","/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/loggedout.js":"17","/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/loggedin.js":"18","/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/dashboard.js":"19","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/showPost.js":"20","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostHeader.js":"21","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/index.js":"22","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostText.js":"23","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPost.js":"24","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostCircle.js":"25","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostSelection.js":"26","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/textposts/NewTextPost.js":"27","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/textposts/NewTextPostModal.js":"28","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPhotoPostModal.js":"29","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPhotoPost.js":"30","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js":"31","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/index.js":"32","/Users/vincentpham/Documents/mumblr/frontend/src/store/user.js":"33","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/likes.js":"34","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/posts.js":"35","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/UpdatePostModal.js":"36","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/UpdatePost.js":"37","/Users/vincentpham/Documents/mumblr/frontend/src/store/likes.js":"38","/Users/vincentpham/Documents/mumblr/frontend/src/store/comments.js":"39","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostFooter.js":"40","/Users/vincentpham/Documents/mumblr/frontend/src/store/follows.js":"41","/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/Spotlight.js":"42","/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/DashBoardPartial.js":"43","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserDashBoard.js":"44","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserFollowDashoard.js":"45","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserFollowShow.js":"46","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/AccountSetings.js":"47"},{"size":1330,"mtime":1688024565346,"results":"48","hashOfConfig":"49"},{"size":2788,"mtime":1690507617946,"results":"50","hashOfConfig":"49"},{"size":927,"mtime":1687637140093,"results":"51","hashOfConfig":"49"},{"size":2325,"mtime":1687815797252,"results":"52","hashOfConfig":"49"},{"size":946,"mtime":1687414839843,"results":"53","hashOfConfig":"49"},{"size":1002,"mtime":1688105700059,"results":"54","hashOfConfig":"49"},{"size":1929,"mtime":1689799136100,"results":"55","hashOfConfig":"49"},{"size":2790,"mtime":1690404849819,"results":"56","hashOfConfig":"49"},{"size":2280,"mtime":1688144795774,"results":"57","hashOfConfig":"49"},{"size":2511,"mtime":1689799136100,"results":"58","hashOfConfig":"49"},{"size":3404,"mtime":1690332587768,"results":"59","hashOfConfig":"49"},{"size":2570,"mtime":1690331007866,"results":"60","hashOfConfig":"49"},{"size":3514,"mtime":1690332726976,"results":"61","hashOfConfig":"49"},{"size":745,"mtime":1688065027633,"results":"62","hashOfConfig":"49"},{"size":583,"mtime":1687366937963,"results":"63","hashOfConfig":"49"},{"size":3519,"mtime":1690327402057,"results":"64","hashOfConfig":"49"},{"size":1125,"mtime":1690269885417,"results":"65","hashOfConfig":"49"},{"size":1084,"mtime":1690312338815,"results":"66","hashOfConfig":"49"},{"size":2294,"mtime":1690331007866,"results":"67","hashOfConfig":"49"},{"size":2306,"mtime":1689741605954,"results":"68","hashOfConfig":"49"},{"size":6383,"mtime":1690404963847,"results":"69","hashOfConfig":"49"},{"size":0,"mtime":1687303254021,"results":"70","hashOfConfig":"49"},{"size":3842,"mtime":1690507617948,"results":"71","hashOfConfig":"49"},{"size":928,"mtime":1687752096264,"results":"72","hashOfConfig":"49"},{"size":1671,"mtime":1690507617947,"results":"73","hashOfConfig":"49"},{"size":437,"mtime":1690507617947,"results":"74","hashOfConfig":"49"},{"size":11144,"mtime":1690507617948,"results":"75","hashOfConfig":"49"},{"size":592,"mtime":1687562607727,"results":"76","hashOfConfig":"49"},{"size":554,"mtime":1687563729933,"results":"77","hashOfConfig":"49"},{"size":9197,"mtime":1690507617947,"results":"78","hashOfConfig":"49"},{"size":7510,"mtime":1690404849820,"results":"79","hashOfConfig":"49"},{"size":11205,"mtime":1690404849827,"results":"80","hashOfConfig":"49"},{"size":2374,"mtime":1690404849827,"results":"81","hashOfConfig":"49"},{"size":774,"mtime":1688110716841,"results":"82","hashOfConfig":"49"},{"size":775,"mtime":1689899427030,"results":"83","hashOfConfig":"49"},{"size":585,"mtime":1687853330565,"results":"84","hashOfConfig":"49"},{"size":11956,"mtime":1690518306891,"results":"85","hashOfConfig":"49"},{"size":3772,"mtime":1690312091371,"results":"86","hashOfConfig":"49"},{"size":2801,"mtime":1690312091370,"results":"87","hashOfConfig":"49"},{"size":22877,"mtime":1690404849821,"results":"88","hashOfConfig":"49"},{"size":4010,"mtime":1690332518144,"results":"89","hashOfConfig":"49"},{"size":2026,"mtime":1690514322335,"results":"90","hashOfConfig":"49"},{"size":7582,"mtime":1690521619226,"results":"91","hashOfConfig":"49"},{"size":6430,"mtime":1690521619226,"results":"92","hashOfConfig":"49"},{"size":3731,"mtime":1690514322336,"results":"93","hashOfConfig":"49"},{"size":3179,"mtime":1690411846420,"results":"94","hashOfConfig":"49"},{"size":6034,"mtime":1690333543606,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"1mdl8js",{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"99"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"99"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"99"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"99"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"99"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"99"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"99"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"99"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"99"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"99"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"99"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"99"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"99"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"215"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"99"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"99"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"99"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":1,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"99"},"/Users/vincentpham/Documents/mumblr/frontend/src/index.js",[],[],[],"/Users/vincentpham/Documents/mumblr/frontend/src/App.js",["270","271","272","273","274","275","276","277","278","279"],[],"import { useState, useEffect } from 'react'\nimport { Route, Switch, Redirect, useLocation } from \"react-router-dom\"\nimport SignupFormPage from './components/SignupFormPage';\nimport Navigation from './components/Navigation';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Dashboard from './components/Dashboard/dashboard';\nimport LoginFormModel from './components/LoginFormModal';\nimport NewPost from './components/posts/NewPost';\nimport NewTextModal from './components/posts/textposts/NewTextPostModal';\nimport NewPhotoModal from './components/posts/NewPhotoPostModal';\nimport UserShowPage from './components/users';\nimport UpdatePostModal from './components/posts/UpdatePostModal';\nimport { clearPosts } from './store/posts';\nimport './app.css'\nfunction App() {\n  const sessionUser = useSelector(state => state.session.user);\n  const [loggedIn, setLoggedIn] = useState(false);\n  const location = useLocation();\n  const dispatch = useDispatch();\n  // useEffect(()=>{\n  //   dispatch(clearPosts());\n  // },[location])\n  return (\n    <>\n      <div className='header-container'>\n        <Navigation />\n      </div>\n      <div className='body'>\n\n        <Switch>\n          <Route path=\"/user/:userid\">\n            <UserShowPage />\n          </Route>\n          <Route path=\"/explore\">\n            <div className=\"dashboard\">\n              <Dashboard />\n            </div>\n          </Route>\n          <Route>\n            {/* <Redirect to='/explore'></Redirect> */}\n            <div className=\"dashboard\">\n              <Dashboard />\n            </div>\n          </Route>\n        </Switch>\n          <Route exact path=\"/new/text\">\n            <NewTextModal />\n          </Route>\n          <Route path=\"/new/photo\">\n            <NewPhotoModal />\n          </Route>\n          <Route path=\"/new\">\n            <NewPost />\n          </Route>\n          <Route path=\"/edit/:postid\">\n            <UpdatePostModal />\n          </Route>\n      </div>\n      {/* <Switch location={background || location}>\n      <Route path='/new/'>\n            <NewPost />\n      </Route>\n          <Route path='/new'>\n            <NewPost />\n          </Route>\n          <Route path='/new/text'>\n            <NewTextModal />\n          </Route>\n          <Route path='/new/photo'>\n            <NewPhotoModal />\n          </Route>\n          <Route path='/edit/:postid'>\n            <UpdatePostModal />\n          </Route>\n      </Switch> */}\n      {/* routes */}\n\n      {/* <Route exact path='/new/text'>\n        <NewTextModal />\n      </Route>\n      <Route exact path='/new/photo'>\n        <NewPhotoModal />\n      </Route>\n      <Route path='/edit/:postid'>\n        <UpdatePostModal />\n      </Route>\n\n      <Route exact path='/new'>\n        <NewPost />\n      </Route> */}\n    </>\n  );\n}\n\nexport default App;\n","/Users/vincentpham/Documents/mumblr/frontend/src/store/csrf.js",[],[],"/Users/vincentpham/Documents/mumblr/frontend/src/store/session.js",[],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/Context/Modal.js",["280"],[],"import React,{ useRef, useState, useContext, useEffect,createContext} from \"react\";\nimport ReactDOM  from \"react-dom\";\nimport './Modal.css'\nconst ModalContext = React.createContext();\n\nconst ModalProvider = ({children})=>{\n    const modalRef = useRef();\n    const [value,setValue] = useState();\n\n    useEffect(()=>{\n        setValue(modalRef.current);\n    },[]);\n\n    return(\n        <>\n        <ModalContext.Provider value={value}>\n            {children}\n        </ModalContext.Provider>\n            <div className='modal-container'ref={modalRef}></div>\n        </>\n    )\n\n\n\n}\n\n\nexport const Modal = ({onClose,children})=>{\n    const modalNode = useContext(ModalContext);\n    if (!modalNode) return null;\n    return ReactDOM.createPortal(\n        <div id='modal'>\n            <div id='modal-background' onClick={onClose}></div>\n            <div id='modal-content'>{children}</div>\n        </div>,modalNode\n    );\n}\n\nexport default ModalProvider;","/Users/vincentpham/Documents/mumblr/frontend/src/store/index.js",[],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/LoginFormModal/LoginForm.js",["281","282","283"],[],"\nimport './index.css'\nimport React,{useState,useEffect} from 'react';\nimport {useDispatch,useSelector} from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport csrfFetch from '../../store/csrf';\nimport EmailCheck from './EmailCheck';\nimport PasswordLogin from './passwordLogin';\nimport PasswordSignUp from './passwordSignUp';\nconst LoginForm = ({setshowModal})=>{\n    const dispatch = useDispatch();\n    // grab user info from current logged in user\n    // most likely be blank\n    // make closeModal\n    const sessionUser = useSelector(state=> state.session.user);\n    const [email,setEmail] = useState('')\n    const [errors,setErrors] = useState([]);\n    const [emailCheck,setEmailCheck] = useState(false);\n    const [emailExists,setEmailExists] = useState(null);\n    if (sessionUser) return <Redirect to=\"/\" />;\n    const checkEmail = async (email) => {\n        const response = await csrfFetch('/api/check-email',{\n            method:\"POST\",\n            body: JSON.stringify(email)\n        });\n        const exists = await response.json();\n        return exists;\n    }\n    // need to move fetch into on email click\n\n    const onEmailClick =async (email)=>{\n        let response = await checkEmail(email);\n        setEmailExists(response);\n        setEmailCheck(true);\n        \n    };\n\n\n    <ul>\n        {errors.map(error => <li className='login-errors' key={error}>{error}</li>)}\n    </ul>\n\n    return (\n        // <ul>\n        //   {errors.map(error => <li key={error}>{error}</li>)}\n        // </ul>\n        <>\n        <div className='loginModal'>\n        {!emailCheck && <EmailCheck setEmail={setEmail} onEmailClick={onEmailClick} />}\n        {emailCheck===true && emailExists && <PasswordLogin email={email} setshowModal={setshowModal}/>}\n        {emailCheck===true && !emailExists && <PasswordSignUp email={email} setshowModal={setshowModal}/>}\n        </div>\n        </>\n    );\n}\n\nexport default LoginForm;","/Users/vincentpham/Documents/mumblr/frontend/src/components/Navigation/index.js",["284","285","286","287"],[],"\nimport {useState,useEffect} from 'react';\nimport {useDispatch,useSelector} from 'react-redux'\nimport * as sessionActions from '../../store/session';\nimport { Redirect, NavLink,Link,useHistory } from 'react-router-dom'\nimport Profilebutton from './ProfileButton';\nimport PostButton from './PostButton';\nimport LoginFormModel from '../LoginFormModal';\nimport './navigation.css'\nconst Navigation = ()=>{\n    const sessionUser = useSelector(state=> state.session.user);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    let sessionLinks;\n    const handleDemoButton=(event)=>{\n        event.preventDefault();\n        dispatch(sessionActions.login({ email: 'Demo-lition', password: 'password' }))\n            .then(()=>{\n                history.push('/explore/foryou')\n\n            })\n\n    }\n    // useEffect(()=>{\n    //     if (sessionUser){\n    //         history.push('/explore/foryou')\n    //     }else {\n    //         history.push('/explore/preview')\n    //     }\n\n    // },[sessionUser])\n    if (sessionUser){\n        sessionLinks=(\n            <>\n            <li>\n            <Profilebutton user={sessionUser} />\n            </li>\n            <li>\n            <PostButton />\n            </li>\n            </>\n        )\n    } else {\n        sessionLinks = (\n            <>\n            <li>\n                <button onClick={(event)=>handleDemoButton(event)} className='demo-login'>\n                    Demo\n                </button>\n            </li>\n            <li>\n            <LoginFormModel />\n            </li>\n            </>\n        )\n    };\n    return (\n        <>\n        <header className='navBar-header'>\n        <div className='title'>\n            {sessionUser&&\n            <Link to='/explore/foryou'>\n                mumblr.\n                \n            </Link>\n            }\n            {!sessionUser && \n            <Link to='/explore/preview'>\n                mumblr.\n            </Link>\n            }\n\n        </div>\n        <div className = 'navBody'>\n            <ul className='navButtons'>\n            <li>\n\n\n            <Link className='linkedin' onClick={e=>window.open('https://www.linkedin.com/in/vincent-pham-163347133')} to='https://www.linkedin.com/in/vincent-pham-163347133/' target='_blank'>   \n                <i className =\"fa-brands fa-linkedin\"></i>\n            </Link>\n            </li>\n            <li>\n                <Link className='github' onClick={e=>window.open('https://github.com/vincentpham123/mumblr/wiki')} to='https://github.com/vincentpham123/mumblr/wiki' target='_blank'>\n                    <i className=\"fa-brands fa-github\"></i>\n                </Link>      \n             </li>\n                    {sessionLinks}\n            </ul>\n        </div>\n        </header>\n        </>\n    )\n}\nexport default Navigation;","/Users/vincentpham/Documents/mumblr/frontend/src/components/SignupFormPage/index.js",[],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/LoginFormModal/EmailCheck.js",["288","289"],[],"import { useState,useEffect } from \"react\"\nimport './emailcheck.css'\nconst EmailCheck = ({setEmail,onEmailClick}) =>{\n        const [initialEmail,setInitialEmail] = useState('');\n        const [emailError,setEmailError] = useState('');\n        const [buttonColor,setButtonColor] = useState('');\n        const [fontColor,setFontColor] = useState('')\n        useEffect(()=>{\n        if (initialEmail.length) {\n            setButtonColor('white');\n        setFontColor('black')} else {\n            setButtonColor('');\n            setFontColor('');\n        } \n        }\n        ,[initialEmail]);\n        const validateEmail = (email) => {\n            const emailRegex = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n            return emailRegex.test(email);\n        }\n\n        const handleEmailSubmit = (event) =>{\n            event.preventDefault();\n            setEmailError('');\n            if (!validateEmail(initialEmail)){\n                setEmailError(\"That's not a valid email address. Please try again.\");\n                return;\n            }\n            onEmailClick(initialEmail);\n            setEmail(initialEmail);\n    \n        }\n        // const handleEmailClick = (event) =>{\n        //     setEmailError([]);\n\n        //     if(!validateEmail(event.target.value)){\n        //         emailError.push(\"That's not a valid email address. Please try again.\");\n                \n        //     }\n        // }\n        return (\n            <>\n            <div className='email-box'>\n                <div className='email-title'>mumblr</div>\n                <form className = 'email-form' onSubmit={handleEmailSubmit}>\n                <div className='email-instructions'><p>Enter your email to login or register:</p></div>\n                <input className= 'email-text' type='text' placeholder='Email' \n                    value={initialEmail} onChange={event=>setInitialEmail(event.target.value)} required\n                    />\n                \n                    <button style={{ backgroundColor:`${buttonColor}`,color:`${fontColor}`}} className='email-button' type='submit' >\n                    Next<i className=\"fa-solid fa-arrow-right icon\" style={{border: 'none', color: `${fontColor}` }}></i> \n                    </button>\n                </form>\n                {emailError && <div className='invalid-email-error'>{emailError}</div>}\n            </div>\n            </>\n        )\n}\nexport default EmailCheck;\n{/* <span>Next <i className=\"fa-solid fa-arrow-right\" style={{color:'#000000'}}></i> </span> */}","/Users/vincentpham/Documents/mumblr/frontend/src/components/LoginFormModal/passwordSignUp.js",[],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/LoginFormModal/passwordLogin.js",["290","291"],[],"import { useState, useEffect} from \"react\";\n\nimport './index.css';\nimport * as sessionActions from '../../store/session';\nimport csrfFetch from \"../../store/csrf\";\nimport { Redirect,useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport './passwordLogin.css';\nconst PasswordLogin = ({email},{setshowModal}) =>{\n    const dispatch = useDispatch();\n    const [password,setPassword] = useState('');\n    const [errors,setErrors] = useState([]);\n    const [buttonColor,setButtonColor] = useState('');\n    const [fontColor,setFontColor] = useState('');\n    const history = useHistory();\n    useEffect(()=>{\n        if (password.length){\n            setButtonColor('white');\n            setFontColor('black');\n        } else {\n            setButtonColor('');\n            setFontColor('');\n        }\n    },[password]);\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        setErrors([]);\n        dispatch(sessionActions.login({email, password}))\n            .then(()=>{\n                history.push('/explore/foryou');\n\n            })\n            .catch(async (res) => {\n                let data;\n                try {\n                    data = await res.clone().json();\n                } catch {\n                    data = await res.text();\n                }\n\n                if (data?.errors) setErrors(data.errors);\n                else if (data) setErrors([data]);\n                else setErrors([res.statusText]);\n\n            });\n    }\n    return (\n        <>\n             <div className='passwordlogin-box'>\n                <div className='password-title'>mumblr</div>\n                <form className = 'password-form' onSubmit={handleSubmit}>\n                <div className='password-instructions'><p>Welcome back to your corner of the internet.</p></div>\n                <input className= 'password-text' type='password' placeholder='Password' \n                    value={password} onChange={event=>setPassword(event.target.value)} required\n                    />\n                \n                    <button style={{ backgroundColor:`${buttonColor}`,color:`${fontColor}`}} className='password-button' type='submit' >\n                    Log in<i className=\"fa-solid fa-arrow-right icon\" style={{border: 'none', color: `${fontColor}` }}></i> \n                    </button>\n                </form>\n                <ul className='password-errors'>\n                    {errors.map(error => <li key={error}>{error}</li>)}\n                </ul>\n            </div>\n        </>\n    )\n\n}\n\nexport default PasswordLogin;","/Users/vincentpham/Documents/mumblr/frontend/src/components/Navigation/ProfileButton.js",["292","293","294"],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/Navigation/PostButton.js",["295","296","297","298","299","300","301"],[],"import { Link } from 'react-router-dom';\nimport './navigation.css'\nimport { useState } from 'react';\nimport NewPost from '../posts/NewPost';\nimport NewTextModal from '../posts/textposts/NewTextPostModal';\nimport NewPhotoModal from '../posts/NewPhotoPostModal';\nimport { Route, Switch,useLocation } from 'react-router-dom/cjs/react-router-dom.min';\nconst PostButton= ()=>{\n    let location = useLocation();\n    let background = location.state && location.state.background\n    return(\n        <>\n        <div>\n            <Link to='/new' className='post-button'>\n                <i className=\"fa-sharp fa-solid fa-pencil\" style={{color:'#696969'}}></i>\n            </Link>\n            \n        </div>\n        </>\n    )\n}\nexport default PostButton;","/Users/vincentpham/Documents/mumblr/frontend/src/components/LoginFormModal/index.js",["302"],[],"import LoginForm from \"./LoginForm\";\nimport { useState } from \"react\";\nimport { Modal } from \"../Context/Modal\";\nimport { Route } from \"react-router-dom\";\nconst LoginFormModel =()=>{\n    const [showModal,setShowModal] = useState(false);\n    return(\n        <>\n        <button className='sign-in-button' onClick={()=>setShowModal(true)}>Log In</button>\n        {showModal && (\n            <Modal onClose={()=>setShowModal(false)}>\n                <LoginForm setshowModal={setShowModal}/>\n            </Modal>\n        )}\n            \n        </>\n    )\n}\n\nexport default LoginFormModel;","/Users/vincentpham/Documents/mumblr/frontend/src/store/posts.js",["303"],[],"import csrfFetch, { storeCSRFToken } from \"./csrf\";\nimport { receiveLikes } from \"./likes\";\nimport {receiveComments} from './comments';\nimport { receiveUsers } from \"./user\";\nimport { receiveFollows } from \"./follows\";\n// consts \n\nconst RECEIVE_POST = \"api/RECEIVE_POST\";\nconst RECEIVE_POSTS = \"api/RECEIVE_POSTS\";\nconst REMOVE_POST = 'api/REMOVE_POST';\nconst RECEIVE_USER_POST = \"api/USERNAME/RECEIVE_POSTS\";\nconst CLEAR_POSTS = 'api/CLEAR_POSTS';\n\n// action types\n\nexport const receiveUserPosts = (posts) => ({\n    type: RECEIVE_USER_POST,\n    posts\n})\nexport const receivePost = (post) => ({\n    type: RECEIVE_POST,\n    post \n})\n\nexport const receivePosts = (posts) => ({\n    type: RECEIVE_POSTS,\n    posts\n})\n\nexport const deletePost = (postId) =>({\n    type: REMOVE_POST,\n    postId\n})\nexport const clearPosts = () => ({\n    type: CLEAR_POSTS\n})\n//getter\n\nexport const userPosts = (username) => (state) => {\n    return state.posts ? Object.values(state.posts).filter((post)=>post.author.username===username) : null;\n}\n\n// thunk actions\n\nexport const fetchPosts = (pagenumber,type,user=0) => async(dispatch) =>{\n    let response = await fetch(`/api/posts?page_number=${pagenumber}&type=${type}&user=${user}`)\n    if (response.ok){\n    const data = await response.json();\n    dispatch(receivePosts(data.posts));\n    dispatch(receiveUsers(data.users));\n    dispatch(receiveFollows(data.follows));\n    dispatch(receiveLikes(data.likes));\n    return data\n    }\n}\n\nexport const fetchPost = (postId) => async(dispatch)=>{\n    let response = await fetch(`/api/posts/${postId}`);\n\n    if (response.ok){\n    const data = await response.json();\n    dispatch(receivePost(data.posts));\n    dispatch(receiveComments(data.comments));\n    dispatch(receiveLikes(data.likes));\n    return data;\n    }\n} \n\nexport const createPost = (post) => async(dispatch) =>{\n    const newPost = await csrfFetch('/api/posts',{\n        method:'POST',\n        body: post\n    });\n    if (newPost.ok){\n    const data = await newPost.json();\n    dispatch(receivePost(data.posts));\n    dispatch(receiveComments(data.comments));\n    dispatch(receiveLikes(data.likes));\n    return data;\n    }\n}\n\nexport const updatePost = (formData,postid)=> async(dispatch) => {\n   \n    const post = await csrfFetch(`/api/posts/${postid}`,{\n        method:'PATCH',\n        body: formData\n    });\n    if (post.ok){\n        const data = await post.json();\n        dispatch(receivePost(data.posts));\n        dispatch(receiveComments(data.comments));\n        dispatch(receiveLikes(data.likes));\n        return data;\n    } else{\n        const error = await post.json();\n        throw new Error(error.message)\n    }\n}\n\nexport const removePost = postId => async dispatch =>{\n    const post = await csrfFetch(`/api/posts/${postId}`, {\n        method: 'DELETE'\n    });\n    if (post.ok){\n        dispatch(deletePost(postId))\n        // dispatch(receivePosts())\n    }\n};\n\n// posts reducer\n\nconst postsReducer = (state={},action)=>{\n    const newState={...state};\n    switch (action.type) {\n        case RECEIVE_POST:\n            newState[action.post.id] = action.post;\n            return newState;\n        case RECEIVE_POSTS:\n            return {...newState,...action.posts};\n        case REMOVE_POST:\n            delete newState[action.postId];\n            return newState;\n        case RECEIVE_USER_POST:\n            return {...action.posts};\n        case CLEAR_POSTS:\n            return {};\n        default:\n            return newState;\n    }\n}\nexport default postsReducer;\n\n    \n","/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/loggedout.js",["304","305"],[],"import './loggedout.css';\nimport { useState,useEffect } from 'react';\nimport { NavLink, Switch,useHistory,useLocation} from 'react-router-dom';\nconst LoggedOut = () => {\n    // headers will ne today, trending, spotlight\n    const history = useHistory();\n    const location = useLocation();\n    const [currentTab,setCurrentTab]=useState('');\n\n    useEffect(()=>{\n        setCurrentTab(location.pathname);\n    },[location])\n    return (\n        <>\n          <div className='tabs'>\n            <ul className='tab-selection'>\n              <li className='tabs'>\n                <NavLink className={(currentTab==='/explore/preview'||currentTab==='/') ? 'active':''} to='/explore/preview' activeClassName='active'>\n                  Preview\n                </NavLink>\n              </li>\n              <li className='tabs'>\n                <NavLink className={currentTab==='explore/spotlight' ? 'active':''}  to='/explore/spotlight' activeClassName='active'>\n                  Spotlight\n                </NavLink>\n              </li>\n            </ul>\n          </div>\n        </>\n      );\n    };\n    \n    export default LoggedOut;","/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/loggedin.js",["306","307","308","309","310"],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/dashboard.js",["311","312","313"],[],"import { useState,useEffect } from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport LoggedIn from \"./loggedin\";\nimport LoggedOut from \"./loggedout\";\nimport './dashboardnav.css';\nimport SpotLightDashboard from \"./Spotlight\";\nimport DashboardPartial from \"./DashBoardPartial\";\nconst Dashboard = ({})=>{\n    const sessionUser = useSelector(state=> state.session.user)\n    const [currentTab,setCurrentTab] = useState('');\n    const [loggedIn,setLoggedIn] = useState(false);\n    useEffect(()=>{\n        if(!sessionUser){\n            setLoggedIn(false);\n        } else{\n            setLoggedIn(true)\n        }\n    },[sessionUser])\n    return (\n        <>\n        <div className='dashboard-main'>\n            {loggedIn && <LoggedIn setCurrentTab={setCurrentTab}/>}\n            {!loggedIn && <LoggedOut setCurrentTab={setCurrentTab}/>}\n        </div>\n        <Switch>\n            <Route exact path='/explore/preview'>\n                \n                <DashboardPartial type={'preview'}/>\n            </Route>\n            <Route exact path=\"/explore/foryou\">\n                <DashboardPartial type={'foryou'}/>\n\n            </Route>\n            <Route exact path=\"/explore/trending\">\n                <DashboardPartial type={'trending'}/>\n            </Route>\n            <Route exact path=\"/explore/spotlight\">\n                <SpotLightDashboard />\n            </Route>\n            <Route exact path='/'>\n                {loggedIn ? \n                    <DashboardPartial type={'foryou'}/> :\n                    <DashboardPartial type={'preview'}/>\n                }\n            </Route>      \n            {/* <Route exact path=\"/explore/foryou\">\n                <ForYouDashboard />\n            </Route>\n            <Route path=\"/explore/following\">\n                {/* render spotlight */}\n            {/* </Route> */} \n            {/* <Route path=\"/\">\n                <ForYouDashboard />\n            </Route> */}\n        </Switch>\n\n\n\n\n\n\n\n        \n        \n        </>\n    )\n    // if session null, show logged out dashboard\n    // if logged in, show logged in dashboard\n\n    //logged out will have posts made today, trending??, spotlight\n    //today will be posts reblogged by todayonmumblr account\n\n\n}\n\nexport default Dashboard;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/showPost.js",["314","315","316","317"],[],"import \"./styling/showPost.css\";\nimport PostHeader from \"./PostHeader\";\nimport PostText from \"./PostText\";\nimport * as postActions from '../../store/posts';\nimport { useState, useEffect} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport UpdatePostModal from \"./UpdatePostModal\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport PostFooter from \"./PostFooter\";\nconst ShowPost = ({post,profile=false})=>{\n    if (!post){\n        return (\n            <p>Loading</p>\n        )\n    }\n    return (\n        <>\n            <div className='postContainer'>\n                <article className='postContent'>\n                    {!profile &&\n                    <div className='author-pfp'>\n                        <div className='author-pfp-frame'>\n                            <img src={post.author.profilepic}></img>\n                        </div>\n                    </div>\n                    }\n                        <PostHeader post={post} profile={profile} />\n                    <div className='post-meat'>\n                        <PostText post={post} />\n                    </div>\n                    <PostBlaze  post={post} />\n                    {/* need to add post footer */}\n                    <PostFooter post={post}/>\n                </article>\n            </div>\n        </>\n    )\n}\n\nconst PostBlaze = ({post}) => {\n    const sessionUser = useSelector((state)=>state.session.user);\n    const dispatch = useDispatch();\n    const handleDelete =()=>{\n        const postId = post.id;\n        dispatch(postActions.removePost(postId));\n    }\n\n    \n    return (\n        <>\n            <div className='post-blaze-container'>\n            {/* render if it is a profile show page */}\n                {sessionUser && post.author.username === sessionUser.username &&\n                    <>\n                    <button className='profileEdits' onClick={handleDelete}>\n                        <i className=\"fa-solid fa-trash-can\"></i>\n                    </button>\n                    <Link className='profileEdits' to={`/edit/${post.id}`}>\n                        <i className=\"fa-solid fa-pencil\"></i>\n                    </Link>\n                    </>\n                \n                }\n\n            </div>\n        </>\n    )\n}\n\nexport default ShowPost;\n","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostHeader.js",["318","319","320"],[],"\nimport { Link } from \"react-router-dom\";\nimport { useSelector} from \"react-redux\";\nimport { useState, useEffect } from \"react\";\nimport './styling/postheader.css';\nimport { useDispatch } from \"react-redux\";\nimport * as followActions from '../../store/follows';\nimport { userFollowed } from \"../../store/follows\";\nconst PostHeader =({post,profile}) =>{\n    const sessionUser = useSelector(state=> state.session.user);\n    const dispatch = useDispatch();\n    const [showOptions, setShowOptions] = useState(false);\n    const [errors, setErrors] = useState([]);\n    const [dateObj,setDateObj]=useState(new Date(post.dateCreated+' '+post.timeCreated));\n    const [sameUser,setSameUser]=useState(false);\n    useEffect(()=>{\n        if(sessionUser && sessionUser.id===post.author.id){\n            setSameUser(true);\n        }\n    },[sessionUser])\n    const openOptions = ()=> {\n        if(showOptions) return;\n        setShowOptions(true);\n    }\n    const followed = useSelector(userFollowed(sessionUser,post.author.id));\n    const closeOptions= () =>{\n        if (showOptions) setShowOptions(false);\n    }\n    const convertTime = (hour)=>{\n        let result = hour;\n        \n        if (hour>12){\n            result -=12;\n        }\n        if (result<10){\n            return '0'+result;\n        } else{\n            return result;\n        }\n    }\n    const getAMPM = (hour)=>{\n        let ap = hour >= 12 ? 'PM' : 'AM';\n        return ap;\n    }\n    // const handleFollowButton = (event)=>{\n    //     event.preventDefault();\n    //     if (!sessionUser){\n    //         setErrors(['Login to Follow!'])\n    //     } else{\n    //         if (followed===0){\n    //             const follow={user_id: post.author.id, follower_id: sessionUser.id}\n    //             const follow_id = dispatch(followActions.createFollow(follow));\n    //         } else {\n    //             dispatch(followActions.removeFollow(post.author.id));\n    //         }\n    //     }\n    // }\n    const handleFollowButton = (event)=>{\n        event.preventDefault();\n        if(!sessionUser){\n            setErrors(['Login to Follow!'])\n            setTimeout(()=>{\n                setErrors([])\n            },5000)\n        } else{\n            const follow={user_id: post.author.id, follower_id: sessionUser.id}\n            dispatch(followActions.createFollow(follow));\n        }\n    }\n    const handleUnfollowButton = (event) =>{\n        event.preventDefault();\n        dispatch(followActions.removeFollow(followed[0].id));\n    }\n\n    //clear follow error\n    // useEffect(()=>{\n    //     setTimeout(()=>{\n    //         setErrors([])\n    //     },5000)\n    // },[errors])\n    \n    useEffect(()=>{\n        if (!showOptions) return;\n        document.addEventListener('click',closeOptions);\n        return ()=> document.removeEventListener('click',closeOptions);\n    },[showOptions]);\n\n    //need formula that will change the formate of dateCreated and timecreated\n\n    //button for follow\n    //onclick, dispatch new follow for user if not followed, \n    //have useEffect that will render once and check if the sessionuser \n    // is following the user, if not, display follow button\n    return(\n        <>\n        <div className='headerHover'>\n            <header className='postHeader'>\n                <div className='headercontent'>\n                    <div className='username-follow'>\n                        <div className='username-box'>\n                            <div className='username-content'>\n                                <span className='username-link-box'>\n                                    <Link className='username-post' to={`/user/${post.author.id}`}>\n                                        {post.author.username}\n                                    </Link>\n                                </span>\n                            </div>\n                        </div>\n                        {followed.length===0 && !sameUser && <button onClick={(event)=>handleFollowButton(event)} className='follow-button' style={{ backgroundColor: 'transparent', border: 'none', boxShadow: 'none' }}><span>Follow</span></button>}\n                        {followed.length>0 && !sameUser && <button onClick={(event)=>handleUnfollowButton(event)} className='follow-button' style={{ backgroundColor: 'transparent', border: 'none', boxShadow: 'none' }}><span>Unfollow</span></button>}\n                    </div>\n                    {/* make div for extra things like post creation date */}\n                    <div className='options-box'>\n                        <span className='options-container'>\n                            <span className='options-content'>\n                                <button className='options-button' onClick={openOptions}>\n                                    <span className='button-content'>\n                                        <i className='fa-solid fa-ellipsis fa-xl buttonicon' ></i>\n                                    </span>\n                                </button>\n                            </span>\n                        </span>\n                    \n                        {showOptions && (\n                            \n                            <div className='optionsMenu'>\n                                <div className='time-date'>\n                                    {`${dateObj.toLocaleString('en-US',{year:'numeric',month:'long',day:'numeric'})}   \n                                    ${convertTime(dateObj.getHours())}:${dateObj.getMinutes()} ${getAMPM(dateObj.getHours())}`}\n                                </div>\n                                <ul className='optionscontent'>\n                                    \n                                    <li className='option-links' onClick={closeOptions}>\n                                        Close \n                                        {/* set showMenu to false */}\n                                    </li>\n\n\n                                </ul>\n                            </div>\n                        )}\n                    </div>\n                    { errors.length>0 &&\n                    <div className='follow-errors'>\n                            <span>\n                                {errors[0]}\n                            </span>\n                    </div>\n                    }\n                </div>\n            </header>\n        </div>\n        </>\n    )\n}\n\nexport default PostHeader;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/index.js",[],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostText.js",["321","322"],[],"import './styling/posttext.css';\nimport { useState } from 'react';\nconst PostText = ({post}) => {\n    // need to check if post has a title\n    // if post has a title, then that will be the first child of post-paragraph and have bigger font\n    // const [photoCount,setPhotoCount]=useState(1);\n    const styles = {\n        fontSize: '1.625rem',\n        lineHeight: 1.3077,\n        paddingLeft: '20px',\n        paddingRight: '20px',\n        minHeight: '1.5em',\n        marginBottom: '15px',\n      };\n    // const handlePhotoCount = () => {\n    //    if(photoCount<5)setPhotoCount((prevCount)=> prevCount+1);\n    // }\n    const breakdown = (post) => {\n        const array = post.body.split('\\r\\n');\n\n        return array.map((sentence,index)=>{\n        \n                switch (sentence) {\n                    case ('!@%^#^photo1'):\n                        // photoCount+=1;\n                        return(\n                            <div key={index} className='image-container'>\n                                <figure className='image-figure'>\n                                    <div className='image-box'>\n                                        <img id='1' src={post.photo1} alt='' className='post-image' ></img>\n                                    </div>\n                                </figure>\n                            </div>\n                        );\n                        case ('!@%^#^photo2'):\n                        return(\n                            <>\n                            <div key={index} className='image-container'>\n                                <figure className='image-figure'>\n                                    <div className='image-box'>\n                                        <img id='2' src={post.photo2} alt='' className='post-image' />\n                                    </div>\n                                </figure>\n                            </div>\n                            </>\n                        );\n                    case ('!@%^#^photo3'):\n                        return(\n                            <div key={index} className='image-container'>\n                                <figure className='image-figure'>\n                                    <div className='image-box'>\n                                        <img id='3'src={post.photo3} alt='' className='post-image' />\n                                    </div>\n                                </figure>\n                            </div>\n                        );\n                    case ('!@%^#^photo4'):\n                        return(\n                            <div key={index} className='image-container'>\n                                <figure className='image-figure'>\n                                    <div className='image-box'>\n                                        <img id='4' src={post.photo4} alt='' className='post-image' />\n                                    </div>\n                                </figure>\n                            </div>\n                        );\n                    default:\n                        return(\n                            <div key={index} className='post-paragraph'>\n                                <p className='textStrings'>{sentence}</p>\n                                <p></p>\n                            </div>\n                        )\n                }\n            })\n          \n    }\n\n    return (\n        <>\n            <div className='posttext-body'>\n            {/* <img src={post.photo1} alt='' className='post-image' /> */}\n                {post.title!=='' &&\n                <p className='post-paragraph'>\n                    <strong style={{fontSize: '1.625rem',lineHeight: 1.3077 }}>{post.title}</strong>\n                </p>\n                }\n                {breakdown(post)}\n            </div>\n        </>\n    )\n\n}\n\nexport default PostText;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPost.js",["323","324","325"],[],"import {useState,useEffect} from 'react';\n\nimport { Link, useHistory } from 'react-router-dom';\nimport PostCircle from './PostCircle';\nimport { Modal } from '../Context/Modal';\nimport PostSelection from './PostSelection';\nconst NewPost = () =>{\n    const [showSelection,setShowSelection] = useState(true);\n    // to go back if a user clicks on the background\n    const history = useHistory();\n    const handleOnClick =()=>{\n        history.goBack();\n    }\n    // post selection will pass in postType and the correct component\n    // will be rendered based on the selection\n    // have useEffect that will trigger when postType is selected\n    // will set a variable equal to the type selected\n    return (\n        <>\n        {showSelection &&\n            <Modal onClose={handleOnClick}>\n                <PostSelection showSelection={setShowSelection}/>\n            </Modal>\n        }\n        </>\n    )\n}\n\nexport default NewPost;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostCircle.js",["326","327"],[],"import './styling/postcircle.css';\nimport { useEffect,useState } from \"react\"\nimport { Link } from \"react-router-dom\";\nconst PostCircle = ({type,closeModal}) =>{\n    const [isHovered,setIsHovered] = useState(false);\n    const [decorators,setDecorators]=useState({\n        color: '',\n        icon: '',\n        text:''\n    })\n    // i need a color\n    // text\n    // link to\n    // icon\n    //need on mouseEnter and onMouseLeave functions\n    // used to add animation to the icons\n    useEffect(()=>{\n        switch (type) {\n            case \"text\":\n                setDecorators({\n                    color:'white',\n                    icon: 'fa-solid fa-a fa-2xl',\n                    text: 'Text'\n                }\n                )\n                break;\n            case \"photo\":\n                setDecorators({\n                    color:'rgba(var(--red)',\n                    icon: 'fa-solid fa-camera-retro fa-2xl',\n                    text: 'Photo'\n                })\n                break;\n            default:\n                break;\n        }\n    },[type])\n    return(\n        <div className='selection-container'>\n                    <div className='selection-body'>\n                    <Link onClick={()=>closeModal(false)}  className='selection-link' to={`/new/${type}`}>\n                        <div className='selection-button' style={{backgroundColor: decorators.color}}>\n                            <i className={decorators.icon}></i>\n                        </div>\n                            <div className='selection-text'>{decorators.text}</div>\n                    </Link>\n                    </div>\n        </div>\n    )\n\n}\n\nexport default PostCircle;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostSelection.js",[],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/textposts/NewTextPost.js",["328","329","330","331","332"],[],"import { useSelector } from \"react-redux\"\nimport { useState, useRef,useEffect } from \"react\"\nimport { createPost } from \"../../../store/posts\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Redirect } from \"react-router-dom\";\nimport NewPostInput from \"../NewPostInputs\";\nimport '../styling/newtextpost.css';\nconst NewTextPost = () => {\n    const [bodyCheck,setBodyCheck] = useState(true);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [title,setTitle] = useState('');\n    const [paragraphs,setParagraphs] = useState({1:''});\n    const [photos,setPhotos]=useState({1:null,2:null,3:null,4:null});\n    const [errors,setErrors]=useState([]);\n\n      // each photo will hold a file that will be rendered \n      //when a user uploads a photo, 1 will be populate, then 2, then 3, then 4\n\n      //during update, i will populate these based on the the photos in the state\n      //when a user removes the photo currenly populated in the hash\n      //example, if photo1 is currently being rendered in paragraph 3\n      //and they remove it, i will set photo1 to null\n      //if they add a photo else where, i will check for keys in the photo hash\n      //with null values and then update that key to have that file\n      //i will update the paragraph key to be an identifier for that photo\n      // example:\n      // photo1 was originally in pargraph2, users chooses to remove it and type in\n      // key downs update the paragraph automatically\n      // when a user removes, the photos[1] will be set to null\n      //so paragraph[2] will now be strings\n      // user updates a photo to paragraph[1], pragraph[1] will now contain identifier\n      // handlefile will check for empty nulls, first one it identifies, it was place the file there\n      // paragraph one will have something like photo1 identifer\n      //when i show the text, i will check for the photo being checked in the body text and then \n\n    const sessionUser = useSelector(state=>  state.session.user);\n    useEffect(()=>{\n        const textofpost = Object.values(paragraphs).filter((value)=> typeof value ==='string');\n        if(textofpost.some(paragraph=>paragraph.trim().length>0) ) {\n            setBodyCheck('');\n        } else {\n            setBodyCheck(true);\n        }\n    },[paragraphs]);\n    \n    const handleFile = (event) => {\n        // need to change logic to check for null keys-value pairs\n\n        //need data-type of the input to set paragraph to photo\n        const file = event.currentTarget.files[0];\n        const pindex=event.target.dataset.type;\n        // need pindex to target the current paragraph \n\n        //need to find the keys with values null\n\n        const nullPhotos = Object.keys(photos).filter((photonumber)=>photos[photonumber]===null);\n        const photoToFill = nullPhotos[0];\n        setPhotos({...photos,[photoToFill]:file});\n\n        setParagraphs({...paragraphs,[Object.keys(paragraphs).length+1]: '',[pindex]:`!@%^#^photo${photoToFill}`});\n\n        // this wil let my child component which key to pass to the handleFileRemove in my child component\n        // if its an update, i can get initial index when i check the inital value;\n\n        return photoToFill;\n    }\n\n    const handlePhotoRemove = (key,index) => {\n        setPhotos({...photos,[key]:null})\n        setParagraphs({...paragraphs,[index]:''})\n        //need to pass this down to the children\n    }\n    const handleAddParagraph = (event) =>{\n        event.preventDefault();\n            const newIndex = Object.keys(paragraphs).length+1;\n            setParagraphs({\n                ...paragraphs,\n                [newIndex]: ''\n            })\n    }\n    const handleTitleKeyDown = (event) => {\n        if (event.key==='Enter'){\n            setTimeout(()=>{\n                event.target.nextElementSibling.focus()\n            },0);\n        }\n    \n         setTitle(event.target.innerText);\n    }\n    const handleKeyDown = (event) => {\n    \n        if(event.key !== 'Enter' && event.key!=='ArrowDown' && event.key!=='ArrowUp'){\n            setTimeout(()=>{\n                const pindex = event.target.dataset.type\n            \n                setParagraphs({...paragraphs,[pindex]: event.target.innerText});\n            },0);\n        }\n  \n     \n      \n    \n        if (event.key==='Enter'){\n            event.preventDefault();\n            const newIndex = Object.keys(paragraphs).length+1;\n            setParagraphs({\n                ...paragraphs,\n                [newIndex]: ''\n            })\n            setTimeout(()=>{\n                let currentElement=event.target;\n                while(currentElement.parentNode && !currentElement.parentNode.matches('.textbox-contents')){\n                    currentElement=currentElement.parentNode;\n                }\n                currentElement.nextElementSibling.querySelector('p').focus();\n            },10);\n            \n        }\n        if (event.key==='ArrowDown'){\n            event.preventDefault();\n            setTimeout(()=>{\n                let currentElement=event.target;\n                while(currentElement.parentNode && !currentElement.parentNode.matches('.textbox-contents')){\n                    currentElement=currentElement.parentNode;\n                }\n                if(currentElement.nextElementSibling && currentElement.nextElementSibling.querySelector('p') ) {\n                    const nextP = currentElement.nextElementSibling.querySelector('p');\n                    nextP.focus();\n                    const range = document.createRange();\n                    range.selectNodeContents(nextP);\n                    range.collapse(false);\n                    const selection = window.getSelection();\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                };\n            },10);\n            \n        }\n        if (event.key==='ArrowUp'){\n            event.preventDefault();\n\n            setTimeout(()=>{\n                let currentElement=event.target;\n                while(currentElement.parentNode && !currentElement.parentNode.matches('.textbox-contents')){\n                    currentElement=currentElement.parentNode;\n                }\n                if (!currentElement.previousElementSibling.matches('h1') && currentElement.previousElementSibling.querySelector('p')) {\n                    const prevP = currentElement.previousElementSibling.querySelector('p');\n                    prevP.focus();\n                    const range = document.createRange();\n                    range.selectNodeContents(prevP);\n                    range.collapse(false); \n                    const selection = window.getSelection();\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                }\n            },10);\n            \n        }\n    }\n    \n    const handleSubmit = (event) =>{\n        event.preventDefault();\n        const formData = new FormData();\n        formData.append('post[title]',title);\n        \n        const textState=Object.values(paragraphs).filter((paragraph)=>paragraph!=='');\n        formData.append('post[body]',textState.join('\\n'));\n        formData.append('post[author_id]',sessionUser.id);\n        //handle files\n        Object.keys(photos).forEach((key)=>{\n            let param = `post[photo${key}]`;\n            let photoIdentifier = `!@%^#^photo${key}`\n\n            if (Object.values(paragraphs).includes(photoIdentifier)&& photos[key]) {\n                formData.append(param,photos[key])\n            } else if (!Object.values(paragraphs).includes(photoIdentifier)&& photos[key]){\n                formData.append(param,null);\n            }\n            // if (photos[key]) formData.append(param,photos[key]);\n        }) \n        dispatch(createPost(formData))\n        .then(()=>{\n                \n            history.push(`/user/${sessionUser.id}/posts`);\n\n        })\n        .catch(async res=>{\n            let data;\n            try{\n                data = await res.clone().json();\n            } catch{\n                data = await res.text();\n            }\n            if (data?.errors) setErrors(data.errors);\n            else if (data) setErrors([data]);\n            else setErrors([res.statusText]);\n        })\n    }\n\n    const disableButton = () => {\n        return bodyCheck ? '' : 'disabled'\n    }\n\n    if(!sessionUser) return(\n        <div className='post-load-container'>\n            <div className='post-load-body'>\n                <i style={{color:'white'}}className=\"fa-solid fa-spinner fa-spin\"></i>\n            </div>\n        </div>\n    );\nreturn (\n    <>\n    <div className='text-post-container'>\n        <div className='postheader-container'>\n            <div className='postHeader-body'>\n                <div className='createpost-pic'>\n                    <img src={sessionUser.profilepic}>\n                    </img>\n\n                </div>\n                <div className='postheader-left'>\n                    <div className=\"post-username\">{sessionUser.username}</div>\n                </div>\n                {/* button for the options on the right */}\n                <div className='postheader-right'>\n                    <button className='post-options'>\n                        <i className='fa-solid fa-gear'></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n            {/* start of the text area */}\n            <div className='newtext-container'>\n                <div className = 'newtext-body'>\n                        <div className='text-box'>\n                            <div className='textbox-contents'>\n                                <h1 onKeyDown={event=>handleTitleKeyDown(event)} className=\"contentEdit text-title\" contentEditable='true'></h1>\n                                {Object.keys(paragraphs).map((paragraph,index)=>{\n                                return <NewPostInput key={index} handleKeyDown={handleKeyDown} index={index+1} handleFile={handleFile} photoState={photos} create={true} handlePhotoRemove={handlePhotoRemove}/>\n                                })}\n                               \n                            </div>\n                        </div>\n                    <div className='add-paragraph-button'>\n                        <button onClick={(event)=>handleAddParagraph(event)}>\n                        </button>\n                    </div>\n                    <div className='text-footer'>\n                        {/* make this button a div to avoid clashing with the submit button */}\n                        <button className='close-text' onClick={()=>history.go(-2)}>Close</button>\n                        <button disabled={bodyCheck} className='text-submit' onClick={handleSubmit}>Post Now</button>\n                    </div>\n                </div>\n\n            </div>\n            {errors.length>0&& \n            <ul>\n                 {errors.map(error => <li className='login-errors' key={error}>{error}</li>)}\n             </ul>}\n        \n    </div>\n            \n            \n        \n    </>\n)\n\n    // have an option for files, \n    //optional \n}\n\nexport default NewTextPost;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/textposts/NewTextPostModal.js",["333","334","335","336","337","338","339"],[],"import { useSelector } from \"react-redux\"\nimport { useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { createPost } from \"../../../store/posts\";\nimport { Modal } from \"../../Context/Modal\";\nimport NewTextPost from \"./NewTextPost\";\nconst NewTextModal = () => {\n    const [title,setTitle] = useState('');\n    const [body,setBody] = useState('');\n    const sessionUser = useSelector(state=>  state.session.user);\n    \n\n    return (\n        <>\n        <Modal >\n            <NewTextPost  />\n        </Modal>\n\n        \n        </>\n    )\n\n    \n}\n\nexport default NewTextModal;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPhotoPostModal.js",["340","341","342","343","344","345"],[],"import { useSelector } from \"react-redux\"\nimport { useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport NewPhotoText from \"./NewPhotoPost\";\nimport { Modal } from \"../Context/Modal\";\n// import \nconst NewPhotoModal = () => {\n    const [title,setTitle] = useState('');\n    const [body,setBody] = useState('');\n    const sessionUser = useSelector(state=>  state.session.user);\n    \n\n    return (\n        <>\n        <Modal >\n            <NewPhotoText  />\n        </Modal>\n\n        \n        </>\n    )\n\n    \n}\n\nexport default NewPhotoModal;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPhotoPost.js",["346","347","348","349"],[],"import { useSelector } from \"react-redux\"\nimport { useState, useRef,useEffect } from \"react\"\nimport { createPost } from \"../../store/posts\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Redirect } from \"react-router-dom\";\nimport NewPostInput from \"./NewPostInputs\";\nconst NewPhotoPost = () => {\n    const [bodyCheck,setBodyCheck] = useState(true);\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const [title,setTitle] = useState('');\n    const [paragraphs,setParagraphs] = useState({1:''});\n    const [photos,setPhotos]=useState({1:null,2:null,3:null,4:null});\n    const [errors,setErrors]=useState([]);\n    const sessionUser = useSelector(state=>  state.session.user);\n    \n\n    useEffect(()=>{\n        const textofpost = Object.values(paragraphs).filter((value)=> typeof value ==='string' && !value.includes('!@%^#^photo'));\n        if(textofpost.some(paragraph=>paragraph.trim().length>0) ) {\n            setBodyCheck('');\n        } else {\n            setBodyCheck(true);\n        }\n    },[paragraphs]);\n\n    const handlePhotoRemove = (key,index) => {\n        setPhotos({...photos,[key]:null})\n        setParagraphs({...paragraphs,[index]:''})\n\n        //need to pass this down to the children\n    }\n    const handleFile = (event) => {\n\n        const file = event.currentTarget.files[0];\n        const pindex=event.target.dataset.type;\n\n\n        const nullPhotos = Object.keys(photos).filter((photonumber)=>photos[photonumber]===null);\n        const photoToFill = nullPhotos[0];\n        setPhotos({...photos,[photoToFill]:file});\n\n        setParagraphs({...paragraphs,[pindex]:`!@%^#^photo${photoToFill}`});\n\n        \n       \n    }\n    const handleTitleKeyDown = (event) => {\n        if (event.key==='Enter'){\n            setTimeout(()=>{\n                event.target.nextElementSibling.focus()\n            },0);\n        }\n    \n         setTitle(event.target.innerText);\n    }\n    const handleAddParagraph = (event) =>{\n        event.preventDefault();\n            const newIndex = Object.keys(paragraphs).length+1;\n            setParagraphs({\n                ...paragraphs,\n                [newIndex]: ''\n            })\n    }\n    const handleKeyDown = (event) => {\n        \n    \n        if(event.key !== 'Enter' && event.key!=='ArrowDown' && event.key!=='ArrowUp'){\n            setTimeout(()=>{\n                const pindex = event.target.dataset.type\n            \n                setParagraphs({...paragraphs,[pindex]: event.target.innerText});\n            },0);\n        }\n  \n     \n      \n    \n        if (event.key==='Enter'){\n            event.preventDefault();\n            const newIndex = Object.keys(paragraphs).length+1;\n            setParagraphs({\n                ...paragraphs,\n                [newIndex]: ''\n            })\n            setTimeout(()=>{\n                let currentElement=event.target;\n                while(currentElement.parentNode && !currentElement.parentNode.matches('.textbox-contents')){\n                    currentElement=currentElement.parentNode;\n                }\n                currentElement.nextElementSibling.querySelector('p').focus();\n            },10);\n            \n        }\n        if (event.key==='ArrowDown'){\n            event.preventDefault();\n            setTimeout(()=>{\n                let currentElement=event.target;\n                while(currentElement.parentNode && !currentElement.parentNode.matches('.textbox-contents')){\n                    currentElement=currentElement.parentNode;\n                }\n                if(currentElement.nextElementSibling && currentElement.nextElementSibling.querySelector('p') ) {\n                    const nextP = currentElement.nextElementSibling.querySelector('p');\n                    nextP.focus();\n                    const range = document.createRange();\n                    range.selectNodeContents(nextP);\n                    range.collapse(false);\n                    const selection = window.getSelection();\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                };\n            },10);\n            \n        }\n        if (event.key==='ArrowUp'){\n            event.preventDefault();\n\n            setTimeout(()=>{\n                let currentElement=event.target;\n                while(currentElement.parentNode && !currentElement.parentNode.matches('.textbox-contents')){\n                    currentElement=currentElement.parentNode;\n                }\n                if (!currentElement.previousElementSibling.matches('h1') && currentElement.previousElementSibling.querySelector('p')) {\n                    const prevP = currentElement.previousElementSibling.querySelector('p');\n                    prevP.focus();\n                    const range = document.createRange();\n                    range.selectNodeContents(prevP);\n                    range.collapse(false); \n                    const selection = window.getSelection();\n                    selection.removeAllRanges();\n                    selection.addRange(range);\n                }\n            },10);\n            \n        }\n    }\n    \n    const handleSubmit = (event) =>{\n        event.preventDefault();\n        const formData = new FormData();\n        formData.append('post[title]',title);\n        \n        const textState=Object.values(paragraphs).filter((paragraph)=>paragraph!=='');\n        formData.append('post[body]',textState.join('\\n'));\n        formData.append('post[author_id]',sessionUser.id);\n        //handle files\n        Object.keys(photos).forEach((key)=>{\n            let param = `post[photo${key}]`;\n            \n            if (photos[key]) formData.append(param,photos[key]);\n        })\n\n        dispatch(createPost(formData))\n            .then(()=>{\n                \n                history.push(`/user/${sessionUser.id}/posts`);\n\n            })\n            .catch(async res=>{\n                let data;\n                try{\n                    data = await res.clone().json();\n                } catch{\n                    data = await res.text();\n                }\n                if (data?.errors) setErrors(data.errors);\n                else if (data) setErrors([data]);\n                else setErrors([res.statusText]);\n            })\n    }\n\n    if(!sessionUser) return(\n        <div className='post-load-container'>\n            <div className='post-load-body'>\n                <i style={{color:'white'}}className=\"fa-solid fa-spinner fa-spin\"></i>\n            </div>\n        </div>\n    );\n    \nreturn (\n    <>\n    <div className='text-post-container'>\n        <div className='postheader-container'>\n            <div className='postHeader-body'>\n                <div className='createpost-pic'>\n                    <img src={sessionUser.profilepic}>\n                    </img>\n\n                </div>\n                <div className='postheader-left'>\n                    <div className=\"post-username\">{sessionUser.username}</div>\n                </div>\n                <div className='postheader-right'>\n                    <button className='post-options'>\n                        <i className='fa-solid fa-gear'></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n            {/* start of the text area */}\n            <div className='newtext-container'>\n                <div className = 'newtext-body'>\n                        <div className='text-box'>\n                            <div className='textbox-contents'>\n                                <h1 onKeyDown={event=>handleTitleKeyDown(event)} className=\"contentEdit text-title\" contentEditable='true'></h1>\n                                {Object.keys(paragraphs).map((paragraph,index)=>{\n                                if(index===0) return <NewPostInput key={index} form={'photo'} handleKeyDown={handleKeyDown} index={index} handleFile={handleFile} photoState={photos} create={true} handlePhotoRemove={handlePhotoRemove}/>\n                                return <NewPostInput key={index} handleKeyDown={handleKeyDown} index={index} handleFile={handleFile} photoState={photos} create={true}/>\n                                })}\n                               \n                            </div>\n                        </div>\n                    <div className='add-paragraph-button'>\n                        <button onClick={(event)=>handleAddParagraph(event)}>\n                        </button>\n                    </div>\n                    <div className='text-footer'>\n                        {/* make this button a div to avoid clashing with the submit button */}\n                        <button className='close-text' onClick={()=>history.go(-2)}>Close</button>\n                        <button disabled={bodyCheck} className='text-submit' onClick={handleSubmit}>Post Now</button>\n                    </div>\n                </div>\n\n            </div>\n            {errors.length>0&& \n            <ul>\n                 {errors.map(error => <li className='login-errors' key={error}>{error}</li>)}\n             </ul>}\n        \n    </div>\n            \n            \n        \n    </>\n)\n\n    // have an option for files, \n    //optional \n}\n\nexport default NewPhotoPost;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/NewPostInputs.js",["350","351","352","353","354","355","356"],[],"//this component will be called in each new text post depending on how many enters they pressed\n// depending on what opion is selected, it will rerender into a new form\n// default will be text\n// state variable will change depending on what is selected\n// each button, onClick will change that state variable to 'photo' or 'video'\n// this component will have those ready to render depending on the statevaraible\n// a menu will be displayed if it is focused on\nimport './newpostinputs.css';\nimport { useState, useRef,useEffect } from \"react\";\nconst NewPostInput = ({ form,handleKeyDown, index,handleFile, photoState,initialValue,create, handlePhotoRemove}) => {\n    const [type, setType] = useState('text');\n    const [showInputMenu, setInputMenu] = useState(create);\n    const [textIcon,setTextIcon] = useState('');\n    const [photoIcon,setPhotoIcon] = useState('');\n    const [videoIcon,setVideoIcon] = useState('');\n    const [linkIcon,setLinkIcon] = useState('');\n    const [focus,setFocus] = useState('');\n    const [photoPreview,setPhotoPreview]=useState(null);\n    const [initialText,setInitialText] = useState('');\n    const [initialTextset,setInitialTextset] = useState(false);\n    const [photoKey, setPhotoKey] = useState(0);\n    // this will let me know which key to set to null in the parent component\n    // parent component will have a handleRemoveFile that will turn the passed in key value pair to null\n\n    const pRef = useRef(null);\n    //this is for setting the menu to true, if the p tag is focused and not empty \n    useEffect(()=>{\n        if (form==='photo') setType('photo');\n        if (!create && initialValue.length===0) setInputMenu(true);\n    },[])\n\n    \n    useEffect(()=>{\n        if (!initialTextset){\n            if (initialValue && initialValue.includes('!@%^#^photo')){\n                let photoIndex=parseInt(initialValue[initialValue.length-1]); //this will grab the photo number\n                \n                setType('photo');\n                setPhotoPreview(photoState[photoIndex]);\n                setPhotoKey(photoIndex);\n            } else{\n                setInitialText(initialValue);\n            }\n        }\n        setInitialTextset(true);\n\n    },[])\n    const handleInput = (event) => {\n        setTimeout(()=>{\n            if(event.target.innerText.length>0) {       \n                setInputMenu(false)\n            } else setInputMenu(true);\n        },0);\n        \n        handleKeyDown(event);\n\n    }\n\n    // handle case if create is false\n    // i know what photo is being referenced, \n    \n    //\n\n\n    const handleFileInput = (event)=>{\n        //need to set photo preview and call the handleFile prop from parent\n        const photokey = handleFile(event);\n        setPhotoKey(photokey);\n        const file=event.currentTarget.files[0];\n        if (file){\n            const fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = () => setPhotoPreview(fileReader.result);\n        } else setPhotoPreview(null);\n    }\n    const ReturnToText =() =>{\n        return(\n            <div className='b2textcontainer'>\n            <button className='b2textbutton' onClick={()=>{\n                setType('text')\n                setInputMenu(true)}\n            }>\n                <i className='fa-solid fa-xmark'></i>\n            </button>\n            </div>\n        )\n    }\n    const handlePreviewClose =()=>{\n        handlePhotoRemove(photoKey,index);\n        setPhotoPreview(null);\n\n    }\n    const PhotoButton = () => {\n        let preview = null;\n        if (photoPreview) preview = \n        <>\n        <div className='preview-container'>\n\n            <img className='photoPreview' src={photoPreview} sizes='360' loading='lazy' draggable='false' alt='' />\n            <button className='removepreview' onClick={()=>handlePreviewClose()}>\n                <i className='fa-solid fa-xmark'></i>\n            </button>\n        </div>\n        </>\n        return (\n\n            <div className='photo-input-container'>\n                {preview}\n                {!photoPreview &&\n                <div className='photo-input-contents'>\n                    <button className='photofilebutton' onClick={()=>document.getElementById('photo-input').click()}>\n                    <i className=\"fa-solid fa-image fileicon\" ></i>\n                        <span className='filetext'>Upload Imag (Max: 4)</span>\n                    <input data-type={index} type='file' id='photo-input' onChange={event=>handleFileInput(event)}></input>\n                    </button>\n                    <ReturnToText />\n                </div>\n                }\n\n            </div>\n\n        )\n    }\n    // I need a options menu that will only populate if type is text, and user has not typed anything into the innerTag\n    //should i use a useRef that will track the innerText\n    return (\n        <>\n            <div className='input-container'>\n                <div className='inputBody'>\n                    {type === 'text' && <p suppressContentEditableWarning={true} ref={pRef} key={index} data-type={index} onKeyDown={(event) => handleInput(event)} onFocus={()=>setFocus('block')} onBlur={()=>setFocus('none')} id={`paragraph-${index}`} className='contentEdit text-paragraph' contentEditable='true'>{initialText}</p>}\n                    {type === 'photo' && <PhotoButton />}\n                </div>\n                {type ==='text' && showInputMenu &&\n                <div className='inputmenucontainer'>\n                    <div className='inputmenubody'>\n                        <div className='inputmenucontent'>\n                            {type !== 'text' && <button className='inputbuttons' onClick={() => setType('text')}>\n                                <i className={`fa-solid fa-a fa-lg inputicons ${textIcon}`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--blue))' }}\n                                onMouseEnter={()=>setTextIcon('fa-bounce')} onMouseLeave={()=>setTextIcon('')}></i>\n                            </button>}\n                            {Object.values(photoState).filter((value)=>value===null).length>0 && <button className='inputbuttons' onClick={() => setType('photo')}>\n                                <i className={`fa-solid fa-image fa-lg inputicons ${photoIcon}`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--red))' }}\n                                onMouseEnter={()=>setPhotoIcon('fa-bounce')} onMouseLeave={()=>setPhotoIcon('')}></i>\n                            </button>}\n                            {/* <button className='inputbuttons' onClick={() => setType('link')}>\n                                <i className= {`fa-solid fa-link fa-lg inputicons ${linkIcon}`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--green))' }}\n                                onMouseEnter={()=>setLinkIcon('fa-bounce')} onMouseLeave={()=>setLinkIcon('')}></i>\n                            </button>\n                            <button className='inputbuttons' onClick={() => setType('link')}>\n                                <i className={`fa-solid fa-video fa-lg inputicons ${videoIcon}`} style={{ backgroundColor: 'transparent', color: 'RGB(var(--purple))' }}\n                                onMouseEnter={()=>setVideoIcon('fa-bounce')} onMouseLeave={()=>setVideoIcon('')}></i>\n                            </button> */}\n                        </div>\n                    </div>\n                </div>\n                }\n            </div>\n        </>\n    )\n\n}\n\nexport default NewPostInput;","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/index.js",["357","358","359","360","361","362","363","364","365","366","367","368"],[],"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { useEffect, useState,useRef } from \"react\"\nimport * as postActions from '../../store/posts';\nimport * as userActions from '../../store/user';\nimport * as followActions from '../../store/follows';\nimport { Route , Switch,useParams, NavLink,Link,useHistory } from \"react-router-dom\";\nimport { Modal } from \"../Context/Modal\";\nimport PostsDashboard from \"./posts\";\nimport './index.css';\nimport LikesDashboard from \"./likes\";\nimport UserDashboard from \"./UserDashBoard\";\nimport UserFollowDashboard from \"./UserFollowDashoard\";\nimport { Redirect,useLocation } from \"react-router-dom/cjs/react-router-dom.min\";\nimport AccountSettings from \"./AccountSetings\";\nconst UserShowPage = () =>{\n    const dispatch = useDispatch();\n    const {userid} = useParams();\n    const [pageType,setPageType] =useState('false');\n    const [tabSelection,setTabSelection] = useState('');\n    const history = useHistory();\n    const location = useLocation();\n    const [errors,setErrors]=useState([]);\n    const [accountSettings,setAccountSettings] = useState(false);\n    const idRef = useRef()\n\n    useEffect(()=>{\n        setTabSelection(location.pathname.split('/')[3]);\n    },[location])\n    // need sessionUser to determine if it will be a \n    //user or otheruser render\n    // each user will have a profile Pic, and backgroundImage\n    // need to fetch user from backend\n    const user= useSelector(state=>state.users[userid]);\n    // const user = users[userid];\n    useEffect(() => {\n       \n        dispatch(userActions.fetchUser(userid));\n        idRef.current=userid\n      }, [userid]);\n    const sessionUser = useSelector(state=>state.session.user);\n    const followed = useSelector(followActions.userFollowed(sessionUser,userid));\n    const handleFollowButton = (event)=>{\n    event.preventDefault();\n    if(!sessionUser){\n        setErrors([]);\n        setErrors(['Login to Follow!']);\n        setTimeout(()=>{\n            setErrors([])\n        },3000)\n    } else{\n        const follow={user_id: user.id, follower_id: sessionUser.id}\n        dispatch(followActions.createFollow(follow));\n    }\n}\nconst handleUnfollowButton = (event) =>{\n    event.preventDefault();\n    dispatch(followActions.removeFollow(followed[0].id));\n}\n    // this logic will be handled by the userdashboard\n    // useEffect(()=>{\n    //     dispatch(userActions.fetchUser(userid))\n    // },[]);\n\n    // useEffect(()=>{\n    //     history.push(`/user/${userid}/posts`)\n    // },[]);\n    \n    const userPosts = useSelector(state=>state.posts);\n    if (!user) {\n    return(\n        <div className='post-load-container'>\n            <div className='post-load-body'>\n                <i style={{color:'white'}}className=\"fa-solid fa-spinner fa-spin\"></i>\n            </div>\n        </div>\n    )\n    }\n  \n\n    // if sessionUser matches userId passed in \n    // background image\n    // profile pic, username\n    // profile settings\n    // dashboard that will switch between posts, likes and following\n    // each post will have the ability to edit, delete\n    // ability to search posts\n\n\n    // when not matched with sessionUser\n    // has option to follow \n    // does not have option to edit or delete posts\n    \n    return (\n        \n        <>\n            <div className='show-container'>\n                <div className='show-body'>\n                    <div className='show-contents'>\n                        <div className='profile-container'>\n                            <header className='profile-header'>\n                                <div className='bgimage-frame'>\n                                    <img className='bgimage' src={user.background}/>\n                                </div>\n                                <div className='profile-bio-container'>\n                                    <div className='profilepic-container'>\n                                        <div className='profilepic-body'>\n                                            <div className='profilepic-contents'>\n                                                <div className='profilepic-frame'>\n                                                    <img className='userPic' src={user.profilepic}/>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className='bio-container'>\n                                        <h1 className='blogname'>{user.username}</h1>\n                                        <div className='bio-container'>\n                                            \n                                        </div>\n                                        <div className='header-buttons-contents'>\n                                        {/* make this button follow if sessionuser != user */}\n                                        { sessionUser && user.username === sessionUser.username &&\n                                            <button className='profileSettings' onClick = {()=>setAccountSettings(true)}>\n                                                <span>\n                                                    <i className='fa-solid fa-gear'></i>\n                                                    Account Settings\n                                                </span>\n                                            </button>\n                                        }\n                                            { sessionUser && user.username !== sessionUser.username && followed.length===0 &&\n                                            <button className='profileSettings' onClick={event=>handleFollowButton(event)}>\n                                                <span>\n                                                    Follow\n                                                </span>\n                                            </button>\n                                            }\n                                            { sessionUser && user.username !== sessionUser.username && followed.length>0 &&\n                                            <button className='profileSettings'  onClick={event=>handleUnfollowButton(event)}>\n                                                <span>\n                                                    Unfollow\n                                                </span>\n                                            </button>\n                                            }\n                                            { !sessionUser && \n                                            <button className='profileSettings' onClick={event=>handleFollowButton(event)}>\n                                                <span>\n                                                    Follow\n                                                </span>\n                                            </button>\n                                            }\n                                            {errors.length>0 &&\n                                                <div className='userprofilefollowerror'>\n                                                    <span>{errors[0]}</span>\n                                                </div>\n                                            }\n                                            {/* { !sessionUser && \n                                            <button className='profileSettings' onClick={event=>handleUnfollowButton(event)}>\n                                                <span>\n                                                    Unfollow\n                                                </span>\n                                            </button>\n                                            } */}\n                                            \n                                        </div>\n                                    </div>\n                                </div>\n                            </header>\n                            {/* navigation for which posts to see\n                            will be all,posts, likes, reblogs\n                            will be filtered in descending creation\n                            will switch between them with new routes */}\n                            <div className='profilenavigation'>\n                                \n                                <div className='profilelinks'>\n                                    <NavLink className={(tabSelection===`posts`) ? 'active' : ''}\n                                    onClick={()=>setTabSelection('posts')} \n                                    to={`/user/${userid}/posts`}>Posts</NavLink>\n                                    <NavLink className={tabSelection===`likes` ? 'active' : ''} \n                                    onClick={()=>setTabSelection('likes')} \n                                    to={`/user/${userid}/likes`}>Likes</NavLink>\n                                    <NavLink className={tabSelection===`followers` ? 'active' : ''} \n                                    onClick={()=>setTabSelection('followers')} \n                                    to={`/user/${userid}/followers`}>Followers</NavLink>\n                                    <NavLink className={tabSelection===`follows` ? 'active' : ''} \n                                    onClick={()=>setTabSelection('follows')} \n                                    to={`/user/${userid}/follows`}>Follows</NavLink>\n                                </div>\n                            </div>\n                            <div className='profile-meat'>\n                            <Switch>\n                                <Route path='/user/:userid/posts' >\n                                    <UserDashboard type={'userposts'}/>\n                                </Route>\n                                <Route path='/user/:userid/likes' >\n                                    <UserDashboard  type={'likes'}/>\n                                </Route>\n                                <Route path='/user/:userid/follows'>\n                                    <UserFollowDashboard type={'follows'} />\n                                </Route>\n                                <Route path='/user/:userid/followers'>\n                                    <UserFollowDashboard type={'followers'} />\n                                </Route>\n                                <Route exact path='/user/:userid/'>\n                                    <UserDashboard type={'userposts'} />\n                                </Route>\n                                <Redirect to='/user/:userid' />\n                            </Switch>\n                            </div>\n                        </div>\n                        <div className='show-contents-right'>\n\n                        </div>\n                    </div>\n\n\n                </div>\n\n            </div>\n            { accountSettings && <Modal onClose={()=>setAccountSettings(false)}>\n                \n                    <AccountSettings closeModal={setAccountSettings} user={user}/>\n            </Modal>}\n        </>\n\n    )\n    \n    //logic to show loading if posts is still being grabbed;\n}\n\nexport default UserShowPage;",[],"/Users/vincentpham/Documents/mumblr/frontend/src/store/user.js",["369"],[],"\n// consts\n\nimport csrfFetch from \"./csrf\";\nimport { receivePost, receiveUserPosts } from \"./posts\";\nconst RECEIVE_USER = 'api/RECEIVEUSER'\nconst DELETE_USER = 'api/DELETEUSER'\nconst RECEIVE_USERS = 'api/RECEIVEUSERS'\n\n//action types\n\nexport const receiveUser = (payload) => ({\n    type: RECEIVE_USER,\n    user: payload\n})\n\nexport const receiveUsers = (users) =>({\n    type: RECEIVE_USERS,\n    users\n})\nexport const deleteUser = (userId) => ({\n    type:DELETE_USER,\n    userId\n});\n\n//gett\nexport const getUser = id => state =>{\n    return state?.users ? state.users[id] : null;\n    \n}\nexport const fetchUsers =() => async(dispatch) => {\n    let response = await fetch(`/api/users`)\n    if (response.ok){\n        const users = await response.json();\n        dispatch(receiveUsers(users));\n        return users;\n    }\n}\nexport const fetchUser = (id,type) => async(dispatch) =>{\n    // debugger\n    let response = await fetch(`/api/users/${id}`)\n    if (response.ok){\n        const data = await response.json();\n        dispatch(receiveUser(data.user));\n        if(type==='spotlight'){\n            dispatch(receiveUserPosts(data.posts));\n        }\n        return data;\n    }\n\n}\n\nexport const fetchUserFollows = (id) => async dispatch =>{\n\n}\n\nexport const removeUser = (userid) => async (dispatch) => {\n    const response = await csrfFetch(`/api/users/${userid}`,{\n        method: 'DELETE'\n    });\n    if (response.ok){\n        //when a user deletes i will call logout and then destroy\n        dispatch(deleteUser(userid))\n    }\n};\n\nexport const updateUser = (formData,userid) => async dispatch => {\n    const response = await csrfFetch(`/api/users/${userid}`,{\n        method: 'PATCH',\n        body: formData\n    })\n        const data = await response.json();\n        dispatch(receiveUser(data.user));\n        dispatch(receiveUserPosts(data.posts));\n        return response;\n    \n}\n//users reducer\n\nconst userReducer = (state={},action) => {\n    const newState={...state};\n    switch (action.type) {\n        case RECEIVE_USERS:\n            return {...state, ...action.users}; \n\n        case RECEIVE_USER:\n            newState[action.user.id]=action.user;\n            return newState;\n        case DELETE_USER:\n            delete newState[action.user.username];\n            return newState;\n        default:\n            return newState;\n    }\n\n}\n\nexport default userReducer;\n\n\n\n","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/likes.js",["370","371","372","373","374","375"],[],"import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst LikesDashboard = ({posts}) =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n  \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n  \n    return (\n        <>\n        {posts.map ((post)=>{\n        return <ShowPost post={post} profile={true}/>})\n        }\n        </>\n    );\n}\nexport default LikesDashboard;\n","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/posts.js",["376","377","378","379","380","381"],[],"import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst PostsDashboard = ({posts,type}) =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n  \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    return (\n        <>\n        {posts.map ((post)=>{\n        return <ShowPost post={post} profile={true}/>})\n        }\n        </>\n    );\n}\nexport default PostsDashboard;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/UpdatePostModal.js",["382","383","384","385","386","387"],[],"import { useSelector } from \"react-redux\"\nimport { useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { Modal } from \"../Context/Modal\";\nimport UpdatePost from \"./UpdatePost\";\n// import NewTextPost from \"./NewTextPost\";\nconst UpdatePostModal = () => {\n    const [title,setTitle] = useState('');\n    const [body,setBody] = useState('');\n    const sessionUser = useSelector(state=>  state.session.user);\n    \n\n    return (\n        <>\n        <Modal >\n            <UpdatePost  />\n        </Modal>\n\n        \n        </>\n    )\n\n    \n}\n\nexport default UpdatePostModal;","/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/UpdatePost.js",["388","389","390","391","392","393","394","395","396","397"],[],"/Users/vincentpham/Documents/mumblr/frontend/src/store/likes.js",["398"],[],"/Users/vincentpham/Documents/mumblr/frontend/src/store/comments.js",["399"],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/posts/PostFooter.js",["400","401","402","403","404","405","406","407","408","409","410","411","412","413","414"],[],"\n\n//this component will contain \n// notes, a total of all likes, comments, and reblogs\n//notes will be a button that opens a tab menu\n// buttons for comment, reblog and like\n// those will open the menu which is defaulted on comments\n// comment will automatically open the menu since comment is the deafult \n// likes will trigger a like\n\n//in the menu, there will be tabs for comments, reblogs, and likes\n// comment tab will show comments, \n// reblogs will show reblogs \n// likes will show all the user likes\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useState, useEffect } from \"react\";\nimport { Link, Redirect } from \"react-router-dom/cjs/react-router-dom.min\";\nimport * as commentsActions from '../../store/comments';\nimport * as likesActions from '../../store/likes';\nimport * as followActions from '../../store/follows';\nimport './postsfooter.css'\nimport { fetchPost } from \"../../store/posts\";\nimport { Modal } from \"../Context/Modal\";\n\nconst PostFooter = ({ post }) => {\n    // this is to pass down logged in status to child components\n    const [loggedin, setLoggedIn] = useState(false);\n    const [showTabMenu, setShowTabMenu] = useState(false);\n    const [errors,setErrors] = useState(\n        {\n            like:'',\n            follow: '',\n        }\n    );\n    const [tabMenuSelection, setTabMenuSelection] = useState('comments');\n    const [body,setBody] = useState('');\n    const sessionUser = useSelector(state => state.session.user);\n    const followed = useSelector(followActions.userFollowed(sessionUser,post.author.id));\n    // cons [isActive, setIsActive] = useState();\n    const dispatch = useDispatch();\n    // will have a postid passed in from parent\n    //can access the post from the state and grab data\n    // const liked = useSelector(likesActions.userLike(sessionUser.id,post.id));\n    // to remove any errors \n\n    const handleFollowButton = (event)=>{\n        event.preventDefault();\n        if(!sessionUser){\n            setErrors(\n                {\n                    like:'',\n                    follow: '',\n                }\n            )\n            setErrors(state=>{\n                return {...state,['follow']:'login to follow'}\n            })\n            setTimeout(()=>{\n                setErrors( {\n                    like:'',\n                    follow: '',\n                })\n            },5000)\n        } else{\n            const follow={user_id: post.author.id, follower_id: sessionUser.id}\n            dispatch(followActions.createFollow(follow));\n        }\n    }\n    const handleUnfollowButton = (event) =>{\n        event.preventDefault();\n        dispatch(followActions.removeFollow(followed[0].id));\n    }\n\n  \n    const handleNotesButtonClick = (event) => {\n        if (!showTabMenu) {\n            setShowTabMenu(true);\n            dispatch(fetchPost(post.id));\n        } else {\n            setShowTabMenu(false);\n        }\n\n        \n    }\n   \n\n    const comments = useSelector(commentsActions.postComments(post.id));\n    const likes = useSelector(likesActions.postLikes(post.id));\n\n    const NotesButtons = () => {\n        // depending on if this was clicked or not will change what is in the button contents\n        // this button is strictly for close and opening the tabs menu\n        return (\n            <div className='notebutton-container'>\n                <span className='notebutton-body'>\n                    <span className='notebutton-contents'>\n                        <button className='notesbutton' onClick={() => handleNotesButtonClick()}>\n                            <span className='notesbutton-body'>\n                                {!showTabMenu &&\n                                    <>\n                                        <span className='shownotesbutton-container'>\n                                            <span className='show-notes-body'>\n                                                <div className='show-notes-content'>\n                                                    <span className='show-notes-text'>\n                                                        <span className='notes-count'>\n                                                            {post.commentcount + post.likescount}\n                                                        </span>\n                                                        notes\n                                                    </span>\n\n                                                </div>\n\n                                            </span>\n\n                                        </span>\n                                    </>\n\n\n                                }\n                                {showTabMenu && <div className='notesbutton-content'>\n\n                                    <i className=\"fa-solid fa-x\"></i>\n                                    <span className='notesbutton-text'>Close Notes</span>\n                                </div>}\n\n                            </span>\n                        </button>\n\n                    </span>\n\n                </span>\n            </div>\n\n        )\n    }\n\n    const FooterTabsMenu = () => {\n        // this will contain the tabs for the menu\n        // it will have 2 separate tabs depending on which one is clicked\n        // one will render the comments from the post using the postId and gathering the comments\n        // the other will render users who likes, which will be gathered from the likes in the state\n        // where the post_id matches the post_id in likes state \n        return (\n            <div className='tabsmenu-container'>\n                <div className='tabsmenu-body'>\n                    <div className='tabsmenu-navigation'>\n                        <button className={'tabnavbutton'} onClick={() => setTabMenuSelection('comments')}>\n                            <i className=\"fa-regular fa-comment\"></i>\n                            <span className='tabnavbutton-contents'>\n                                {post.commentcount}\n                            </span>\n                        </button>\n                        <button className='tabnavbutton' onClick={() => setTabMenuSelection('likes')}>\n                            <span className='tabnavbutton-contents'>\n                                <i className=\"fa-solid fa-heart\"></i>\n                                {post.likescount}\n                            </span>\n                        </button>\n\n\n                    </div>\n\n                </div>\n\n            </div>\n        )\n    }\n\n\n   \n\n   \n    return (\n        <>\n            <div className='postfoot-container'>\n                <footer className='postfoot-body'>\n                    <div className='postfootbuttons-container'>\n                        {/* will contain a the buttons */}\n                        <NotesButtons />\n                        <FooterButtons \n                            post={post}\n                            setShowTabMenu={setShowTabMenu}\n                            sessionUser={sessionUser}\n                        />\n                    </div>\n                    <div className='posttabmenu-container'>\n                        <div className='postnavmenu-body'>\n                            {showTabMenu && <FooterTabsMenu />}\n                            \n                            {showTabMenu && tabMenuSelection === 'comments' && <CommentTextArea post={post}/>}\n                            {/* depending on what is clicked, will set the tab */}\n                            {/* <CommentTextArea sessionUser={sessionUser}/> */}\n                            {showTabMenu && tabMenuSelection === 'comments' && comments.length > 0 && (\n                                <div className='comments-area'>\n                                    {comments.map((comment) => (\n                                        <Comments\n                                            key={comment.id}\n                                            username={comment.commenter.username}\n                                            profilepic={comment.commenter.profilepic}\n                                            body={comment.body}\n                                            id={comment.commenter.id}\n                                            comment_id={comment.id}\n                                            postId = {post.id}\n                                        />\n                                    ))}\n                                </div>\n                            )}\n                            {showTabMenu && tabMenuSelection === 'likes' &&\n                                likes.map((like) => {\n                                    return <Likes likerpic={like.liker.profilepic} likerusername={like.liker.username} liker_id={like.liker.id} />\n                                })}\n                        </div>\n\n                    </div>\n                </footer>\n\n            </div>\n        </>\n    )\n}\nconst CommentTextArea = ({post}) => {\n    const dispatch = useDispatch();\n    const sessionUser=useSelector(state=>state.session.user);\n    const [body,setBody] = useState('');\n    const [errors,setErrors] = useState('');\n    const [disable,setDisable]=useState(true)\n    useEffect(()=>{\n        setTimeout(()=>{\n            setErrors('')\n        },3000)\n    },[errors])\n    useEffect(()=>{\n        if(body.length>0){\n            setDisable(false);\n        } else{\n            setDisable(true);\n\n        }\n    },[body])\n    const handleCommentSubmit=(event)=>{\n        event.preventDefault();\n        const formData=new FormData();\n        formData.append('comment[body]', body)\n        formData.append('comment[user_id]',sessionUser.id)\n        formData.append('comment[post_id]',post.id);\n        setErrors('');\n        dispatch(commentsActions.createComment(formData))\n            .catch(async (res)=>{\n                let data;\n                try {\n                    data=await res.clone().json();\n                } catch {\n                    data = await res.text();\n                }\n                if (data?.errors) setErrors(data.errors);\n                else if (data) setErrors(data);\n                else setErrors(res.statusText);\n            })\n        setBody('');\n\n    }\n    return (\n        <>\n            {sessionUser && <div className='commenttext-container'>\n                <div className='commenttext-body'>\n                    <div className='comment-profile-pic'>\n                        <div className='profilepic-frame1'>\n                            <img className='reply-profilepic' src={sessionUser.profilepic}></img>\n                        </div>\n                    </div>\n                    <div className='reply-container'>\n                        <div className='textarea-container'>\n                            <textarea value={body} onChange={(event)=>setBody(event.target.value)} placeholder='type here' maxLength='475' rows='1' className='reply-textarea'></textarea>\n                        </div>\n                        <button disabled={disable} onClick={(event)=>handleCommentSubmit(event)} className='reply-button'>\n                            <span>Reply</span>\n                        </button>\n\n                    </div>\n\n                </div>\n                {errors && \n                <div className='comment-error'> \n                    <span style={{color:'white'}}>{errors}</span>\n                </div>}\n            </div>}\n        </>\n    )\n}\nexport default PostFooter;\n\nconst Comments = ({ comment_id, id,username, profilepic, body,postId }) => {\n    const dispatch = useDispatch();\n    const sessionUser=useSelector(state=> state.session.user);\n    const [update,setUpdate]=useState(false);\n    const [updateComment,setUpdatedComment] = useState(body);\n    const [updateErrors,setUpdateErrors] = useState('');\n    \n    const handleCommentDelete = (event)=>{\n        event.preventDefault();\n        dispatch(commentsActions.removeComment(comment_id));\n    }\n    useEffect(()=>{\n        setTimeout(()=>{\n            setUpdateErrors([])\n        },5000)\n    },[updateErrors])\n    const handleCommentUpdate =(event)=>{\n        event.preventDefault();\n        const formData=new FormData();\n        formData.append('comment[body]', updateComment);\n        formData.append('comment[user_id]',sessionUser.id);\n        formData.append('comment[post_id]',postId);\n        setUpdateErrors([]);\n        dispatch(commentsActions.updateComment(formData,comment_id))\n            .then(()=>{\n                setUpdate(false);\n            })\n            .catch(async (res)=>{\n                let data;\n                try {\n                    data=await res.clone().json();\n\n                } catch {\n                    data = await res.text();\n                }\n                if (data?.errors) setUpdateErrors(data.errors);\n                else if (data) setUpdateErrors(data);\n                else setUpdateErrors(res.statusText);\n            })\n\n    }\n    // need to take in commenterusername, commenter profilepic, and comment body\n    return (\n        <>\n            \n            <div className='commentsshow-container'>\n                {/* will need to map over every comment related to the post and return it */}\n                {/* comment show */}\n                <div className='comment-container'>\n                    <div className='comment-body'>\n                        <div className='comment-content'>\n                            <div className='commenter-profilepic'>\n                                <div className='commenter-profilepic-frame'>\n                                    {/* will need to link to a user's profile, can grab grom the the comment map */}\n                                    <Link to={`/user/${id}`} className='commenterlink'>\n                                        <img className='commenterimage' src={profilepic}></img>\n                                    </Link>\n                                </div>\n\n                            </div>\n                            <div className='commenttext-container'>\n                                <div className='commenter-username'>\n                                    <span className='commenter-username-text'>\n                                        {username}\n                                        {/* fill in with commenter username from state */}\n                                    </span>\n\n                                </div>\n                                \n                                <div className='replies-container'>\n                                    <div className='reply-body'>\n                                        <div className='reply-content'>\n                                            <p className='reply'> {body}</p>\n                                        </div>\n\n                                    </div>\n                                </div>\n\n                            </div>\n\n                        </div>\n\n\n                    </div>\n\n                </div>\n                { sessionUser && sessionUser.id === id && \n                <>\n                <div className='comment-buttons'>\n                    <div>\n                        <button className='comment-delete' onClick={event=> handleCommentDelete(event)}>\n                            <i class=\"fa-solid fa-dumpster\"></i>\n                        </button>\n                    </div>\n                    <div>\n                        <button className='comment-update' onClick={()=>setUpdate(true)}>\n                            <i className=\"fa-solid fa-pen-to-square\"></i>\n                        </button>\n                    </div>\n                </div>\n                </>\n                }\n            </div>\n            {update && (\n                <Modal onClose={()=>{\n                    setUpdate(false);\n                    setUpdatedComment(body);\n                    }}>\n                <div className='commenttext-container'>\n                    <div className='commenttext-body'>\n                            <div className='comment-profile-pic'>\n                                <div className='profilepic-frame1'>\n                                    <img className='reply-profilepic' src={sessionUser.profilepic}></img>\n                                </div>\n                            </div>\n                        <div className='reply-container'>\n                            <div className='textarea-container'>\n                                <textarea value={updateComment} onChange={(event)=>setUpdatedComment(event.target.value)} placeholder='type here' maxLength='475' rows='1' className='reply-textarea'></textarea>\n                            </div>\n                            <button onClick={(event)=>handleCommentUpdate(event)} className='update-comment-button'>\n                                <span>Update</span>\n                            </button>\n                        </div>\n                    </div>\n                    {updateErrors.length>0 && \n                        <div className='update-error'> \n                            <span style={{color:'white'}}>{updateErrors[0]}</span>\n                        </div>}\n                </div>\n                </Modal>\n            )}\n\n        </>\n    )\n}\n\n\nconst FooterButtons = ({post,setShowTabMenu,sessionUser}) => {\n    // will contain 2 buttons(3 if time)\n    // const liked = useSelector()\n    const [errors,setErrors] = useState(\n        {\n            like:'',\n            follow: '',\n        }\n    );\n    const dispatch = useDispatch();\n    // const sessionUser = useSelector(state=> state.session.user);\n    const userid= sessionUser ? sessionUser.id : 0;\n    const liked = useSelector(likesActions.userLike(userid,post.id));\n    \n    useEffect(\n        ()=>{\n        setTimeout(()=>{\n            setErrors(\n                {\n                    like:'',\n                    follow:''\n                }\n            )},4000)\n        }\n    ,[errors])\n    const handleLikeButton = (event) => {\n        event.preventDefault();\n        if(!sessionUser){\n            setErrors(state=>{\n                return {...state,like: 'Login to Like!'}\n            });\n            return;\n        } \n            const like = { post_id: post.id, user_id: sessionUser.id }\n            const likeId=dispatch(likesActions.createLike(like));\n           \n    }\n    const handleUnlikeButton = (event) =>{\n        event.preventDefault();\n        dispatch(likesActions.removeLike(liked[0].id))\n    }\n    return (\n        <div className='footerbuttons-container'>\n            <div className='footbutton-container'>\n                <button className='commentbutton' onClick={() => {\n                    setShowTabMenu(true);\n                    dispatch(fetchPost(post.id))\n                    }}>\n                    <i className=\"fa-regular fa-comment\"></i>\n                </button>\n            </div>\n            <div className='footbutton-container'>\n                \n                {sessionUser && liked.length>0 && <button className={`likesbutton  true`} onClick={event => handleUnlikeButton(event)}>\n                    <i color='rgb(var(--red))' className=\"fa-solid fa-heart\"></i>\n                </button>\n                }\n                {sessionUser && liked.length===0 &&\n                <button className={`likesbutton`} onClick={event => handleLikeButton(event)}>\n                    <i className=\"fa-solid fa-heart\"></i>\n                </button>\n                }\n                {!sessionUser && \n                <button className={`likesbutton`} onClick={event => handleLikeButton(event)}>\n                    <i className=\"fa-solid fa-heart\"></i>\n                </button>\n                }\n                \n                { errors.like &&\n                <div className='like-errors'>\n                    <span>\n                        {errors.like}\n                    </span>\n                </div>\n                }\n            </div>\n\n        </div>\n    )\n}\n\nconst Likes = ({ likerpic, likerusername,liker_id }) => {\n    // will have a useSelector to pull likes from the state\n    //will map over the likers for the post and render\nconst sessionUser = useSelector(state=> state.session.user);\nconst followed = useSelector(followActions.userFollowed(sessionUser,liker_id));\nconst [errors,setErrors]=useState([]);\nconst [sameUser,setSameUser]=useState(false);\nconst dispatch = useDispatch();\nconst handleFollowButton = (event)=>{\n    event.preventDefault();\n    if(!sessionUser){\n        setErrors([]);\n        setErrors(['Login to Follow!']);\n        setTimeout(()=>{\n            setErrors([])\n        },3000)\n    } else{\n        const follow={user_id: liker_id, follower_id: sessionUser.id}\n        dispatch(followActions.createFollow(follow));\n    }\n}\nconst handleUnfollowButton = (event) =>{\n    event.preventDefault();\n    dispatch(followActions.removeFollow(followed[0].id));\n}\nuseEffect(()=>{\n    if(sessionUser && sessionUser.id === liker_id){\n        setSameUser(true);\n    }\n},[sessionUser])\n    return (\n        <>\n        <div className='likeslist-container'>\n            <div className='likeslist-body'>\n                <div className='likeslist-content'>\n                    {/* this is where i will map over the likers. will be pulled from the likes where post_id matches the post */}\n                    <div className='liker-container'>\n                        <div className='liker-profilepic-container'>\n                            <div className=\"liker-profilepic-body\">\n                                <Link className='liker-link' to={`/user/${liker_id}`}>\n                                    <img className='liker-pic' src={likerpic}></img>\n                                </Link>\n                            </div>\n\n                        </div>\n                        <div className=\"liker-information\">\n                            <div className='liker-username'>\n                                <span>{likerusername}</span>\n                            </div>\n                            {followed.length===0 && !sameUser && <button onClick={(event)=>handleFollowButton(event)} className='follow-button' style={{ backgroundColor: 'transparent', border: 'none', boxShadow: 'none' }}><span>Follow</span></button>}\n                            {followed.length>0 && !sameUser &&   <button onClick={(event)=>handleUnfollowButton(event)} className='follow-button' style={{ backgroundColor: 'transparent', border: 'none', boxShadow: 'none' }}><span>Unfollow</span></button>}    \n\n                        </div>\n\n                    </div>\n\n                </div>\n            </div>\n            { errors.length>0 &&\n                    <div style={{backgroundColor:'rgb(var(--red)'}}className='follow-footer-errors'>\n                            <span style={{color:'white'}}>\n                                {errors[0]}\n                            </span>\n                    </div>\n            }\n\n        </div>\n        </>\n    )\n}","/Users/vincentpham/Documents/mumblr/frontend/src/store/follows.js",["415","416","417","418"],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/Spotlight.js",["419","420","421","422"],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/Dashboard/DashBoardPartial.js",["423","424","425","426","427","428","429","430"],[],"import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect,useParams} from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\nconst DashboardPartial = ({type}) =>{\n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    const [postsMap,setPostsMap] = useState([]);\n    const [pageNumber,setPageNumber]=useState(1);\n    const [loading,setLoading] = useState(true);\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState(false);\n    const [morePosts,setMorePosts]=useState(true);\n    const [initialLoad,setInitialLoad] = useState(false);\n    const [noPosts,setNoPosts] = useState(false);\n    const observer = useRef();\n    if ((type==='foryou'||type==='trending') && !sessionUser){\n        <Redirect to='/explore/preview'/>\n    }\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return ;\n        if(observer.current) observer.current.disconnect();\n        if(!morePosts) return;\n        \n        observer.current = new IntersectionObserver(entries =>{\n            if (entries[0].isIntersecting && morePosts) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.observe(node);\n    },[loading,morePosts]);\n\n    useEffect(()=>{\n        setPostsMap([]);\n    },[])\n    useEffect(()=>{\n        setPostsMap([]);\n        setPageNumber(1);\n\n        \n        dispatch(postActions.clearPosts());\n        setTimeout(()=>{\n        dispatch(postActions.fetchPosts(pageNumber,type))\n            .then(res=>{\n                setPostsMap([]);\n                setMorePosts(res.postsleft.postsLeft);\n                if (!res.posts){\n                    setNoPosts(true);\n                    setLoading(false);\n                } else {\n                    setNoPosts(false);\n                    updatePostsMap(res.posts,type)\n                }\n            })\n         },0 )\n         return ()=>{\n            setPostsMap([]);\n         }\n    },[type])\n    const posts = useSelector(state=>state.posts);\n    useEffect(()=>{\n        \n        updatePostsMap(posts,type);\n       \n    },[posts])\n\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setLoading(true);\n        setError(false);\n        if(pageNumber!==1){\n        dispatch(postActions.fetchPosts(pageNumber,type))\n            .then( (res) =>{\n                setMorePosts(res.postsleft.postsLeft);\n                setLoading(false);\n            })\n        }else{\n            setLoading(false);\n        }\n    },[pageNumber]);\n    const updatePostsMap = (newPosts, type) => {\n        setPostsMap((state) => {\n          const stateCopy = [...state];\n    \n          // Update existing posts\n          Object.values(newPosts).forEach((post) => {\n            const postIndex = stateCopy.findIndex((origPost) => origPost.id === post.id);\n            if (postIndex !== -1) {\n              stateCopy[postIndex] = { ...post };\n            }\n          });\n    \n          // Filter and sort new posts\n          const existingPostIds = state.map((post) => post.id);\n          const filteredNewPosts = Object.values(newPosts).filter((post) => !existingPostIds.includes(post.id));\n    \n          if (type === 'trending') {\n            filteredNewPosts.sort((post1, post2) => {\n              return post1.commentcount + post1.comentcount < post2.comentcount + post2.comentcount ? 1 : post1.commentcount + post1.comentcount > post2.comentcount + post2.comentcount ? -1 : 0;\n            });\n          }\n    \n          // Concatenate existing posts with new posts\n          const newState = [...stateCopy, ...filteredNewPosts];\n    \n          // Remove duplicates\n        //   const uniqueState = newState.filter((post, index) => {\n        //     const storeIndex = Object.values(newPosts).findIndex((storePost) => storePost.id === post.id);\n        //     return storeIndex === index;\n        //   });\n    \n          return newState;\n        });\n      };\n    // useEffect(()=>{\n    //     // setLoading(true);\n    //     setPostsMap(state=>{\n    //         const stateCopy=[...state];\n    //         Object.values(posts).forEach ((post)=>{\n    //             //update info for each post \n    //             const postIndex = stateCopy.findIndex((origPost)=>origPost.id===post.id)\n    //             if (postIndex!==-1){\n    //                 stateCopy[postIndex]={\n    //                     ...post\n    //                 };\n    //             }\n    //         })\n    //         const existingPostIds = state.map((post)=>post.id);\n    //         const newPosts = Object.values(posts).filter(\n    //             (post)=> !existingPostIds.includes(post.id)\n    //             )\n    //         if (type==='trending'){\n    //             newPosts.sort((post1,post2)=>{\n    //                return (post1.commentcount+post1.comentcount)<(post2.comentcount+post2.comentcount) ? 1 : (post1.commentcount+post1.comentcount)>(post2.comentcount+post2.comentcount) ? -1 : 0;\n    //             })\n    //         }\n    //         const newState=[];\n    //         [...stateCopy,...newPosts].forEach((post)=>{\n    //             newState.push(post);\n    //         })\n    //         newState.forEach((post,index)=>{\n    //             const storeIndex=Object.values(posts).findIndex((storePost)=>storePost.id===post.id)\n    //             if (storeIndex===-1){\n    //                 newState.splice(index,1);\n    //             }\n    //         })\n    //         return newState;\n    //     })\n    //     // setLoading(false);\n    // },[posts]);\n\n    useEffect(()=>{\n        if (postsMap.length===0){\n            setInitialLoad(true);\n        } else setInitialLoad(false);\n    },[postsMap])\n    const postsToShow=Object.values(posts);\n    \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n\n    return (\n        <>\n         { !initialLoad && postsMap.length===0 &&\n            <div className='post-load-container'>\n                <div className='post-load-body'>\n                    <i style={{color:'white'}}className=\"fa-solid fa-spinner fa-spin\"></i>\n                </div>\n            </div>}\n        { noPosts && postsMap.length===0 &&\n            <div className='noposts-message'>\n                <h2>No posts to show</h2>\n                <h2>Follow some Users to populate For You page!!!</h2>\n                <i className=\"fa-solid fa-hippo fa-bounce\"></i>\n            </div>\n        }\n        {!initialLoad && postsMap.map ((post,index)=>{\n            if (postsMap.length === index +1 ) {\n                return (\n                    <div ref={lastPostElementRef} key={post.id} className='postMain'>\n                        <ShowPost  post={post} profile={false}/>\n                    </div>)\n            } else {\n                return( \n                    <div className='postMain' key={post.id}>\n                        <ShowPost  post={post} profile={false}/>\n                    </div>\n                )\n            }\n        })}\n        {loading && \n            <div className='post-load-container'>\n                <div className='post-load-body'>\n                    <i className=\"fa-solid fa-spinner fa-spin\"></i>\n                </div>\n            </div>}\n        </>\n    );\n\n\n\n\n}\n\nexport default DashboardPartial;","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserDashBoard.js",["431","432","433","434","435","436","437"],[],"import ShowPost from \"../posts/showPost\";\nimport { useEffect,useState,useRef,useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect,useParams,Link} from \"react-router-dom\";\nimport * as postActions from \"../../store/posts\";\n//instead of using fetchPosts, will use User posts with Params\n\nconst UserDashboard = ( {type}) =>{\n    const {userid} = useParams();\n    //params will contain id\n    \n    const sessionUser = useSelector(state=>state.session.user);\n    const dispatch = useDispatch();\n    const [postsMap,setPostsMap] = useState([]);\n    const [pageNumber,setPageNumber]=useState(1);\n    const [loading,setLoading] = useState(true);\n    const [initialLoad,setInitialLoad]=useState(true)\n    const [hasMore,setHasMore] = useState(false);\n    const [error,setError] = useState([]);\n    const [morePosts,setMorePosts]=useState(true);\n    const [noPosts,setNoPosts] = useState(false);\n    const observer = useRef();\n    const lastPostElementRef = useCallback(node=>{\n        if(loading) return ;\n        if(observer.current) observer.current.disconnect();\n        if(!morePosts) return;\n        \n        observer.current = new IntersectionObserver(entries =>{\n            if (entries[0].isIntersecting && morePosts) {\n                setPageNumber(prevPageNumber=> prevPageNumber +1 )\n            }\n        })\n        if (node) observer.current.observe(node);\n    },[loading,morePosts]);\n    useEffect(()=>{\n        setPostsMap([]);\n        setPageNumber(1);\n        dispatch(postActions.clearPosts());\n        setLoading(true);\n        setError(false);\n        setHasMore(true);\n        setMorePosts(true);\n        setNoPosts(false);\n        setInitialLoad(false);\n        setTimeout(()=>{\n        dispatch(postActions.fetchPosts(pageNumber,type,userid))\n            .then(res=>{\n                setPostsMap([]);\n                setMorePosts(res.postsleft.postsLeft);\n                if(!res.posts){\n                    setNoPosts(true);\n                    setLoading(false);\n                } else setNoPosts(false);\n\n            })\n        },500)\n    },[type,userid])\n    useEffect(()=>{\n        if (postsMap.length===0){\n            setInitialLoad(true);\n        } else setInitialLoad(false);\n    },[postsMap])\n    const posts = useSelector(state=>state.posts);\n    //will trigger a dispatch for more data when\n    // pagenumber changes\n    useEffect(()=>{\n        setError(false);\n        setLoading(true);\n        if (pageNumber!==1){\n        dispatch(postActions.fetchPosts(pageNumber,type,userid))\n            .then((res) =>{\n                setMorePosts(res.postsleft.postsLeft);\n                setLoading(false);\n            })\n        } else{\n            setLoading(false);\n        }\n    },[pageNumber]);\n    useEffect(()=>{\n      \n        setPostsMap(state=>{\n            const stateCopy=[...state];\n            Object.values(posts).forEach ((post)=>{\n                //update info for each post \n                const postIndex = stateCopy.findIndex((origPost)=>origPost.id===post.id)\n                if (postIndex!==-1){\n                    stateCopy[postIndex]={...post};\n                }\n            })\n            const existingPostIds = state.map((post)=>post.id);\n            const newPosts = Object.values(posts).filter(\n                (post)=> !existingPostIds.includes(post.id)\n            )\n            const newState=[];\n            [...stateCopy,...newPosts].forEach((post)=>{\n                newState.push(post);\n            })\n            newState.forEach((post,index)=>{\n                const storeIndex=Object.values(posts).findIndex((storePost)=>storePost.id===post.id)\n                if (storeIndex===-1){\n                    newState.splice(index,1);\n                }\n            })\n            newState.sort((post1, post2) => {\n                const timestamp1 = new Date(post1.dateCreated + ' ' + post1.timeCreated).getTime();\n                const timestamp2 = new Date(post2.dateCreated + ' ' + post2.timeCreated).getTime();\n              \n                return timestamp1 < timestamp2 ? 1 : timestamp1 > timestamp2 ? -1 : 0;\n              });\n            newState.sort((post1,post2)=>{\n                return (post1.dateCreated<post2.dateCreated && post1.timeCreated<post2.timeCreated) ? 1 : (post1.dateCreated>post2.dateCreated && post1.timeCreated>post2.timeCreated) ? -1 : 0;\n            })\n            // setLoading(false);\n            return newState;\n        })\n        return ()=>{\n            setPostsMap([]);\n        }\n    },[posts])\n\n\n    const postsToShow=Object.values(posts);\n    \n    // if (sessionUser) return <Redirect to=\"/\" />;\n    //all Today dashboard will be in here\n    //select posts that were reblogged by \n    //todayonmumblr\n    // in seeding, need to have posts reblogged by todayonmumblr\n    return (\n        <>\n        {type==='likes' && noPosts && \n            <div className='noposts-message'>\n                <h2>Empty :(</h2>\n                <h2>Go out and like some posts! :)</h2>\n                <i className=\"fa-solid fa-otter fa-bounce\"></i>\n            </div>\n        }\n        {type==='userposts' && noPosts && \n            <div className='nouserposts-message'>\n                <h2>Empty :(</h2>\n                <h2>A Blog Post will fix that!</h2>\n                <div className='empty-post-button'>\n                    <Link to='/new' className='empty-post-link'>\n                        <i className=\"fa-sharp fa-solid fa-pencil animation-pencil\" ></i>\n                    </Link>\n                </div>\n            </div>\n        }\n\n        {!initialLoad&&postsMap.map ((post,index)=>{\n            if (postsMap.length === index +1 ) {\n                return (\n                    <div ref={lastPostElementRef} key={post.id} className='postMain'>\n                    <ShowPost key={index} post={post} profile={true}/>\n                    </div>)\n            } else {\n                return( \n                    <div className='postMain' key={post.id}>\n                        <ShowPost  key={index} post={post} profile={true}/>\n                    </div>\n                )\n            }\n        })}\n        {loading &&  \n            <div className='post-load-container'>\n                <div className='post-load-body'>\n                    <i className=\"fa-solid fa-spinner fa-spin userload\"></i>\n                </div>\n            </div>}\n        </>\n    );\n\n\n\n\n}\n\nexport default UserDashboard;","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserFollowDashoard.js",["438","439","440","441","442","443","444","445","446"],[],"/Users/vincentpham/Documents/mumblr/frontend/src/components/users/UserFollowShow.js",["447"],[],"import { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { useState,useEffect } from \"react\";\nimport * as followActions from '../../store/follows';\nimport { useDispatch } from \"react-redux\";\nconst FollowShow = ({ id,type,setErrors})=>{\n    //can pull user from the state with follow id and type \n    //if follower, can pull from selector with followerid \n    //if follows, can pull from selector with userid\n    // const user = type==='follows' ? useSelector(state=>state.users[follow.user_id]) : useSelector(state=>state.users[follow.follower_id]);\n    const dispatch = useDispatch();\n    const sessionUser = useSelector(state=>state.session.user);\n    const followed = useSelector(followActions.followsUser(id,sessionUser,type));\n    const user = useSelector(state=>state.users[id]);\n    const [sameUser,setSameUser]= useState(false);\n    // const [errors,setErrors] = useState([]);\n    useEffect(()=>{\n        if(sessionUser && user && sessionUser.id === user.id){\n            setSameUser(true);\n        }\n    },[sessionUser,user]);\n    const handleFollowButton = (event)=>{\n        event.preventDefault();\n        if(!sessionUser){\n            setErrors([]);\n            setErrors(['Login to Follow!'])\n            setTimeout(()=>{\n                setErrors([])\n            },2000)\n        } else{\n            const follow={user_id: id, follower_id: sessionUser.id}\n            dispatch(followActions.createFollow(follow));\n        }\n    }\n    const handleUnfollowButton = (event) =>{\n        event.preventDefault();\n        dispatch(followActions.removeFollow(followed[0].id));\n    }\n\n    if (!user) return null;\n    return(\n        <div className='likeslist-body'>\n            <div className='likeslist-content'>\n                {/* this is where i will map over the likers. will be pulled from the likes where post_id matches the post */}\n                <div className='liker-container'>\n                    <div className='liker-profilepic-container'>\n                        <div className=\"liker-profilepic-body\">\n                            <Link className='liker-link' to={`/user/${user.id}`}>\n                                <img className='liker-pic' src={user.profilepic}></img>\n                            </Link>\n                        </div>\n\n                    </div>\n                    <div className=\"liker-information\">\n                        <div className='liker-username'>\n                            <span>{user.username}</span>\n                        </div>\n                        {followed.length===0 && !sameUser&& <button onClick={(event)=>handleFollowButton(event)} className='follow-button' style={{ backgroundColor: 'transparent', border: 'none', boxShadow: 'none' }}><span>Follow</span></button>}\n                        {followed.length>0 &&!sameUser&&  <button onClick={(event)=>handleUnfollowButton(event)} className='follow-button' style={{ backgroundColor: 'transparent', border: 'none', boxShadow: 'none' }}><span>Unfollow</span></button>}\n\n                    </div>\n\n                </div>\n\n            </div>\n          \n        </div>\n\n \n)\n\n}\n\nexport default FollowShow;","/Users/vincentpham/Documents/mumblr/frontend/src/components/users/AccountSetings.js",["448","449","450"],[],"import { useDispatch, useSelector } from 'react-redux';\nimport './accountsettings.css';\nimport { useState } from \"react\";\nimport * as userActions from '../../store/user';\nconst AccountSettings = ({closeModal, user}) =>{\nconst [userName,setUserName] = useState(user.username);\nconst [profilepic,setProfilepic] = useState(user.profilepic);\nconst [background,setBackground] = useState(user.background);\nconst [bgPreview,setbgPreview] = useState(null);\nconst [profilePreview,setProfilePreview] = useState(null);\nconst sessionUser=useSelector(state=>state.session.user);\nconst [errors,setErrors] = useState([]);\nconst dispatch = useDispatch();\nconst handleBGInput = (event) =>{\n    const file = event.currentTarget.files[0];\n    if(file){\n        const fileReader = new FileReader();\n        fileReader.readAsDataURL(file);\n        fileReader.onload= ()=> setbgPreview(fileReader.result);\n        setBackground(file);\n    } else {\n        setbgPreview(null);\n    }\n\n\n}\n\nconst handleSave = (event)=>{\n    event.preventDefault();\n    const formData = new FormData();\n    if (profilePreview){\n    formData.append('user[profilepic]',profilepic);\n    }\n    if (bgPreview){\n    formData.append('user[background]',background);\n    }\n    formData.append('user[username]',userName);\n    formData.append('user[email]',sessionUser.email);\n    setErrors([]);\n    dispatch(userActions.updateUser(formData,sessionUser.id))\n        .catch(async (res)=>{\n            let data;\n            try{\n                data = await res.clone().json();\n            } catch {\n                data = await res.text();\n            }\n\n            if (data?.errors) setErrors(data.errors);\n            else if (data) setErrors([data]);\n            else setErrors([res.statusText]);\n        });\n\n}\nconst handleUndo = (event) =>{\n    event.preventDefault();\n    setUserName(user.username);\n    setProfilePreview(null);\n    setbgPreview(null);\n    setProfilepic(user.profilepic);\n    setBackground(user.background);\n}\n// have buttons to revert changes, change evertginf back to the default, set photopreviews to null\n// set username back to the prop\n\nconst handleProfileInput = (event)=>{\n    const file = event.currentTarget.files[0];\n    if(file) {\n        const fileReader = new FileReader();\n        fileReader.readAsDataURL(file);\n        fileReader.onload = () => setProfilePreview(fileReader.result);\n        setProfilepic(file);\n    } else setProfilePreview(null);\n}\n\n\n\n    return(\n        \n        <div className='user-settings-container'>\n            <button className='closeuserupdate' onClick={()=>closeModal(false)} >\n                <i className='fa-solid fa-xmark'></i>\n            </button>\n                <div className='show-body'>\n                    <div className='show-contents'>\n                        <div className='profile-container'>\n                            <header className='profile-header'>\n                                <div className='bgimage-frame'>\n                                    <img className='bgimage' src={ bgPreview ? bgPreview : background}/>\n                                    <button className='bgsettingbutton' onClick={()=>document.getElementById('photo-input').click()}>\n                                        <i className=\"fa-solid fa-image fileicon\" ></i>\n                                            <span className='filetext'>Change background</span>\n                                        <input  type='file' id='photo-input' onChange={event=>handleBGInput(event)}></input>\n                                    </button>\n                                </div>\n                                <div className='profile-bio-container'>\n                                    <div className='profilepic-container'>\n                                        <div className='profilepic-body'>\n                                            <div className='profilepic-contents'>\n                                                <div className='profilepic-frame'>\n                                                    <img className='userPic' src={profilePreview ? profilePreview : profilepic}/>\n                                                </div>\n                                                <button className='profilesettingbutton' onClick={()=>document.getElementById('profilephoto-input').click()}>\n                                                    <i className=\"fa-solid fa-image fileicon profileicon\" ></i>\n                                                        <span className='filetext '></span>\n                                                    <input  type='file' id='profilephoto-input' onChange={event=>handleProfileInput(event)} ></input>\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className='bio-container'>\n                                        <input className='blognamesetting' onChange={event=>setUserName(event.target.value)} value={userName}></input>\n                                        <div className='bio-container'>\n                                            \n                                        </div>\n                                    </div>\n                                </div>\n                                </header>\n                        </div>\n                </div>\n                </div>\n                <div className='user-update-buttons'>\n                    <button className='save-user-updates' onClick={event=> handleSave(event)}>\n                        <span className='userupdatetext'>Save Updates</span>\n                    </button>\n                    <button className='revert-user-updates' onClick={event=>handleUndo(event)}>\n                        <span className='userupdatetext'>Undo Updates</span>\n                    </button>\n\n                </div>\n                </div>\n               \n                    \n    )\n}\n\nexport default AccountSettings;",{"ruleId":"451","severity":1,"message":"452","line":1,"column":20,"nodeType":"453","messageId":"454","endLine":1,"endColumn":29},{"ruleId":"451","severity":1,"message":"455","line":2,"column":25,"nodeType":"453","messageId":"454","endLine":2,"endColumn":33},{"ruleId":"451","severity":1,"message":"456","line":3,"column":8,"nodeType":"453","messageId":"454","endLine":3,"endColumn":22},{"ruleId":"451","severity":1,"message":"457","line":7,"column":8,"nodeType":"453","messageId":"454","endLine":7,"endColumn":22},{"ruleId":"451","severity":1,"message":"458","line":13,"column":10,"nodeType":"453","messageId":"454","endLine":13,"endColumn":20},{"ruleId":"451","severity":1,"message":"459","line":16,"column":9,"nodeType":"453","messageId":"454","endLine":16,"endColumn":20},{"ruleId":"451","severity":1,"message":"460","line":17,"column":10,"nodeType":"453","messageId":"454","endLine":17,"endColumn":18},{"ruleId":"451","severity":1,"message":"461","line":17,"column":20,"nodeType":"453","messageId":"454","endLine":17,"endColumn":31},{"ruleId":"451","severity":1,"message":"462","line":18,"column":9,"nodeType":"453","messageId":"454","endLine":18,"endColumn":17},{"ruleId":"451","severity":1,"message":"463","line":19,"column":9,"nodeType":"453","messageId":"454","endLine":19,"endColumn":17},{"ruleId":"451","severity":1,"message":"464","line":1,"column":56,"nodeType":"453","messageId":"454","endLine":1,"endColumn":69},{"ruleId":"451","severity":1,"message":"452","line":3,"column":24,"nodeType":"453","messageId":"454","endLine":3,"endColumn":33},{"ruleId":"451","severity":1,"message":"463","line":11,"column":11,"nodeType":"453","messageId":"454","endLine":11,"endColumn":19},{"ruleId":"451","severity":1,"message":"465","line":17,"column":19,"nodeType":"453","messageId":"454","endLine":17,"endColumn":28},{"ruleId":"451","severity":1,"message":"466","line":2,"column":9,"nodeType":"453","messageId":"454","endLine":2,"endColumn":17},{"ruleId":"451","severity":1,"message":"452","line":2,"column":18,"nodeType":"453","messageId":"454","endLine":2,"endColumn":27},{"ruleId":"451","severity":1,"message":"455","line":5,"column":10,"nodeType":"453","messageId":"454","endLine":5,"endColumn":18},{"ruleId":"451","severity":1,"message":"467","line":5,"column":20,"nodeType":"453","messageId":"454","endLine":5,"endColumn":27},{"ruleId":"468","severity":1,"message":"469","line":18,"column":38,"nodeType":"470","messageId":"471","endLine":18,"endColumn":39,"suggestions":"472"},{"ruleId":"473","severity":1,"message":"474","line":61,"column":1,"nodeType":"475","messageId":"476","endLine":61,"endColumn":97},{"ruleId":"451","severity":1,"message":"477","line":5,"column":8,"nodeType":"453","messageId":"454","endLine":5,"endColumn":17},{"ruleId":"451","severity":1,"message":"455","line":6,"column":10,"nodeType":"453","messageId":"454","endLine":6,"endColumn":18},{"ruleId":"451","severity":1,"message":"457","line":6,"column":8,"nodeType":"453","messageId":"454","endLine":6,"endColumn":22},{"ruleId":"451","severity":1,"message":"455","line":7,"column":10,"nodeType":"453","messageId":"454","endLine":7,"endColumn":18},{"ruleId":"451","severity":1,"message":"478","line":14,"column":5,"nodeType":"453","messageId":"454","endLine":14,"endColumn":9},{"ruleId":"451","severity":1,"message":"466","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":18},{"ruleId":"451","severity":1,"message":"479","line":4,"column":8,"nodeType":"453","messageId":"454","endLine":4,"endColumn":15},{"ruleId":"451","severity":1,"message":"480","line":5,"column":8,"nodeType":"453","messageId":"454","endLine":5,"endColumn":20},{"ruleId":"451","severity":1,"message":"481","line":6,"column":8,"nodeType":"453","messageId":"454","endLine":6,"endColumn":21},{"ruleId":"451","severity":1,"message":"482","line":7,"column":10,"nodeType":"453","messageId":"454","endLine":7,"endColumn":15},{"ruleId":"451","severity":1,"message":"483","line":7,"column":17,"nodeType":"453","messageId":"454","endLine":7,"endColumn":23},{"ruleId":"451","severity":1,"message":"484","line":10,"column":9,"nodeType":"453","messageId":"454","endLine":10,"endColumn":19},{"ruleId":"451","severity":1,"message":"482","line":4,"column":10,"nodeType":"453","messageId":"454","endLine":4,"endColumn":15},{"ruleId":"451","severity":1,"message":"485","line":1,"column":21,"nodeType":"453","messageId":"454","endLine":1,"endColumn":35},{"ruleId":"451","severity":1,"message":"483","line":3,"column":19,"nodeType":"453","messageId":"454","endLine":3,"endColumn":25},{"ruleId":"451","severity":1,"message":"486","line":6,"column":11,"nodeType":"453","messageId":"454","endLine":6,"endColumn":18},{"ruleId":"451","severity":1,"message":"483","line":3,"column":19,"nodeType":"453","messageId":"454","endLine":3,"endColumn":25},{"ruleId":"451","severity":1,"message":"486","line":7,"column":11,"nodeType":"453","messageId":"454","endLine":7,"endColumn":18},{"ruleId":"487","severity":1,"message":"488","line":18,"column":52,"nodeType":"489","messageId":"490","endLine":18,"endColumn":54},{"ruleId":"487","severity":1,"message":"488","line":18,"column":83,"nodeType":"489","messageId":"490","endLine":18,"endColumn":85},{"ruleId":"487","severity":1,"message":"488","line":23,"column":51,"nodeType":"489","messageId":"490","endLine":23,"endColumn":53},{"ruleId":"451","severity":1,"message":"455","line":4,"column":25,"nodeType":"453","messageId":"454","endLine":4,"endColumn":33},{"ruleId":"491","severity":1,"message":"492","line":10,"column":20,"nodeType":"493","messageId":"490","endLine":10,"endColumn":22},{"ruleId":"451","severity":1,"message":"494","line":12,"column":12,"nodeType":"453","messageId":"454","endLine":12,"endColumn":22},{"ruleId":"451","severity":1,"message":"466","line":5,"column":10,"nodeType":"453","messageId":"454","endLine":5,"endColumn":18},{"ruleId":"451","severity":1,"message":"452","line":5,"column":20,"nodeType":"453","messageId":"454","endLine":5,"endColumn":29},{"ruleId":"451","severity":1,"message":"495","line":7,"column":8,"nodeType":"453","messageId":"454","endLine":7,"endColumn":23},{"ruleId":"496","severity":1,"message":"497","line":24,"column":29,"nodeType":"498","endLine":24,"endColumn":63},{"ruleId":"451","severity":1,"message":"499","line":14,"column":20,"nodeType":"453","messageId":"454","endLine":14,"endColumn":30},{"ruleId":"500","severity":1,"message":"501","line":20,"column":7,"nodeType":"502","endLine":20,"endColumn":20,"suggestions":"503"},{"ruleId":"500","severity":1,"message":"504","line":86,"column":7,"nodeType":"502","endLine":86,"endColumn":20,"suggestions":"505"},{"ruleId":"451","severity":1,"message":"466","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":18},{"ruleId":"451","severity":1,"message":"506","line":7,"column":11,"nodeType":"453","messageId":"454","endLine":7,"endColumn":17},{"ruleId":"451","severity":1,"message":"452","line":1,"column":18,"nodeType":"453","messageId":"454","endLine":1,"endColumn":27},{"ruleId":"451","severity":1,"message":"507","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":14},{"ruleId":"451","severity":1,"message":"508","line":4,"column":8,"nodeType":"453","messageId":"454","endLine":4,"endColumn":18},{"ruleId":"451","severity":1,"message":"509","line":5,"column":12,"nodeType":"453","messageId":"454","endLine":5,"endColumn":21},{"ruleId":"451","severity":1,"message":"510","line":5,"column":22,"nodeType":"453","messageId":"454","endLine":5,"endColumn":34},{"ruleId":"451","severity":1,"message":"511","line":2,"column":20,"nodeType":"453","messageId":"454","endLine":2,"endColumn":26},{"ruleId":"451","severity":1,"message":"455","line":6,"column":10,"nodeType":"453","messageId":"454","endLine":6,"endColumn":18},{"ruleId":"451","severity":1,"message":"512","line":203,"column":11,"nodeType":"453","messageId":"454","endLine":203,"endColumn":24},{"ruleId":"496","severity":1,"message":"497","line":220,"column":21,"nodeType":"498","endLine":220,"endColumn":55},{"ruleId":"513","severity":1,"message":"514","line":240,"column":33,"nodeType":"498","endLine":240,"endColumn":140},{"ruleId":"451","severity":1,"message":"515","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":21},{"ruleId":"451","severity":1,"message":"516","line":4,"column":10,"nodeType":"453","messageId":"454","endLine":4,"endColumn":20},{"ruleId":"451","severity":1,"message":"517","line":8,"column":12,"nodeType":"453","messageId":"454","endLine":8,"endColumn":17},{"ruleId":"451","severity":1,"message":"518","line":8,"column":18,"nodeType":"453","messageId":"454","endLine":8,"endColumn":26},{"ruleId":"451","severity":1,"message":"519","line":9,"column":12,"nodeType":"453","messageId":"454","endLine":9,"endColumn":16},{"ruleId":"451","severity":1,"message":"520","line":9,"column":17,"nodeType":"453","messageId":"454","endLine":9,"endColumn":24},{"ruleId":"451","severity":1,"message":"459","line":10,"column":11,"nodeType":"453","messageId":"454","endLine":10,"endColumn":22},{"ruleId":"451","severity":1,"message":"515","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":21},{"ruleId":"451","severity":1,"message":"517","line":8,"column":12,"nodeType":"453","messageId":"454","endLine":8,"endColumn":17},{"ruleId":"451","severity":1,"message":"518","line":8,"column":18,"nodeType":"453","messageId":"454","endLine":8,"endColumn":26},{"ruleId":"451","severity":1,"message":"519","line":9,"column":12,"nodeType":"453","messageId":"454","endLine":9,"endColumn":16},{"ruleId":"451","severity":1,"message":"520","line":9,"column":17,"nodeType":"453","messageId":"454","endLine":9,"endColumn":24},{"ruleId":"451","severity":1,"message":"459","line":10,"column":11,"nodeType":"453","messageId":"454","endLine":10,"endColumn":22},{"ruleId":"451","severity":1,"message":"511","line":2,"column":20,"nodeType":"453","messageId":"454","endLine":2,"endColumn":26},{"ruleId":"451","severity":1,"message":"455","line":6,"column":10,"nodeType":"453","messageId":"454","endLine":6,"endColumn":18},{"ruleId":"496","severity":1,"message":"497","line":187,"column":21,"nodeType":"498","endLine":187,"endColumn":55},{"ruleId":"513","severity":1,"message":"514","line":206,"column":33,"nodeType":"498","endLine":206,"endColumn":140},{"ruleId":"451","severity":1,"message":"521","line":15,"column":12,"nodeType":"453","messageId":"454","endLine":15,"endColumn":21},{"ruleId":"451","severity":1,"message":"522","line":15,"column":22,"nodeType":"453","messageId":"454","endLine":15,"endColumn":34},{"ruleId":"451","severity":1,"message":"523","line":16,"column":12,"nodeType":"453","messageId":"454","endLine":16,"endColumn":20},{"ruleId":"451","severity":1,"message":"524","line":16,"column":21,"nodeType":"453","messageId":"454","endLine":16,"endColumn":32},{"ruleId":"451","severity":1,"message":"525","line":17,"column":12,"nodeType":"453","messageId":"454","endLine":17,"endColumn":17},{"ruleId":"500","severity":1,"message":"526","line":30,"column":7,"nodeType":"502","endLine":30,"endColumn":9,"suggestions":"527"},{"ruleId":"500","severity":1,"message":"528","line":47,"column":7,"nodeType":"502","endLine":47,"endColumn":9,"suggestions":"529"},{"ruleId":"451","severity":1,"message":"530","line":4,"column":13,"nodeType":"453","messageId":"454","endLine":4,"endColumn":24},{"ruleId":"451","severity":1,"message":"507","line":7,"column":44,"nodeType":"453","messageId":"454","endLine":7,"endColumn":48},{"ruleId":"451","severity":1,"message":"531","line":9,"column":8,"nodeType":"453","messageId":"454","endLine":9,"endColumn":22},{"ruleId":"451","severity":1,"message":"532","line":11,"column":8,"nodeType":"453","messageId":"454","endLine":11,"endColumn":22},{"ruleId":"451","severity":1,"message":"533","line":19,"column":12,"nodeType":"453","messageId":"454","endLine":19,"endColumn":20},{"ruleId":"451","severity":1,"message":"534","line":19,"column":21,"nodeType":"453","messageId":"454","endLine":19,"endColumn":32},{"ruleId":"451","severity":1,"message":"486","line":21,"column":11,"nodeType":"453","messageId":"454","endLine":21,"endColumn":18},{"ruleId":"451","severity":1,"message":"462","line":22,"column":11,"nodeType":"453","messageId":"454","endLine":22,"endColumn":19},{"ruleId":"500","severity":1,"message":"535","line":41,"column":10,"nodeType":"502","endLine":41,"endColumn":18,"suggestions":"536"},{"ruleId":"451","severity":1,"message":"537","line":70,"column":11,"nodeType":"453","messageId":"454","endLine":70,"endColumn":20},{"ruleId":"496","severity":1,"message":"497","line":104,"column":37,"nodeType":"498","endLine":104,"endColumn":85},{"ruleId":"496","severity":1,"message":"497","line":111,"column":53,"nodeType":"498","endLine":111,"endColumn":101},{"ruleId":"451","severity":1,"message":"538","line":5,"column":10,"nodeType":"453","messageId":"454","endLine":5,"endColumn":21},{"ruleId":"451","severity":1,"message":"452","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":19},{"ruleId":"451","severity":1,"message":"466","line":2,"column":20,"nodeType":"453","messageId":"454","endLine":2,"endColumn":28},{"ruleId":"451","severity":1,"message":"455","line":4,"column":10,"nodeType":"453","messageId":"454","endLine":4,"endColumn":18},{"ruleId":"451","severity":1,"message":"530","line":5,"column":13,"nodeType":"453","messageId":"454","endLine":5,"endColumn":24},{"ruleId":"451","severity":1,"message":"459","line":7,"column":11,"nodeType":"453","messageId":"454","endLine":7,"endColumn":22},{"ruleId":"451","severity":1,"message":"463","line":8,"column":11,"nodeType":"453","messageId":"454","endLine":8,"endColumn":19},{"ruleId":"451","severity":1,"message":"452","line":2,"column":10,"nodeType":"453","messageId":"454","endLine":2,"endColumn":19},{"ruleId":"451","severity":1,"message":"466","line":2,"column":20,"nodeType":"453","messageId":"454","endLine":2,"endColumn":28},{"ruleId":"451","severity":1,"message":"455","line":4,"column":10,"nodeType":"453","messageId":"454","endLine":4,"endColumn":18},{"ruleId":"451","severity":1,"message":"530","line":5,"column":13,"nodeType":"453","messageId":"454","endLine":5,"endColumn":24},{"ruleId":"451","severity":1,"message":"459","line":7,"column":11,"nodeType":"453","messageId":"454","endLine":7,"endColumn":22},{"ruleId":"451","severity":1,"message":"463","line":8,"column":11,"nodeType":"453","messageId":"454","endLine":8,"endColumn":19},{"ruleId":"451","severity":1,"message":"515","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":21},{"ruleId":"451","severity":1,"message":"517","line":8,"column":12,"nodeType":"453","messageId":"454","endLine":8,"endColumn":17},{"ruleId":"451","severity":1,"message":"518","line":8,"column":18,"nodeType":"453","messageId":"454","endLine":8,"endColumn":26},{"ruleId":"451","severity":1,"message":"519","line":9,"column":12,"nodeType":"453","messageId":"454","endLine":9,"endColumn":16},{"ruleId":"451","severity":1,"message":"520","line":9,"column":17,"nodeType":"453","messageId":"454","endLine":9,"endColumn":24},{"ruleId":"451","severity":1,"message":"459","line":10,"column":11,"nodeType":"453","messageId":"454","endLine":10,"endColumn":22},{"ruleId":"451","severity":1,"message":"511","line":2,"column":20,"nodeType":"453","messageId":"454","endLine":2,"endColumn":26},{"ruleId":"451","severity":1,"message":"539","line":2,"column":38,"nodeType":"453","messageId":"454","endLine":2,"endColumn":49},{"ruleId":"451","severity":1,"message":"540","line":13,"column":12,"nodeType":"453","messageId":"454","endLine":13,"endColumn":23},{"ruleId":"451","severity":1,"message":"541","line":13,"column":24,"nodeType":"453","messageId":"454","endLine":13,"endColumn":38},{"ruleId":"451","severity":1,"message":"542","line":23,"column":12,"nodeType":"453","messageId":"454","endLine":23,"endColumn":29},{"ruleId":"451","severity":1,"message":"543","line":24,"column":12,"nodeType":"453","messageId":"454","endLine":24,"endColumn":29},{"ruleId":"451","severity":1,"message":"544","line":24,"column":30,"nodeType":"453","messageId":"454","endLine":24,"endColumn":50},{"ruleId":"500","severity":1,"message":"545","line":32,"column":7,"nodeType":"502","endLine":32,"endColumn":17,"suggestions":"546"},{"ruleId":"451","severity":1,"message":"512","line":235,"column":11,"nodeType":"453","messageId":"454","endLine":235,"endColumn":24},{"ruleId":"496","severity":1,"message":"497","line":263,"column":21,"nodeType":"498","endLine":263,"endColumn":55},{"ruleId":"487","severity":1,"message":"488","line":55,"column":93,"nodeType":"489","messageId":"490","endLine":55,"endColumn":95},{"ruleId":"451","severity":1,"message":"547","line":28,"column":7,"nodeType":"453","messageId":"454","endLine":28,"endColumn":22},{"ruleId":"451","severity":1,"message":"455","line":17,"column":16,"nodeType":"453","messageId":"454","endLine":17,"endColumn":24},{"ruleId":"451","severity":1,"message":"548","line":27,"column":12,"nodeType":"453","messageId":"454","endLine":27,"endColumn":20},{"ruleId":"451","severity":1,"message":"461","line":27,"column":22,"nodeType":"453","messageId":"454","endLine":27,"endColumn":33},{"ruleId":"451","severity":1,"message":"549","line":29,"column":12,"nodeType":"453","messageId":"454","endLine":29,"endColumn":18},{"ruleId":"451","severity":1,"message":"519","line":36,"column":12,"nodeType":"453","messageId":"454","endLine":36,"endColumn":16},{"ruleId":"451","severity":1,"message":"520","line":36,"column":17,"nodeType":"453","messageId":"454","endLine":36,"endColumn":24},{"ruleId":"451","severity":1,"message":"550","line":46,"column":11,"nodeType":"453","messageId":"454","endLine":46,"endColumn":29},{"ruleId":"551","severity":1,"message":"552","line":56,"column":34,"nodeType":"553","messageId":"554","endLine":56,"endColumn":62,"fix":"555"},{"ruleId":"451","severity":1,"message":"556","line":69,"column":11,"nodeType":"453","messageId":"454","endLine":69,"endColumn":31},{"ruleId":"496","severity":1,"message":"497","line":268,"column":29,"nodeType":"498","endLine":268,"endColumn":92},{"ruleId":"496","severity":1,"message":"497","line":347,"column":41,"nodeType":"498","endLine":347,"endColumn":90},{"ruleId":"496","severity":1,"message":"497","line":404,"column":37,"nodeType":"498","endLine":404,"endColumn":100},{"ruleId":"451","severity":1,"message":"557","line":463,"column":19,"nodeType":"453","messageId":"454","endLine":463,"endColumn":25},{"ruleId":"500","severity":1,"message":"558","line":539,"column":3,"nodeType":"502","endLine":539,"endColumn":16,"suggestions":"559"},{"ruleId":"496","severity":1,"message":"497","line":550,"column":37,"nodeType":"498","endLine":550,"endColumn":79},{"ruleId":"451","severity":1,"message":"538","line":3,"column":10,"nodeType":"453","messageId":"454","endLine":3,"endColumn":21},{"ruleId":"451","severity":1,"message":"560","line":30,"column":7,"nodeType":"453","messageId":"454","endLine":30,"endColumn":21},{"ruleId":"487","severity":1,"message":"488","line":39,"column":75,"nodeType":"489","messageId":"490","endLine":39,"endColumn":77},{"ruleId":"487","severity":1,"message":"488","line":39,"column":110,"nodeType":"489","messageId":"490","endLine":39,"endColumn":112},{"ruleId":"451","severity":1,"message":"455","line":4,"column":10,"nodeType":"453","messageId":"454","endLine":4,"endColumn":18},{"ruleId":"451","severity":1,"message":"561","line":7,"column":10,"nodeType":"453","messageId":"454","endLine":7,"endColumn":21},{"ruleId":"451","severity":1,"message":"459","line":10,"column":11,"nodeType":"453","messageId":"454","endLine":10,"endColumn":22},{"ruleId":"451","severity":1,"message":"562","line":35,"column":11,"nodeType":"453","messageId":"454","endLine":35,"endColumn":24},{"ruleId":"451","severity":1,"message":"563","line":4,"column":19,"nodeType":"453","messageId":"454","endLine":4,"endColumn":28},{"ruleId":"451","severity":1,"message":"564","line":12,"column":12,"nodeType":"453","messageId":"454","endLine":12,"endColumn":19},{"ruleId":"451","severity":1,"message":"565","line":12,"column":20,"nodeType":"453","messageId":"454","endLine":12,"endColumn":30},{"ruleId":"451","severity":1,"message":"566","line":13,"column":12,"nodeType":"453","messageId":"454","endLine":13,"endColumn":17},{"ruleId":"500","severity":1,"message":"567","line":60,"column":7,"nodeType":"502","endLine":60,"endColumn":13,"suggestions":"568"},{"ruleId":"500","severity":1,"message":"569","line":66,"column":7,"nodeType":"502","endLine":66,"endColumn":14,"suggestions":"570"},{"ruleId":"500","severity":1,"message":"571","line":82,"column":7,"nodeType":"502","endLine":82,"endColumn":19,"suggestions":"572"},{"ruleId":"451","severity":1,"message":"573","line":159,"column":11,"nodeType":"453","messageId":"454","endLine":159,"endColumn":22},{"ruleId":"451","severity":1,"message":"455","line":4,"column":10,"nodeType":"453","messageId":"454","endLine":4,"endColumn":18},{"ruleId":"451","severity":1,"message":"459","line":12,"column":11,"nodeType":"453","messageId":"454","endLine":12,"endColumn":22},{"ruleId":"451","severity":1,"message":"564","line":18,"column":12,"nodeType":"453","messageId":"454","endLine":18,"endColumn":19},{"ruleId":"451","severity":1,"message":"566","line":19,"column":12,"nodeType":"453","messageId":"454","endLine":19,"endColumn":17},{"ruleId":"500","severity":1,"message":"567","line":57,"column":7,"nodeType":"502","endLine":57,"endColumn":20,"suggestions":"574"},{"ruleId":"500","severity":1,"message":"575","line":78,"column":7,"nodeType":"502","endLine":78,"endColumn":19,"suggestions":"576"},{"ruleId":"451","severity":1,"message":"573","line":122,"column":11,"nodeType":"453","messageId":"454","endLine":122,"endColumn":22},{"ruleId":"451","severity":1,"message":"577","line":10,"column":12,"nodeType":"453","messageId":"454","endLine":10,"endColumn":20},{"ruleId":"451","severity":1,"message":"578","line":11,"column":22,"nodeType":"453","messageId":"454","endLine":11,"endColumn":34},{"ruleId":"500","severity":1,"message":"579","line":17,"column":25,"nodeType":"453","endLine":17,"endColumn":36},{"ruleId":"500","severity":1,"message":"580","line":39,"column":7,"nodeType":"502","endLine":39,"endColumn":13,"suggestions":"581"},{"ruleId":"500","severity":1,"message":"582","line":57,"column":7,"nodeType":"502","endLine":57,"endColumn":19,"suggestions":"583"},{"ruleId":"584","severity":1,"message":"585","line":66,"column":63,"nodeType":"586","messageId":"587","endLine":66,"endColumn":65},{"ruleId":"473","severity":1,"message":"588","line":67,"column":21,"nodeType":"475","messageId":"589","endLine":71,"endColumn":30},{"ruleId":"487","severity":1,"message":"488","line":72,"column":61,"nodeType":"489","messageId":"490","endLine":72,"endColumn":63},{"ruleId":"487","severity":1,"message":"488","line":79,"column":60,"nodeType":"489","messageId":"490","endLine":79,"endColumn":62},{"ruleId":"496","severity":1,"message":"497","line":49,"column":33,"nodeType":"498","endLine":49,"endColumn":82},{"ruleId":"451","severity":1,"message":"549","line":12,"column":8,"nodeType":"453","messageId":"454","endLine":12,"endColumn":14},{"ruleId":"496","severity":1,"message":"497","line":89,"column":37,"nodeType":"498","endLine":89,"endColumn":105},{"ruleId":"496","severity":1,"message":"497","line":101,"column":53,"nodeType":"498","endLine":101,"endColumn":130},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'SignupFormPage' is defined but never used.","'LoginFormModel' is defined but never used.","'clearPosts' is defined but never used.","'sessionUser' is assigned a value but never used.","'loggedIn' is assigned a value but never used.","'setLoggedIn' is assigned a value but never used.","'location' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'createContext' is defined but never used.","'setErrors' is assigned a value but never used.","'useState' is defined but never used.","'NavLink' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["590","591"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'csrfFetch' is defined but never used.","'menu' is defined but never used.","'NewPost' is defined but never used.","'NewTextModal' is defined but never used.","'NewPhotoModal' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'background' is assigned a value but never used.","'storeCSRFToken' is defined but never used.","'history' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'currentTab' is assigned a value but never used.","'UpdatePostModal' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setDateObj' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'post.author.id'. Either include it or remove the dependency array.","ArrayExpression",["592"],"React Hook useEffect has a missing dependency: 'closeOptions'. Either include it or remove the dependency array.",["593"],"'styles' is assigned a value but never used.","'Link' is defined but never used.","'PostCircle' is defined but never used.","'isHovered' is assigned a value but never used.","'setIsHovered' is assigned a value but never used.","'useRef' is defined but never used.","'disableButton' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'useDispatch' is defined but never used.","'createPost' is defined but never used.","'title' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'body' is assigned a value but never used.","'setBody' is assigned a value but never used.","'videoIcon' is assigned a value but never used.","'setVideoIcon' is assigned a value but never used.","'linkIcon' is assigned a value but never used.","'setLinkIcon' is assigned a value but never used.","'focus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'create', 'form', and 'initialValue.length'. Either include them or remove the dependency array.",["594"],"React Hook useEffect has missing dependencies: 'initialTextset', 'initialValue', and 'photoState'. Either include them or remove the dependency array. If 'setInitialText' needs the current value of 'initialValue', you can also switch to useReducer instead of useState and read 'initialValue' in the reducer.",["595"],"'postActions' is defined but never used.","'PostsDashboard' is defined but never used.","'LikesDashboard' is defined but never used.","'pageType' is assigned a value but never used.","'setPageType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["596"],"'userPosts' is assigned a value but never used.","'receivePost' is defined but never used.","'useCallback' is defined but never used.","'initialPost' is assigned a value but never used.","'setInitialPost' is assigned a value but never used.","'initialTitleCheck' is assigned a value but never used.","'currentPhotoIndex' is assigned a value but never used.","'setCurrentPhotoIndex' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'postid' and 'sessionUser.id'. Either include them or remove the dependency array.",["597"],"'getCommentState' is assigned a value but never used.","'loggedin' is assigned a value but never used.","'errors' is assigned a value but never used.","'handleFollowButton' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['follow'] found.","Property","unnecessarilyComputedProperty",{"range":"598","text":"599"},"'handleUnfollowButton' is assigned a value but never used.","'likeId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'liker_id'. Either include it or remove the dependency array.",["600"],"'getFollowState' is assigned a value but never used.","'useLocation' is defined but never used.","'trendingPosts' is assigned a value but never used.","'useParams' is defined but never used.","'hasMore' is assigned a value but never used.","'setHasMore' is assigned a value but never used.","'error' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'pageNumber'. Either include them or remove the dependency array.",["601"],"React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.",["602"],"React Hook useEffect has missing dependencies: 'dispatch' and 'type'. Either include them or remove the dependency array.",["603"],"'postsToShow' is assigned a value but never used.",["604"],"React Hook useEffect has missing dependencies: 'dispatch', 'type', and 'userid'. Either include them or remove the dependency array.",["605"],"'usersMap' is assigned a value but never used.","'setMoreUsers' is assigned a value but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","React Hook useEffect has missing dependencies: 'dispatch' and 'userid'. Either include them or remove the dependency array.",["606"],"React Hook useEffect has a missing dependency: 'followState'. Either include it or remove the dependency array.",["607"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Nested block is redundant.","redundantNestedBlock",{"messageId":"608","fix":"609","desc":"610"},{"messageId":"611","fix":"612","desc":"613"},{"desc":"614","fix":"615"},{"desc":"616","fix":"617"},{"desc":"618","fix":"619"},{"desc":"620","fix":"621"},{"desc":"622","fix":"623"},{"desc":"624","fix":"625"},[2158,2168],"'follow'",{"desc":"626","fix":"627"},{"desc":"628","fix":"629"},{"desc":"630","fix":"631"},{"desc":"628","fix":"632"},{"desc":"633","fix":"634"},{"desc":"633","fix":"635"},{"desc":"636","fix":"637"},{"desc":"638","fix":"639"},"removeEscape",{"range":"640","text":"641"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"642","text":"643"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [post.author.id, sessionUser]",{"range":"644","text":"645"},"Update the dependencies array to be: [closeOptions, showOptions]",{"range":"646","text":"647"},"Update the dependencies array to be: [create, form, initialValue.length]",{"range":"648","text":"649"},"Update the dependencies array to be: [initialTextset, initialValue, photoState]",{"range":"650","text":"651"},"Update the dependencies array to be: [dispatch, userid]",{"range":"652","text":"653"},"Update the dependencies array to be: [dispatch, postid, sessionUser.id]",{"range":"654","text":"655"},"Update the dependencies array to be: [liker_id, sessionUser]",{"range":"656","text":"657"},"Update the dependencies array to be: [dispatch, pageNumber, type]",{"range":"658","text":"659"},"Update the dependencies array to be: [posts, type]",{"range":"660","text":"661"},{"range":"662","text":"659"},"Update the dependencies array to be: [dispatch, pageNumber, type, userid]",{"range":"663","text":"664"},{"range":"665","text":"664"},"Update the dependencies array to be: [dispatch, type, userid]",{"range":"666","text":"667"},"Update the dependencies array to be: [followState, pageNumber]",{"range":"668","text":"669"},[672,673],"",[672,672],"\\",[825,838],"[post.author.id, sessionUser]",[2831,2844],"[closeOptions, showOptions]",[1673,1675],"[create, form, initialValue.length]",[2195,2197],"[initialTextset, initialValue, photoState]",[1660,1668],"[dispatch, userid]",[1494,1504],"[dispatch, postid, sessionUser.id]",[20913,20926],"[liker_id, sessionUser]",[2138,2144],"[dispatch, pageNumber, type]",[2276,2283],"[posts, type]",[2714,2726],[2106,2119],"[dispatch, pageNumber, type, userid]",[2752,2764],[1479,1485],"[dispatch, type, userid]",[2063,2075],"[followState, pageNumber]"]